{
    "meta_info": {
        "title": "Learning on Graphs with Out-of-Distribution Nodes",
        "abstract": "Graph Neural Networks (GNNs) are state-of-the-art models for performing\nprediction tasks on graphs. While existing GNNs have shown great performance on\nvarious tasks related to graphs, little attention has been paid to the scenario\nwhere out-of-distribution (OOD) nodes exist in the graph during training and\ninference. Borrowing the concept from CV and NLP, we define OOD nodes as nodes\nwith labels unseen from the training set. Since a lot of networks are\nautomatically constructed by programs, real-world graphs are often noisy and\nmay contain nodes from unknown distributions. In this work, we define the\nproblem of graph learning with out-of-distribution nodes. Specifically, we aim\nto accomplish two tasks: 1) detect nodes which do not belong to the known\ndistribution and 2) classify the remaining nodes to be one of the known\nclasses. We demonstrate that the connection patterns in graphs are informative\nfor outlier detection, and propose Out-of-Distribution Graph Attention Network\n(OODGAT), a novel GNN model which explicitly models the interaction between\ndifferent kinds of nodes and separate inliers from outliers during feature\npropagation. Extensive experiments show that OODGAT outperforms existing\noutlier detection methods by a large margin, while being better or comparable\nin terms of in-distribution classification.",
        "author": "Yu Song, Donglin Wang",
        "link": "http://arxiv.org/abs/2308.06714v1",
        "category": [
            "cs.LG",
            "cs.AI"
        ],
        "additionl_info": "Accepted by KDD'22"
    },
    "latex_extraction": {
        "content": {
            "section 1": {
                "name": "Introduction",
                "content": "\nGraphs neural networks (GNNs) have become the \\textit{de facto} tool for performing prediction tasks on graphs. Among various applications, one of the most important tasks of GNNs is semi-supervised node classification (SSNC) \\cite{kipf2016semi}. In SSNC, GNNs aggregate information from adjacent nodes and generate representations that are smooth within neighborhoods, alleviating the difficulty of classification. \n\nIn recent years, many studies have begun to consider graph learning tasks in realistic settings, such as graphs with label noise \\cite{nrgnn2021}, low labeling rates \\cite{few2020} and distribution shifts \\cite{generalization2021, size2021}. However, very few work has considered the scenario where out-of-distribution (OOD) nodes exist in the graph on which one performs SSNC. By using the term 'OOD', we borrow the notion from CV and NLP, which means samples with labels not seen in the training set. In the graph domain, this can be quite common as graphs are usually constructed in an incremental way where new nodes are added due to the connectivity with existing ones, and for most cases there is no guarantee that all nodes must connect to others from the same distribution. For example, we want to classify papers in a citation network into AI-related topics, e.g., deep learning, reinforcement learning and optimization methods. The network is obtained using a web crawler which adopts a breadth first search (BFS) strategy and keeps exploring papers referencing existing ones for a number of iterations. When searching stops, the resulting network is not guaranteed to contain nodes only from the known categories, as it is common for a scientific paper to refer to articles in less relevant research areas, for example, an AI paper might cite papers in neuroscience and mathematics. In real-world networks, the proportion of nodes from irrelevant categories may even be higher than those from the classes of interest. \\textit{Given a noisy graph as such, our task is to predict the label for nodes which correspond to one of the known classes, and identify nodes that do not belong to any of them.} \n\n\n\nIn CV and NLP, OOD detection has been a hot research area with a long history. \\cite{msp2016} demonstrates that neural networks tend to assign higher softmax probabilities to in-distribution (ID) samples than to out-of-distribution (OOD) ones, and proposes to use the maximum softmax probability (MSP) produced by the neural network as the score for OOD detection. Other approaches attempt to improve detection performance by modifying the model structure \\cite{mcd2019, eloc2018}, employing customized uncertainty measures \\cite{m2018} or exploiting labeled outliers \\cite{oe2018}.\n\nDifferent from the above methods which only focus on identifying OOD samples at inference time, the presence of OOD nodes in graphs makes the task more challenging. First, in traditional settings of CV and NLP, outliers only occur in the test set, while in the graph domain one is usually given the entire graph for training which consists of both inliers and outliers, transferring the problem from detecting \\textit{unknown-unknown} to \\textit{known-unknown}. How to leverage the availability of outliers is the key to success. Second, the classifier in CV and NLP is usually trained in a fully supervised manner with abundant labeled data, while for graphs the most common approach for node classification is to train a GNN with limited labeled data in a semi-supervised way. Due to the message-passing framework adopted by GNNs, the latent features of ID and OOD nodes can be affected by each other. Therefore, it is important to study how the information flow between inliers and outliers can affect the performance of in-distribution classification and outlier detection. A similar question arises in \\cite{oliver2018realistic}, where the authors investigate the performance of semi-supervised learning (SSL) methods when labeled and unlabeled data are drawn from different distributions. However, this problem remains unexplored in the field of graph-based SSNC. Third, since our purpose is to address node classification and outlier detection in a joint framework, a natural question is how to combine the two tasks into a unified model, and how to balance the impact of one task on the other. \n\nIn this work, we first analyze the impact of OOD nodes on graph learning tasks with GNNs. We demonstrate that for graphs with high homophily, message-passing GNNs are inherently good at detecting outliers due to the smoothness effect caused by feature propagation. Furthermore, we find that removing inter-edges between ID and OOD nodes while preserving intra-edges within each cluster can lead to the overall best performance. Motivated by these findings, we propose a novel GNN model Out-of-Distribution Graph Attention Network (OODGAT) which utilizes attention mechanism and explicitly models the interaction between inliers and outliers. Experiments show that OODGAT outperforms all baselines in terms of both detection and classification, and even surpasses post-hoc detectors which are tuned directly on the test set.\n\nTo the best of our knowledge, we are the first to formally define the problem of \\textit{graph learning with OOD nodes}. \\cite{uncertainty2020} considers a similar setting where the graph also contains OOD nodes. They developed a Bayesian framework to detect outliers by calculating multiple uncertainty measures. Our work differs in that we analyze the fundamental advantages of GNNs from the perspective of network geometry, and exploit the information contained in the graph structure to solve the problem in an efficient and elegant way.\n\nTo summarize, our work makes the following contributions:\n\\begin{itemize}\n    \\item We formalize the problem of \\textit{graph learning with OOD nodes} and identify its challenges.\n    \\item We analyze the problem from the perspective of graph structure and present the basic design choice to achieve good performance.\n    \\item We propose a novel GNN model called OODGAT which explicitly distinguishes inliers from outliers during feature propagation and solves the problem of node classification and outlier detection in a joint framework.\n    \\item We conduct extensive experiments on various graph datasets to demonstrate the effectiveness of the proposed method. \n\\end{itemize}\n\n\n"
            },
            "section 2": {
                "name": "Related Works",
                "content": "\n",
                "subsection 2.1": {
                    "name": "Graph Neural Networks",
                    "content": "\nGraph neural networks (GNNs) have shown great performance in various applications related to graphs. In this work, we focus on the problem of semi-supervised node classification (SSNC) \\cite{kipf2016semi}. In SSNC, GNNs aggregate features from neighboring nodes and produce a latent space where the similarity between node embeddings corresponds to the connection patterns between nodes in the geometry space. The most commonly used GNNs include graph convolutional network (GCN) \\cite{kipf2016semi}, graph attention network (GAT) \\cite{gat} and GraphSAGE \\cite{sage2017}. \n\n"
                },
                "subsection 2.2": {
                    "name": "Outlier Detection",
                    "content": "\nOutlier detection, also known as OOD detection,  has been a hot research area in various domains. Based on the availability of OOD data during training, OOD detectors can be classified into three types, namely unsupervised, supervised and semi-supervised methods. \n\n\\noindent \\textbf{Unsupervised Methods.} \nUnsupervised methods only utilize in-distribution data to train the outlier detector. Among various techniques, the most commonly used ones include ODIN \\cite{odin2017} and Mahalanobis-distance \\cite{m2018}. These methods are called \\textit{post-hoc detectors} as they assume the classification network is already trained on in-distribution data, and the detector is built on top of the pretrained classifier by calibrating its output probabilities or exploiting its latent space. Other approaches like \\cite{eloc2018, csi2020, ssd2021} require training an additional model which is designed specifically for OOD detection, apart from the original classification network. Unsupervised methods do not utilize the abundant unlabeled data during training and can only find sub-optimal solutions since they treat the classification and outlier detection as two independent tasks. \n\n \\noindent \\textbf{Supervised Methods.} \nSupervised methods assume access to a set of OOD samples during training \\cite{oe2018, acet2019, confidence2017}. Such methods train the classifier in an end-to-end fashion using cross-entropy loss on the ID training data to minimize classification error, together with a confidence penalty loss on the labeled OOD data to maintain low prediction confidence. For example, \\cite{confidence2017} applies a KL-divergence term to OOD samples to ensure their predictions are close to uniform distribution. Supervised detectors generally outperform unsupervised ones for they manage to exploit the distributional information provided by training OOD data. However, the OOD samples are either from a different but related dataset \\cite{oe2018} or generated by GANs \\cite{oodgan2021}, limiting its application in the graph domain where one cannot find such proxy OOD datasets and cannot easily generate pseudo-OOD data.\n\n \\noindent \\textbf{Semi-supervised Methods.} \nInspired by semi-supervised learning, recent studies in OOD detection also consider the setting where an unlabeled set is available during training \\cite{step2021, mcd2019, tifrea2021novelty}. \\cite{step2021} defines a novel task called 'semi-supervised OOD detection', where one is given a limited set of labeled inliers and a large mixed set of both inliers and outliers, whose identities cannot be known during training. They employ contrastive learning to obtain latent representations of unlabeled samples and compute their distance from the centers of in-distribution data as the OOD score. \\cite{tifrea2021novelty} adopts a similar setting but solves the problem with ensemble. The drawbacks of these methods include 1) they are not designed for graphs and thus cannot utilize the structural information; 2) they usually require training an additional detection model and cannot handle classification and detection in the same framework.  \n\n"
                },
                "subsection 2.3": {
                    "name": "Semi-supervised Learning With Distribution Mismatch",
                    "content": "\nAnother way to understand the proposed task is to consider it as a semi-supervised learning problem on graphs. SSL assumes access to only a small set of labeled data and a relatively large set of samples without label information. Oliver et al. \\cite{oliver2018realistic} points out that existing SSL methods tend to degrade the original classification performance when there exists a class distribution mismatch between labeled and unlabeled data. Following their discovery, researchers have developed SSL methods that are robust against OOD samples, with their performance being at least as good as fully-supervised learning \\cite{guo2020safe, openssl2020, openmatch2021}. The key idea of such methods is straightforward: they attempt to detect and remove the OOD part of the unlabeled data and apply SSL techniques only on the remaining purified set. This setting resembles ours in that they also treat the problem as two tasks, i.e., semi-supervised learning on in-distribution data and outlier detection on the unlabeled set, where each task has its influence on the other. However, these approaches perform SSL by adding regularization terms to the original classification loss (e.g., cross-entropy), like VAT \\cite{vat2018} and minimum entropy regularization \\cite{entropy2005}, while in the graph domain, SSNC is usually done with GNNs which achieve semi-supervised learning in an implicit way.\n\n"
                }
            },
            "section 3": {
                "name": "Learning on Graphs with Out-of-distribution Nodes",
                "content": "\n\\label{sec:analysis}\nIn this section, we define the problem of \\textit{graph learning with OOD nodes} and discuss the design choice of OODGAT.\n\n",
                "subsection 3.1": {
                    "name": "Problem Formulation",
                    "content": "\nConsider a graph $\\mathcal{G}=(\\mathcal{V}, \\mathcal{E})$, where $\\mathcal{V}$ denotes the set of nodes and $\\mathcal{E}$ denotes the set of edges. The graph structure is represented by an binary adjacency matrix $\\mathbf{A}\\in\\{0,1\\}^{|\\mathcal{V}|\\times|\\mathcal{V}|}$. Each node $v$ in the graph is associated with a feature vector $\\mathbf{x}_v$ and a label $y_v$, and the overall feature matrix and class vector can be represented by $\\mathbf{X}$ and $\\mathbf{y}$, respectively. In SSNC, the node set can be further divided into $\\mathcal{V}=\\mathcal{V}_l\\cup \\mathcal{V}_u$ where $\\mathcal{V}_l$ refers to the set of nodes whose labels are accessible during training. Similarly, the feature matrix and class vector can be divided into \n$\\mathbf{X}=\n{\\left[ \n    {\\mathbf{X}_l}^\\top,{\\mathbf{X}_u}^\\top\n \\right]} ^\\top$ \nand $\\mathbf{y}=[\\mathbf{y}_l\\mathbin \\Vert \\mathbf{y}_u]$. The aim of SSNC is to predict the labels for nodes in $\\mathcal{V}_u$ using the training set $(\\mathbf{X}_l, \\mathbf{y}_l)$, the unlabeled features $\\mathbf{X}_u$ and the graph structure $\\mathbf{A}$. Different from traditional close-world SSNC which assumes that nodes in $\\mathcal{V}_l$ and $\\mathcal{V}_u$ are sampled from the same distribution, we generalize the problem into a more realistic setting where nodes in $\\mathcal{V}_u$ may come from a different distribution than nodes in $\\mathcal{V}_l$. Due to the distribution shift between labeled and unlabeled data, the class vector $\\mathbf{y}_u$ may contain labels not seen in $\\mathbf{y}_l$, and the label space $\\mathcal{Y}$ is enlarged by $\\mathcal{Y}=\\mathcal{Y}_l\\cup \\mathcal{Y}_u$. For simplicity, we denote nodes with labels from $\\mathcal{Y}_l$ by ID nodes or inliers and nodes with labels from $\\mathcal{Y}_u\\setminus\\mathcal{Y}_l$ by OOD nodes or outliers. We call this setting \\textit{graph learning with OOD nodes} and the purpose is to 1) assign labels from $\\mathcal{B} = \\{0, 1\\}$ to nodes in $\\mathcal{V}_u$ where 0 stands for ID and 1 for OOD and 2) for nodes tagged as ID, we further classify them to be one of the classes in $\\mathcal{Y}_l$. Note that for both tasks, we are presented with the whole graph $\\mathcal{G}$ during training, leading to a \\textit{semi-supervised} and \\textit{transductive} setting. In the remaining of the article, we call the two tasks Semi-Supervised Outlier Detection (SSOD) and Semi-Supervised Node Classification (SSNC) for the sake of simplicity. \n\n"
                },
                "subsection 3.2": {
                    "name": "Semi-supervised Outlier Detection",
                    "content": "\nUnlike previous outlier detection methods which are designed primarily for CV and NLP tasks and derive the detector using only in-distribution data, the uniqueness of graphs makes us wonder: \\textit{can we leverage the unlabeled data $\\mathbf{X}_u$ and the graph structure $\\mathbf{A}$ for better OOD detection?} \nTo answer the question, we first take a brief review at the most common task on graphs, namely, SSNC. In SSNC, a GNN is used to propagate information between adjacent nodes and produce a latent space where features are distributed smoothly w.r.t. the graph structure \\cite{insight2018}. The smoothness is desirable due to the widely adopted homophily assumption, i.e., connected nodes tend to share the same label \\cite{pei2020geom}. We argue that, like SSNC, the connection pattern between nodes can also provide information for distinguishing ID from OOD. We start by giving the following proposition:\n\n\\begin{prop}\nGiven a graph $\\mathcal{G}$, the set of original labels $\\mathcal{Y}=\\mathcal{Y}_l\\cup \\mathcal{Y}_u$, and the set of identity labels $\\mathcal{B}=\\{0, 1\\}$. Assume that:\n\n\n(1) There exists a mapping $f: \\mathcal{Y}\\mapsto\\mathcal{B}$ which maps each label in $\\mathcal{Y}$ to be ID or OOD;\n\n(2) $\\mathcal{G}$ is homophilic w.r.t. to $\\mathcal{Y}$, i.e., edges in $\\mathcal{G}$ tend to connect nodes with the same label in $\\mathcal{Y}$.\n\n\nThen, $\\mathcal{G}$ is also homophilic w.r.t. $\\mathcal{B}$.\n\\end{prop}\n\nThe proof of the proposition is presented in Appendix \\ref{sec:proof}. \nFrom the proposition, we make the following hypothesis: \nGNNs are a natural fit for SSOD because they are inherently equipped with a regularizer that pushes the predicted OOD scores to be close within densely connected communities, which is helpful for graphs with high homophily. We illustrate this in Figure \\ref{fig:smooth}. The left figure shows the OOD scores obtained without considering the graph structure. Overall, the scores of OOD nodes are higher than ID nodes, with an exception in each community due to the weakness of modern neural networks \\cite{acet2019}. By smoothing features according to the graph structure (Figure \\ref{fig: smooth_b}), GNN manages to recover the true scores of nodes from their neighbors (green arrows). However, we also notice the edges that connect different kinds of nodes, which lead to undesirable feature aggregation and compromise the separation between inliers and outliers (red arrows). Since the number of intra-edges significantly exceeds that of inter-edges (for graphs with high homophily), the overall performance should be better than not utilizing structural information at all.\n\nTo verify the hypothesis, we conduct an experiment on Cora \\cite{cora2016} using Multilayer Perceptron (MLP) and GCN \\cite{kipf2016semi} as predictors, and calculate the entropy of the predicted class distribution as the OOD score as in \\cite{likelihood2019, uncertainty2020, entropic2021}. The higher the entropy, the more likely the model considers the node to be OOD. The ROC curves for both methods are plotted in Figure \\ref{fig:roc_a}, from which we can see the GCN detector outperforms the MLP counterpart by a large margin, validating that the graph structure is useful for detecting outliers. To better understand the impact of different kinds of connections, we test the detection performance on graphs with different subsets of edges, and the results are shown in Figure \\ref{fig:roc_b}. As expected, removing inter-edges from the graph leads to improved detection performance (green line vs. orange line). However, the performance drops sharply when we further remove edges within ID (red line) or OOD (purple line) communities, indicating that smoothness within the same type of nodes is critical for successful detection.\n\n\n"
                },
                "subsection 3.3": {
                    "name": "Semi-supervised Node Classification",
                    "content": "\nIt is known that the distribution mismatch between labeled and unlabeled data can hurt the performance of semi-supervised learning \\cite{oliver2018realistic}. In graph-based SSNC, unlabeled nodes convey their influence to model parameters through their connections to the labeled ones, so it is natural to expect the same performance drop observed in \\cite{oliver2018realistic} when the graph contains edges connecting inliers and outliers. However, the problem here is more sophisticated. On the one hand, the information exchange between ID and OOD data may introduce noise to the interested distribution, making the model prone to overfitting and leading to poor generalization; On the other hand, the addition of inter-connections can enhance the connectivity of the graph and facilitate the propagation of supervision signals among nodes. Moreover, the connection patterns between inliers and outliers may provide knowledge about how to classify ID nodes. Therefore, it is difficult to tell whether the presence of inter-connections is beneficial or detrimental to SSNC. To find out the impact of inter-connections, we conducted experiments on\nsome commonly used graph datasets using GCN as the classifier and report the mean accuracy across 9 runs in Table \\ref{tab:edge_removal}. For each graph, we test the classification accuracy in three cases: preserving all inter-edges (remove=0), randomly dropping half of them (remove=0.5), and removing them all (remove=1.0). Empirically, removing inter-edges can improve the generalization of in-distribution classification, which is particularly true for certain datasets.\n\n\n\n"
                }
            },
            "section 4": {
                "name": "OODGAT: End-to-end Model for SSOD and SSNC",
                "content": "\nIn this section, we first introduce the attention architecture adopted by OODGAT, and then propose three regularization terms to guide the learning process of OODGAT. \n",
                "subsection 4.1": {
                    "name": "Attention Mechanism: From Node to Edge",
                    "content": "\nSince it is important to separate in-distribution nodes from OOD nodes, it is natural to resort to attention mechanism which adaptively computes the weights for aggregating information from neighbors. The general form of graph convolution with attention is:\n\\begin{equation}\n    \\mathbf{h}_i^{\\prime}=\\sigma\\left(\\sum_{j\\in \\mathcal{N}(i) \\cup \\{v_i\\}} {\\alpha_{ij} \\mathbf{W} \\mathbf{h}_j} \\right)\n\\end{equation}\nwhere $\\alpha_{ij}$ is the attention weight for aggregating information from $v_j$ to $v_i$. The difference between various graph attention networks lies in the way the attention values are calculated. For example, GAT \\cite{gat} proposes to compute the (unnormalized) attention weights between $v_i$ and $v_j$ by $e_{ij}=LeakyReLU\\left(\\mathbf{a}^\\top \\left[\\mathbf{W}\\mathbf{h}_i \\mathbin \\Vert \\mathbf{W}\\mathbf{h}_j\\right]\\right)$, where they use a single layer neural network parameterized by $\\mathbf{a}$ to output attention weights. However, none of the previous approaches takes OOD nodes into account, and the attention coefficients obtained from their methods are not guaranteed to contain knowledge about how to distinguish inliers from outliers.  \n\nIn OODGAT, we propose to explicitly model the interaction between inliers and outliers. Based on the discussion in Section \\ref{sec:analysis}, we summarize three properties the attention mechanism should possess : 1) allow messages to pass within in-distribution nodes, 2) allow message passing within out-of-distribution nodes and 3) block information flow between inliers and outliers. Therefore, we propose the following attention form:\n\\begin{equation}\n    e_{ij}=1-\\left|w(i)-w(j)\\right|\n    \\label{equ:unormalized}\n\\end{equation}\n where $w(i)$ and $w(j)$ are the attention scores for $v_i$ and $v_j$, respectively. If we consider $w(v)$ as a binary classifier that assigns different weights to inliers and outliers, we can find that Equation (\\ref{equ:unormalized}) satisfies all the properties discussed above. We illustrate this in Figure \\ref{fig:oodgat}. Without loss of generality, when $w_v$ and $w_{c^\\prime}$ are large, say $w_v=w_{c^\\prime}=1$, and $w_u$ and $w_c$ are small, say $w_u=w_c=0$, the attention weights for intra-edges become $e_{cu}=e_{c^\\prime v}=1$, while the weights for inter-edges become $e_{cv}=e_{c^\\prime u}=0$. We also note that, for any node $v_i$, the weight with which it attends to itself is fixed to be $e_{ii}=1$, i.e., the maximum value possible for all node pairs. This is desirable since maintaining more self-information can be helpful when the neighborhood may contain contaminated features. After obtaining $e_{ij}$, we normalize them in each neighborhood using softmax to keep the embedding scale unchanged before and after aggregation:\n \\begin{equation}\n     \\alpha_{ij} = softmax_j (e_{ij}) = \\frac{exp(e_{ij})}{\\sum_{k\\in\\mathcal{N}(i)\\cup\\{v_i\\}} exp(e_{ik})}\n \\end{equation}\n \n The binary classifier $w(v)$ can be defined in various forms. To avoid too many parameters and a complex model, we simply implement it as a logistic regression classifier parameterized by $\\mathbf{a}\\in \\mathbb{R} ^{d^\\prime}$ over the latent space of a GNN layer, i.e., $w(v)=\\sigma\\left(\\mathbf{a}^\\top\\mathbf{W}\\mathbf{h}_v\\right)$, where $\\mathbf{W}\\in\\mathbb{R}^{d^{\\prime}\\times d}$ is the weight matrix of the GNN layer, $\\mathbf{h}_v\\in\\mathbb{R}^d$ is the input of the layer, and $\\sigma$ is the sigmoid function. The classifier aims to find a partition of the latent space such that inliers and outliers are well separated from each other. To enhance the expressiveness of the model, we extend the attention computation to a multi-head variant, similar to \\cite{gat}:\n \\begin{equation}\n     \\mathbf{h}_i^{\\prime} = \\bigparallel_{k=1}^K \\sigma \\left(\\sum_{j \\in \\mathcal{N}(i) \\cup \\{v_i\\}} \\alpha_{ij}^k \\mathbf{W}^k \\mathbf{h}_j\\right)\n \\end{equation}\n where $K$ is the number of attention heads and $\\bigparallel$ means concatenation. In the prediction layer, the concatenation is replaced with averaging to keep the dimension reasonable for classification:\n  \\begin{equation}\n     \\mathbf{z}_i =  softmax \\left(\\frac{1}{K} \\sum_{k=1}^K \\sum_{j \\in \\mathcal{N}(i) \\cup \\{v_i\\}} \\alpha_{ij}^k \\mathbf{W}^k \\mathbf{h}_j\\right)\n \\end{equation}\n\n where $\\mathbf{z}_i$ is the predicted class distribution of $v_i$, $\\sum_{k=1}^{|\\mathcal{Y}_l|} z_{ik}=1$. \n \n \n\n\n"
                },
                "subsection 4.2": {
                    "name": "Regularizer",
                    "content": "\n\\label{sec:reg}\nOf course, the cross-entropy loss alone is not sufficient to make OODGAT work in the expected way. In particular, we want the embedded binary classifier to learn knowledge about how to distinguish inliers from outliers. Therefore, we propose three regularizers to guide the learning process of OODGAT, i.e., consistency loss, entropy loss and discrepancy loss. The architecture of OODGAT is shown in Figure \\ref{fig:architecture}, which we will explain in detail in the following sections.\n\n\\noindent \\textbf{Consistency Regularizer.} \nOODGAT integrates a binary classifier to measure the OOD score for nodes in the graph, and translates the node-level scores into edge-level attention weights for feature aggregation. Besides the scores predicted by the classifier, we can also obtain the output distribution of nodes at the final layer of the model, from which the entropy can be calculated as another kind of OOD measurement. We denote the scores predicted by the classifier as $w$, and the scores given by entropy as $e$. To coordinate the relationship between $w$ and $e$, we design the following regularization term called consistency loss:\n\\begin{equation}\n    \\mathcal{L}_{con} =-\\cos\\left(\\mathbf{w},\\mathbf{e}\\right)\n    \\label{eq:consistency}\n\\end{equation}\nwhere $\\mathbf{w}$ represents the vector of OOD scores predicted by the classifier:\n\\begin{equation}\n\\begin{aligned}\n    \\mathbf{w} = [w_1, w_2, & \\cdots, w_{|\\mathcal{V}|}]^\\top\\\\\n    w_i = \\sigma &(\\mathbf{a}^\\top \\mathbf{Wh}_i)\\\\\n\\end{aligned}\n\\end{equation}\nand $\\mathbf{e}$ denotes the vector of OOD scores given by entropy:\n\\begin{equation}\n\\begin{aligned}\n    \\mathbf{e} = [\\sigma(\\tilde{e_1}), \\sigma(&\\tilde{e_2}), \\cdots, \\sigma(\\tilde{e_{|\\mathcal{V}|})}]^\\top\\\\\n    \\tilde{e_i} = &\\frac{e_i-\\mu_e}{\\sigma_e}\\\\\n    e_i = H(\\mathbf{z}_i) =& - \\sum_{j=1}^{|\\mathcal{Y}_l|} z_{ij}log(z_{ij})\n\\end{aligned}\n\\end{equation}\nwhere $\\mu_e$ and $\\sigma_e$ denotes the mean and standard deviation of ${\\{e_i\\}}_{i=1}^{|\\mathcal{V}|}$, and $H(\\mathbf{z})$ is the entropy of the predicted class distribution given by the last layer of OODGAT. \n\nIn Equation (\\ref{eq:consistency}), we use cosine similarity to constrain the difference between $\\mathbf{w}$ and $\\mathbf{e}$, i.e., the two methods should give similar predictions across all nodes.  \nThe intuition behind the consistency regularizer is the causal relationship between the attention mechanism and the model's final output. That is, when the scores given by the classifier change, the attention weights used for aggregating features will also change, which in turn affects the final output of the model. If we regard the change of the classifier as the cause, then the change of the model's output can be viewed as the effect. By aligning cause and effect, the hypothesis space of the model is reduced and gradient descent is more likely to find solutions that are closer to ground truth. Imagine an extreme case where the classifier works perfectly and produces OOD scores close to ground-truth. In this case, the attention weights of edges also become near perfect and the model becomes extremely powerful in detecting outliers as it smooths representations for all ID and OOD clusters and prevents the information exchange between ID and OOD communities. As a result, the OOD scores computed from entropy are also close to reality, making the angle between $\\mathbf{w}$ and $\\mathbf{e}$ small.\nFrom another perspective, we can interpret the consistency loss as a kind of supervised learning: the entropy provides supervision to the classifier and vice versa. As training progresses, the classifier not only learns from the final output, but also teaches the model to produce more reliable predictions by differentiating ID and OOD better in the latent space. Thus, the two modules play a chasing game and benefit each other.\n\nFor OODGAT with two layers, the consistency loss is computed for both layers, and in each layer, the score vector $\\mathbf{w}$ is averaged across all heads:\n\\begin{equation}\n\\begin{aligned}\n    \\mathcal{L}_{con} & = -\\frac{1}{2} \\times \\left(\\cos(\\mathbf{w}^1,\\mathbf{e}) + \\cos(\\mathbf{w}^2,\\mathbf{e})\\right)\\\\\n    \\mathbf{w^l} = \\biggl[\\frac{1}{K}&\\sum_{k=1}^{K} w_1^{lk}, \\frac{1}{K}\\sum_{k=1}^{K} w_2^{lk}, \\cdots, \\frac{1}{K}\\sum_{k=1}^{K} w_{|\\mathcal{V}|}^{lk} \\biggr]^\\top\n\\end{aligned}\n\\end{equation}\n\n\n\n\n\\noindent \\textbf{Entropy Regularizer.}  \nIn OODGAT, we use entropy as the measure of predictive uncertainty. As training proceeds, the cross-entropy loss continuously pulls the outputs of labeled nodes toward one-hot distribution, pushing their entropy to the lowest level. Due to the generalization ability of neural networks, nodes outside the training set may also produce low-entropy predictions, especially those with attributes similar to or closely connected to the labeled ones, resulting in some low-entropy regions in the graph. In contrast to the classification loss, we want to keep the uncertainty of outliers as high as possible to counteract the entropy-reducing effect caused by cross-entropy. However, the true identities of nodes cannot be obtained during training, so we take the predictions given by the binary classifier as pseudo-labels, and make the outputs of pseudo-OOD nodes close to uniform distribution to enhance the distinguishability between inliers and outliers. Thus, we get the following entropy loss:\n \\begin{equation}\n     \\mathcal{L}_{ent}=\\frac{\\sum_{i=1}^{\\left|\\mathcal{V}\\right|}CE\\left(\\mathbf{u},\\mathbf{z}_i\\right)\\delta\\bigl(w(i)>\\epsilon\\bigr)}{\\sum_{i=1}^{\\left|\\mathcal{V}\\right|}\\delta\\bigl(w(i)>\\epsilon\\bigr)}\n \\end{equation}\n where $\\mathbf{u}$ is uniform distribution, $\\mathbf{z}_i$ is the predicted class distribution of $v_i$, $\\epsilon$ is the threshold for selecting pseudo-OOD nodes, $\\delta$ means the Kronecker delta. \n \n\\noindent \\textbf{Discrepancy Regularizer.} \nFor OODGAT with two graph convolutional layers, we further constrain the difference between the OOD scores computed by the two layers by minimizing the following discrepancy loss:\n \\begin{equation}\n     \\mathcal{L}_{dis}=-\\cos\\left(\\mathbf{w}^1,\\mathbf{w}^2\\right)\n \\end{equation}\n\\noindent \\textbf{Final Objective.}\nOverall, the optimal parameters of OODGAT are obtained by minimizing the following loss:\n\\begin{equation}\n\\begin{aligned}\n        \\mathcal{L}_{OODGAT} &=- \\frac{1}{|\\mathcal{V}_l|} \\sum_{i=1}^{|\\mathcal{V}_l|} log(z_{iy_i})  \\\\\n        & +a^{b\\times t}(\\beta \\mathcal{L}_{con}\n        + \\gamma \\mathcal{L}_{ent}\n        + \\zeta \\mathcal{L}_{dis})\n\\end{aligned}\n\\end{equation}\nwhere $\\beta$, $\\gamma$ and $\\zeta$ are the balance parameters of regularizers. In addition, $a^{b\\times t}$ is used to decay the weights of regularizers gradually as training progresses so as to control the balance point between ID classification and OOD detection. $a$ is a number between 0 and 1, $b$ is a small number and $t$ is the iteration step. In the experiments, we set $a$ and $b$ to be 0.9 and 0.01, respectively. \nBy combining the three regularizers with cross-entropy, OODGAT not only learns to classify in-distribution nodes, but also to separate inliers from outliers in the latent space, as shown in Figure \\ref{fig:space}. \n\n\n"
                }
            },
            "section 5": {
                "name": "Experiments",
                "content": "\nIn this section, we test OODGAT on various real-world graph datasets to demonstrate its effectiveness. Due to space constraints, some visualizations are presented in Appendix \\ref{sec:visual}. \n",
                "subsection 5.1": {
                    "name": "Experimental Setup",
                    "content": "\n\\noindent \\textbf{Evaluation Metrics.}\nIn the setting of \\textit{graph learning with OOD nodes}, we aim to accomplish two tasks simultaneously, which are 1) node classification and 2) outlier detection. For the first task, we adopt classification accuracy as the evaluation metric. For the second task, we calculate two metrics commonly found in the OOD detection literature, namely the area under ROC curve (AUROC) and the false positive rate when the true positive rate achieves 95\\% (FPR@95). Note that in all experiments we view the outliers as positive. To comprehensively evaluate the performance of the two tasks, we consider them together as a multi-class classification problem with N+1 classes, i.e., N in-distribution classes and one OOD class. We call this task \\textit{joint classification}, and the performance can be evaluated by weighted-F1\\footnote{The details of joint classification are explained in Appendix \\ref{sec:joint}.}.\n\n\\noindent \\textbf{Datasets.}\nWe test OODGAT on six commonly used graph datasets, i.e., Cora, AmazonComputers, AmazonPhoto, CoauthorCS, LastFMAsia and Wiki-CS \\cite{cora2016, amazon2018, lastfm2020, wiki2020}. For each dataset, we divide all classes into in-distribution and out-of-distribution, such that the ID part contains classes that are relatively balanced in node size, and the number of ID classes is at least three to avoid too easy classification\\footnote{See our Github for more details regarding the choice of ID and OOD classes.}. Similar to traditional SSNC, we randomly select 20 nodes per ID class as the training set. Besides, we construct a small validation set which contains 10 nodes from each ID class, and the same number of outliers randomly sampled from OOD classes. Statistics for the datasets are listed in Appendix \\ref{sec:dataset}.\n\n\\noindent \\textbf{Methods.}\nWe compare the following methods:\n\\begin{itemize}\n    \\item \\textbf{End-to-end Methods}, which accomplish SSOD and SSNC in the same framework. Specifically, we choose MLP, GCN \\cite{kipf2016semi}, GraphSAGE \\cite{sage2017}, GAT \\cite{gat}, and GATv2 \\cite{gatv2} as the end-to-end baselines. MLP is used to test the performance without considering graph topology, while the other four are representative GNN models w/ or w/o graph attention. For all methods, we use the entropy of the predicted distribution as the OOD score.\n    \\item \\textbf{Post-hoc OOD Detectors}, which require training an additional outlier detector on top of the pretrained classifier. We employ ODIN \\cite{odin2017}, Mahalanobis-distance \\cite{m2018}, and CaGCN \\cite{cagcn2021} as the post-hoc detectors. ODIN uses temperature scaling and input preprocessing to calibrate the output distribution, while Mahalanobis-distance leverages the latent space of the pretrained classifier to compute the distance between testing samples and known inliers.  For each method, we use the metric described in the original paper for OOD detection, i.e., MSP for \\cite{odin2017} and Mahalanobis-distance for \\cite{m2018}. CaGCN is a recently published method for calibrating the output confidence of GNNs. Intuitively, we can use the calibrated confidence as the score for outlier detection.\n    \\item \\textbf{GKDE} \\cite{uncertainty2020},  the abbreviation for Graph-based Kernel Dirichlet distribution Estimation, a method specifically designed to detect outliers on graphs. It proposes a multi-source uncertainty framework using various types of predictive uncertainties from both deep learning and belief theory, and\n    shows that \\textit{vacuity} is the best metric for OOD detection.\n    \\item \\textbf{OODGAT}, the method proposed in this paper. It has two versions: OODGAT-ENT which uses the entropy of the predicted distribution as the measure of outliers and OODGAT-ATT which uses the score given by the binary classifier instead. \n\\end{itemize}\n\n\\noindent \\textbf{Implementation Details.} \nFor all graphs, we perform 3 random splits to obtain training, validation, and test sets. For each split, we initialize the model with 3 random seeds.\\footnote{In the comparison with GKDE, we use the split given by the original authors in\n\\url{https://github.com/zxj32/uncertainty-GNN}} As a result, each experiment was performed 9 times.\nUnless specially mentioned, we tune the hyperparameters using grid search and select the best performing results according to the validation set. Specifically, we choose the learning rate from [0.01, 0.1], the dropout probability from [0, 0.5]. For models with multi-head attentions, the number of attention heads is chosen from [1, 4, 8], and the drop edge probability is set to 0.6. It is known that weight decay is helpful in preventing models from giving arbitrary high confidence, so we also choose the weight decay factor from [0, 5e-5, 5e-4, 5e-3]. We set the maximum iterations of training to be 1000 and perform early-stopping when $(AUROC+Accuracy)$ stops to increase for 200 epochs. All experiments are done using PyTorch Geometric, and the source code is made publicly available on Github\\footnote{\\url{https://github.com/SongYYYY/KDD22-OODGAT}}.\n\n"
                },
                "subsection 5.2": {
                    "name": "Main Results",
                    "content": "\n\\noindent \\textbf{Comparison with End-to-end Methods.}\nWe first compare our method with end-to-end approaches.\nThe results are listed in Table \\ref{tab:performance}. From the table, we make the following observations:\n\n1) On all datasets, GNNs outperform MLP in both SSOD and SSNC by a large margin, suggesting that the graph structure is helpful for both tasks, as indicated in Section \\ref{sec:analysis}.\n\n2) GraphSAGE surpasses GCN in terms of AUROC on 5 out of the 6 datasets, which may be attributed to the strategy of separating self and neighboring representations during feature propagation. \n\n3) Across all baseline models and datasets, GAT and/or GATv2 achieve the best performance in outlier detection. The results show that even the naive attention mechanism helps to distinguish nodes from different distributions.\n\n4) For SSOD, OODGAT outperforms all baselines on the six datasets by a considerable margin. On easy datasets such as AmazonPhoto and CoauthorCS, OODGAT achieves an AUROC of over 0.98, while for difficult tasks like LastFMAsia and Wiki-CS, OODGAT greatly improves the detection ability and achieves decent performance, demonstrating the effectiveness of the proposed propagation strategy. \n\n5) For SSNC, OODGAT achieves better or comparable results than other approaches. For example, OODGAT outperforms GAT and/or GATv2 by 3\\% and 1\\% in terms of classification accuracy on AmazonComputers and LastFMAsia. \n The results show that by removing the interference brought by OOD data, the classifier is more likely to converge to points with better generalization ability.\n \n6) From the perspective of \\textit{joint classification}, OODGAT consistently outperforms all competitors, making it the most powerful method for \\textit{graph learning with OOD nodes}. \n\n\n\n\\noindent \\textbf{Comparison with Post-hoc OOD Detectors.}\nWe also compare OODGAT with ODIN \\cite{odin2017}, Mahalanobis-distance \\cite{m2018} and CaGCN \\cite{cagcn2021}. The comparison is unfair as these methods either require additional data preprocessing or involve multiple training stages, while OODGAT accomplishes the mission without introducing additional complexity.  \nFor all experiments except OODGAT, we pretrain a GAT as the base classifier, and employ different post-hoc detectors for OOD detection. Note that unlike the original paper, we tune the detectors directly on the test set to eliminate the possibility of bad hyperparameter configurations. For OODGAT, we do not utilize the test set for training or tuning. Table \\ref{tab:performance_2} reports the detection performance of all methods. \nAs we can see, only in a few cases can the post-hoc detectors improve the detection ability (shaded cells). Apart from that, all methods lose their power due to the characteristics of graph data such as lack of supervision and non-continuous input.\nBy inspecting the last two columns, we find that despite being unfair, OODGAT outperforms all post-hoc detectors by a large margin. The superiority of OODGAT comes from the end-to-end optimization strategy  which simultaneously handles feature extraction and OOD detection, whereas other methods use a two-stage update framework  which trains the classifier and the detector separately and can only find sub-optimal solutions. \n\n\n\n\\noindent \\textbf{Comparison with GKDE.}\nWe now compare OODGAT with GKDE \\cite{uncertainty2020}. To ensure a fair comparison, we test our method on the same datasets used in the original paper and adopt the same preprocessing procedures. (See Appendix \\ref{sec:dataset} for details.) We report the AUROC and AUPR for outlier detection in Table \\ref{tab:performance_3}, where the results for GKDE are obtained from the original paper. As we can see, although OODGAT is much more efficient than GKDE which requires multiple forward passes due to the Bayesian framework, it still outperforms GKDE in both AUROC and AUPR on all three datasets. The results show that it is not enough to simply embed existing GNNs into the framework of uncertainty computation. Instead, making better use of the information implicit in the graph structure is the key to success.\n\n\n"
                },
                "subsection 5.3": {
                    "name": "Ablation Study",
                    "content": "\nThe success of OODGAT comes from the combination of the unique propagation strategy and the tailored regularizers for guiding the training process. In this section, we perform ablation analysis in Table \\ref{tab:ablation} to demonstrate the importance of each module proposed in Section \\ref{sec:reg}. Experiments are done on AmazonComputers using OODGAT-ATT, and the weight for each loss is the same as the best-performing result in Table \\ref{tab:performance}. \nIn (1), we train the model with only cross-entropy loss. The AUROC for outlier detection is around 50\\% which is similar to random guessing, indicating the use of cross-entropy alone is not sufficient to learn the classification of ID and OOD. We then add one of the proposed regularizers in (2),(3) and (4), respectively. The results show that consistency loss can effectively improve the discriminative ability of the binary classifier, while entropy loss and discrepancy loss contribute little or negatively when used without the help of consistency regularizer. This is expected since the other two losses rely on the accurate prediction of the binary classifier, which is learned through consistency loss. Comparing (2) and (5), we find that the entropy loss can further improve the detection ability when used together with consistency loss. Similarly, the comparison between (2) and (6) indicates that the addition of discrepancy regularizer can help the classification of in-distribution samples. The best result is obtained in (7) where we combine all three regularizers with cross-entropy loss. In summary, all regularizers contribute to the final performance, among which consistency loss plays the most important role. For information about the sensitivity of hyperparameters, please see Appendix  \\ref{sec:hyper}. \n\n\n"
                }
            },
            "section 6": {
                "name": "Conclusion",
                "content": "\nIn this paper, we propose and study the problem of \\textit{graph learning with OOD nodes}. We demonstrate that GNNs are inherently suitable for outlier detection on graphs with high homophily, and propose an end-to-end model OODGAT to tackle the problem of SSOD and SSNC. Extensive experiments show that while existing  methods such as input preprocessing and temperature scaling cannot handle the problem well, OODGAT consistently yields decent performance \nin both in-distribution classification and outlier detection. In the future, we aim to extend OODGAT to more realistic settings such as few-shot learning and incremental learning.\n\n\\begin{acks}\nThis work has been supported by Science and Technology Innovation 2030-Major Project\n(2022ZD0208800): Brain Science and Brain-like Research and NSFC General Program\n(No.62176215).\n\\end{acks}\n\n\\bibliographystyle{ACM-Reference-Format}\n\\bibliography{ref}\n\n\\appendix\n"
            },
            "section 7": {
                "name": "Proof of Proposition",
                "content": "\n\\label{sec:proof}\nWe now prove the proposition in Section \\ref{sec:analysis}.\n\\begin{proof}\n The homophily is the fraction of edges in a graph which connect nodes that have the same label. In \\cite{pei2020geom}, the node homophily ratio is defined as:\n\n\\[h = \\frac{1}{|\\mathcal{V}|} \\sum_{v \\in \\mathcal{V}} \\frac{ | \\{ (u,v) : u \\in \\mathcal{N}(v) \\wedge y_u = y_v \\} | } { |\\mathcal{N}(v)| }\\]\n\n\nAssuming a graph $\\mathcal{G}$ whose node homophily ratio w.r.t. $\\mathcal{Y}$ is $h$. By definition, we can derive the node homophily ratio w.r.t. $\\mathcal{B}$ as:\n\n\\[h^{\\prime} = \\frac{1}{|\\mathcal{V}|} \\sum_{v \\in \\mathcal{V}} \\frac{ | \\mathcal{A}(v) | + \\sum_{u \\in \\mathcal{B}(v) } \\delta(f(y_u) = f(y_v)) } { |\\mathcal{N}(v)| }\\]\n\nwhere $\\mathcal{A}(v)=\\{ u : u \\in \\mathcal{N}(v) \\wedge y_u = y_v \\}$, $\\mathcal{B}(v)=\\{u : u \\in \\mathcal{N}(v) \\wedge y_u \\neq y_v \\}$, and $\\mathcal{N}(v) = \\mathcal{A}(v) \\cup \\mathcal{B}(v)$. $f$ is a mapping from $\\mathcal{Y}$ to $\\mathcal{B}$.\n\nSince for any $v$, we have \n\\[|\\mathcal{A}(v)| = | \\{ (u,v) : u \\in \\mathcal{N}(v) \\wedge y_u = y_v \\} |\\]\nand\n\\[\\sum_{u \\in \\mathcal{B}(v) } \\delta(f(y_u) = f(y_v))\\geq0\\]\nwe can derive that\n\\[\nh^{\\prime} \\geq h\n\\]\nTherefore, if a graph $\\mathcal{G}$ is homophilic w.r.t. $\\mathcal{Y}$, it is also homophilic w.r.t. to $\\mathcal{B}$.\n\\end{proof}\n\n"
            },
            "section 8": {
                "name": "Joint Classification",
                "content": "\n\\label{sec:joint}\nThe joint classification includes two stages: first, it classifies nodes to be inliers or outliers according to the OOD scores predicted by the model; then, it assigns in-distribution labels for nodes tagged as ID using their output distributions. An illustration is shown in Figure \\ref{fig:joint_clf}. Since the first stage is a binary classification task, the value of weighted-F1 is dependent on the threshold chosen. In the experiments, we report the best F1 value under all possible thresholds.\n\n\n\n\n"
            },
            "section 9": {
                "name": "Dataset Statistics",
                "content": "\n\\label{sec:dataset}\nStatistics for datasets used in the main experiments are listed in Table \\ref{tab:dataset}.\n\n\n\\noindent Experimental setup for main datasets is shown in Table \\ref{tab:dataset_setup}.\n\n\n\\noindent Statistics for citation datasets are listed in Table \\ref{tab:citation_dataset}.\n\n\n\\noindent Experimental setup for citation datasets is shown in Table \\ref{tab:citation_setup}.\n\n\n\n"
            },
            "section 10": {
                "name": "Experiment Details",
                "content": "\n\\label{sec:exp}\nThe results from Table \\ref{tab:performance} are obtained with the following hyperparameter configurations:\n\n\nThe results from Table \\ref{tab:performance_3} are obtained with hyperparameters in Table \\ref{tab:hyper_citation}.\n\n\n\n\n"
            },
            "section 11": {
                "name": "Influence of Hyperparameters",
                "content": "\n\\label{sec:hyper}\nThe training of OODGAT involves four hyperparameters: $\\beta$, $\\gamma$, $\\zeta$ and $\\epsilon$. The former three are the balance parameters of regularizers, while the last is the threshold to determine the set of nodes for which the model encourages uniform distribution. Due to the space limitation, we only present the effect of hyperparameters on AmazonComputers, while similar trends are observed on other datasets. From Figure \\ref{fig:sensitivity_a}, we observe that consistency loss is the key to the success of OOD detection. In Figure \\ref{fig:sensitivity_b}, the performance is slightly improved when the weight of discrepancy loss reaches around 5e-3. The results in Figure \\ref{fig:sensitivity_c} show that while the addition of entropy regularizer can improve detection, it also leads to a decrease in the performance of in-distribution classification. However, by choosing an appropriate trade-off parameter, OODGAT can achieve better detection capability without having too much impact on the classification, thereby improve the overall performance. The effect of the threshold $\\epsilon$ is shown in Figure \\ref{fig:sensitivity_d}. When the threshold is 0, the entropy loss simply forces all nodes to behave like outliers by increasing the uncertainty of predictions, regardless of their true identity. When moving the threshold to an appropriate range, OODGAT manages to reduce the confidence level of outliers only while leaving the in-distribution data unaffected, resulting in the highest overall performance. \n\n\n\n\n"
            },
            "section 12": {
                "name": "Visualization",
                "content": "\n\\label{sec:visual}\nWe present some visualizations about GCN and OODGAT in Figure \\ref{fig:visualize}. \n\n\n\n"
            }
        },
        "tables": {
            "tab:edge_removal": "\\begin{table}\n  \\caption{Effect of Inter-Edge Removal}\n  \\label{tab:edge_removal}\n  \\begin{tabular}{c|cccc}\n    \\toprule\n    Dataset & Remove=0 & Remove=0.5 & Remove=1.0\\\\\n    \\midrule\n    Cora & 92.0 & 92.5 & \\bftab 92.7\\\\\n    CoauthorCS & 92.8 & 92.6 & \\bftab 93.0\\\\\n    Amazon-Photo & 97.0 & 97.0 & \\bftab 97.2\\\\\n    Amazon-Computers & 81.2 & 81.5 & \\bftab 83.2\\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}",
            "tab:performance": "\\begin{table*}\n  \\caption{Comparison with End-to-end Methods}\n  \\label{tab:performance}\n  \\resizebox{\\textwidth}{!}{%\n  \\begin{tabular}{ccccccc}\n    \\toprule\n    & Cora & AmazonCS & AmazonPhoto & CoauthorCS & LastFMAsia & Wiki-CS\\\\\n    \\midrule\n    & \\multicolumn{6}{c}{\\textcolor{blue}{Acc} $\\uparrow$ \\hspace{1mm}/ \\textcolor{orange}{AUROC} $\\uparrow$\\hspace{1mm}/ \\textcolor{olive}{FPR@95} $\\downarrow$\\hspace{1mm}/ \\textcolor{teal}{F1} $\\uparrow$}\\\\\n    \\hline\n    MLP & 74.1/72.4/75.5/63.1 &\n    68.4/65.7/84.6/54.6 &\n    91.8/80.2/71.9/72.8 &\n    88.6/95.0/28.9/84.8 &\n    54.5/57.4/87.0/51.2 &\n    78.6/71.7/76.4/64.0\\\\\n    GCN \\cite{kipf2016semi} & 92.1/88.9/46.0/80.5 &\n    81.2/83.3/61.9/70.3 &\n    97.1/88.3/44.6/80.7 &\n    \\textcolor{blue}{\\textbf{92.7}}/94.5/32.2/86.4 &\n    79.8/72.1/74.7/66.5 & \n    80.9/71.7/76.6/63.0\\\\\n    SAGE \\cite{sage2017} & 90.8/87.7/46.6/79.2 &\n    83.2/84.6/54.9/71.7 &\n    97.1/93.5/32.0/87.2 &\n    92.6/97.0/16.8/89.1 &\n    79.3/73.7/68.9/67.0 &\n    78.6/73.0/65.3/66.2\\\\\n    GAT \\cite{gat} & 91.6/90.1/40.8/81.5 &\n    82.3/88.5/42.9/76.5 &\n    96.9/92.5/31.7/86.1 &\n    92.0/96.6/16.7/89.0 &\n    82.3/81.1/49.6/75.0 &\n    79.9/79.8/63.6/70.0\\\\\n    GATv2 \\cite{gatv2} & 91.5/90.4/40.0/81.9 &\n    83.5/88.6/45.7/76.3 & \n    95.7/94.4/21.1/88.4 &\n    91.7/96.6/19.1/88.7 &\n    81.9/79.7/52.3/73.5 &\n    \\textcolor{blue}{\\textbf{81.4}}/80.9/58.9/70.6\\\\\n    \\hline\n    OODGAT-ENT & \n    \\textcolor{blue}{\\textbf{92.3}}/92.9/31.4/84.4 & \n    \\textcolor{blue}{\\textbf{86.6}}/92.2/\\textcolor{olive}{\\textbf{40.4}}/81.4 & \n    \\textcolor{blue}{\\textbf{97.6}}/98.2/8.1/93.4 & \n    92.4/98.9/3.7/92.6 &  \n    \\textcolor{blue}{\\textbf{83.3}}/\\textcolor{orange}{\\textbf{93.4}} /\\textcolor{olive}{\\textbf{22.4}}/\\textcolor{teal}{\\textbf{83.5}} & \n    \\textcolor{blue}{\\textbf{81.4}}/\\textcolor{orange}{\\textbf{88.8}}/\\textcolor{olive}{\\textbf{48.5}} /\\textcolor{teal}{\\textbf{76.6}}\\\\\n    OODGAT-ATT & \n    \\textcolor{blue}{\\textbf{92.3}}/\\textcolor{orange}{\\textbf{93.6}}/\\textcolor{olive}{\\textbf{26.1}} /\\textcolor{teal}{\\textbf{85.1}} &\n    \\textcolor{blue}{\\textbf{86.6}}/\\textcolor{orange}{\\textbf{93.1}}/45.2/\\textcolor{teal}{\\textbf{82.2}} &\n    \\textcolor{blue}{\\textbf{97.6}}/\\textcolor{orange}{\\textbf{98.3}}/\\textcolor{olive}{\\textbf{5.8}} /\\textcolor{teal}{\\textbf{93.9}} &\n    92.4/\\textcolor{orange}{\\textbf{99.6}}/\\textcolor{olive}{\\textbf{1.6}} /\\textcolor{teal}{\\textbf{93.5}} &\n    \\textcolor{blue}{\\textbf{83.3}}/91.9/27.7/81.0 & \n    \\textcolor{blue}{\\textbf{81.4}}/88.3/51.2/73.7\\\\\n    \\bottomrule\n  \\end{tabular}}\n\\end{table*}",
            "tab:performance_3": "\\begin{table}\n  \\caption{Comparison with GKDE}\n  \\label{tab:performance_3}\n  \\begin{tabular}{l|cc|cc}\n    \\toprule\n    \\multirow{2}*{Dataset} & \\multicolumn{2}{c|}{AUROC} & \\multicolumn{2}{c}{AUPR} \\\\\n    & GKDE & OODGAT & GKDE & OODGAT\\\\\n    \\midrule\n    Cora & 87.6 & \\bftab 91.4 & 78.4 & \\bftab 82.9\\\\\n    Citeseer & 84.8 & \\bftab 87.7 & 86.8 & \\bftab 89.0\\\\\n    Pubmed & 74.6 & \\bftab 81.1 & 69.6 & \\bftab 76.0\\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}",
            "tab:dataset": "\\begin{table}[H]\n  \\caption{Statistics for Main Datasets}\n  \\label{tab:dataset}\n  \\begin{tabular}{ccccc}\n    \\toprule\n    Dataset & \\#Nodes & \\#Edges & \\#Features & \\#Classes\\\\\n    \\midrule\n    Cora & 2708 & 10556 & 1433 & 7 \\\\\n    Amazon-Computer & 13752 & 491722 & 767 & 10 \\\\\n    Amazon-Photo & 7650 & 238162 & 745 & 8 \\\\\n    Coauthor-CS & 18333 & 163788 & 6805 & 15 \\\\\n    LastFMAsia & 7624 & 55612 & 128 & 18  \\\\\n    Wiki-CS & 11701 & 297110 & 300 & 10 \\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}",
            "tab:dataset_setup": "\\begin{table}[H]\n  \\caption{Experimental Setup for Main Datasets}\n  \\label{tab:dataset_setup}\n  \\begin{tabular}{ccc}\n    \\toprule\n    Dataset & OOD class & OOD ratio \\\\\n    \\midrule\n    Cora & $[0, 1, 3]$ & 0.51 \\\\\n    Amazon-Computer & $[0, 3, 4, 5, 9]$  & 0.49 \\\\\n    Amazon-Photo & $[1, 6, 7]$ & 0.52 \\\\\n    Coauthor-CS & $[0, 1, 2, 3, 4, 9, 13]$ & 0.51 \\\\\n    LastFMAsia & $[1, 2, 3, 4, 5, 9, 10, 12, 17]$ & 0.53 \\\\\n    Wiki-CS & $[0, 2, 4, 5]$ & 0.50 \\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}",
            "tab:citation_dataset": "\\begin{table}[H]\n  \\caption{Statistics for Citation Datasets}\n  \\label{tab:citation_dataset}\n  \\begin{tabular}{ccccc}\n    \\toprule\n    Dataset & \\#Nodes & \\#Edges & \\#Features & \\#Classes\\\\\n    \\midrule\n    Cora & 2708 & 10556 & 1433 & 7 \\\\\n    Citeseer & 3327 & 9104 & 3703 & 6\\\\\n    Pubmed & 19717 & 88648 & 500 & 3\\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}",
            "tab:citation_setup": "\\begin{table}[H]\n  \\caption{Experimental Setup  for Citation Datasets}\n  \\label{tab:citation_setup}\n  \\begin{tabular}{ccc}\n    \\toprule\n    Dataset & OOD classes & OOD ratio\\\\\n    \\midrule\n    Cora & $[0, 1, 2, 3]$ & 0.38\\\\\n    Citeseer & $[0, 1, 2]$ & 0.55 \\\\\n    Pubmed & $[0, 1]$ & 0.40 \\\\\n    \\bottomrule\n  \\end{tabular}\n\\end{table}",
            "tab:parameter": "\\begin{table}[H]\n  \\caption{Hyperparameter Configurations of Main Results}\n  \\label{tab:parameter}\n  \\resizebox{\\linewidth}{!}{%\n  \\begin{tabular}{cccccccc}\n    \\toprule\n    Data & lr & dropout & $\\beta$ & $\\gamma$ & $\\zeta$ & $\\epsilon$ & heads\\\\\n    \\midrule\n    Cora & 0.01 & 0.5 & 2 & 0.05 & 0.005 & 0.6 & 4\\\\\n    Amazon-Computer & 0.01 & 0.5 & 2 & 0.05 & 0.005 & 0.4 & 4\\\\\n    Amazon-Photo & 0.01 & 0.5 &3 & 0.1 & 0.005 & 0.4 & 4\\\\\n    Coauthor-CS & 0.01 & 0.5 & 4 & 0.05 & 0.005 & 0.6 & 4\\\\\n    LastFMAsia & 0.01 & 0.5 & 3 & 0.3 & 0.005 & 0.5 & 1\\\\\n    Wiki-CS & 0.01 & 0.5 & 3 & 0.2 & 0.005 & 0.5 & 4\\\\\n    \\bottomrule\n  \\end{tabular}}\n\\end{table}",
            "tab:hyper_citation": "\\begin{table}[H]\n  \\caption{Hyperparameter Configurations of Citation Datasets}\n  \\label{tab:hyper_citation}\n  \\resizebox{\\linewidth}{!}{%\n  \\begin{tabular}{cccccccc}\n    \\toprule\n    Data & lr & dropout & $\\beta$ & $\\gamma$ & $\\zeta$ & $\\epsilon$ & heads\\\\\n    \\midrule\n    Cora & 0.01 & 0.5 & 1 & 0.01 & 0.005 & 0.5 & 4\\\\\n    Citeseer & 0.01 & 0.5 & 2 & 0.01 & 0.005 & 0.5 & 4\\\\\n    Pubmed & 0.01 & 0.5 & 1 & 0.1 & 0.005 & 0.4 & 4\\\\\n    \\bottomrule\n  \\end{tabular}}\n\\end{table}"
        },
        "figures": {
            "fig:illustration": "\\begin{figure}\n    \\centering\n    \\includegraphics[scale=0.40]{imgs/illustration_crop.pdf}\n    \\caption{An illustration of graph learning with out-of-distribution nodes. In this setting, we aim to accomplish two tasks: 1) separate ID nodes from OOD nodes and 2) classify ID nodes correctly. Colors of nodes indicate their labels, and the shaded areas represent a possible set of  decision boundaries. Note that the connections exist not only within ID nodes, but also within OOD nodes, and in between. Unlike traditional anomaly detection which assumes a small percentage of anomalies, in the graph domain, the OOD part may contain nodes that are comparable in size to the ID part.}\n    \\label{fig:illustration}\n\\end{figure}",
            "fig:smooth": "\\begin{figure}\n\\centering\n    \\begin{subfigure}{\\linewidth}\n        \\centerline{\\includegraphics[width=\\linewidth, scale=0.5]{imgs/smooth_effect_legend_crop.pdf}}\n    \\end{subfigure}\n    \n    \\begin{subfigure}[b]{0.35\\linewidth}  \n        \\centerline{\\includegraphics[scale=0.50]{imgs/smooth_a_crop.pdf}}\n        \\caption{Before smoothing}\n    \\end{subfigure}\n    \\hfill\n    \\begin{subfigure}[b]{0.35\\linewidth}  \n        \\centerline{\\includegraphics[scale=0.50]{imgs/smooth_b_crop.pdf}}\n        \\caption{After smoothing}\n        \\label{fig: smooth_b}\n    \\end{subfigure}\n    \\setlength{\\belowcaptionskip}{-12pt}\n    \\caption{Smoothness helps OOD detection. The border of circles represents the true identity of nodes, while the darkness of the inner color represents the predicted OOD score. Arrows indicate the smoothing effect of GNNs.}\n    \\label{fig:smooth}\n    \\Description{}\n\\end{figure}",
            "fig:oodgat": "\\begin{figure}\n     \\centering\n     \\includegraphics[scale=0.40]{imgs/OODGAT-ATT.pdf}\n     \\caption{Attention computation of OODGAT. $c$ and $c^\\prime$ indicate central nodes, while $u$ and $v$ are their neighbors. Arrows indicates the direction of feature propagation. OODGAT first computes the node-level OOD scores, and then converts the scores into edge-level attention weights for feature propagation. }\n     \\label{fig:oodgat}\n \\end{figure}",
            "fig:architecture": "\\begin{figure}\n    \\centering\n    \\includegraphics[scale=0.37]{imgs/architecture_5_crop.pdf}\n    \\caption{Architecture of OODGAT. \n    Arrows of different colors indicate different information to be extracted from the layer for loss computation. Yellow and grey rectangles represent layers w/ and w/o gradients propagation, respectively.}\n    \\label{fig:architecture}\n\\end{figure}",
            "fig:space": "\\begin{figure}\n\\centering\n    \\begin{subfigure}{\\linewidth}\n        \\centering\n        \\includegraphics[scale=0.35]{imgs/latent_space_legend_crop.pdf}\n    \\end{subfigure}\n    \n    \\begin{subfigure}[b]{0.45\\linewidth}  \n        \\centering\n        \\includegraphics[scale=0.2]{imgs/latent_space_a.pdf}\n        \\caption{Ordinary GNNs}\n    \\end{subfigure}\n    \\hfill\n    \\begin{subfigure}[b]{0.45\\linewidth}  \n        \\centering\n        \\includegraphics[scale=0.2]{imgs/latent_space_b_2.pdf}\n        \\caption{OODGAT}\n    \\end{subfigure}\n    \\caption{Illustration of the latent space of ordinary GNNs and OODGAT. The proposed regularizers can help the attention module to control the information flow between ID and OOD nodes, hence OODGAT is able to produce a clearer gap between inliers and outliers.}\n    \\label{fig:space}\n    \\Description{Entropy propagates from training nodes to the rest of the graph.}\n\\end{figure}",
            "fig:joint_clf": "\\begin{figure}[H]\n    \\centering\n    \\includegraphics[scale=0.5]{imgs/joint_classification_crop.pdf}\n    \\caption{Illustration of joint classification. First row represents the predicted OOD scores, where t is the threshold. Second row represents the predicted labels (3 classes in this case). Combining the two rows, we derive the final result of joint classification (3+1 classes in this case).}\n    \\label{fig:joint_clf}\n\\end{figure}",
            "fig:visualize": "\\begin{figure}[b]\n\\centering\n    \\begin{subfigure}[b]{0.45\\linewidth}\n        \\includegraphics[width=\\linewidth]{imgs/Cora_tsne_gcn.pdf}\n        \\caption{GCN}\n    \\end{subfigure}\n    \\hfill\n    \\begin{subfigure}[b]{0.45\\linewidth}\n        \\includegraphics[width=\\linewidth]{imgs/Cora_tsne_oodgat_2.pdf}\n        \\caption{OODGAT}\n    \\end{subfigure}\n\n    \\begin{subfigure}[b]{0.45\\linewidth}\n            \\includegraphics[width=\\linewidth]{imgs/Cora_hist_gcn.pdf}\n            \\caption{GCN}\n    \\end{subfigure}\n    \\hfill\n    \\begin{subfigure}[b]{0.45\\linewidth}\n            \\includegraphics[width=\\linewidth]{imgs/Cora_hist_oodgat.pdf}\n            \\caption{OODGAT}\n    \\end{subfigure}\n    \n    \\begin{subfigure}[b]{0.45\\linewidth}\n        \\includegraphics[width=\\linewidth]{imgs/Cora_ent_gcn.pdf}\n        \\caption{GCN}\n    \\end{subfigure}\n    \\hfill\n    \\begin{subfigure}[b]{0.45\\linewidth}\n        \\includegraphics[width=\\linewidth]{imgs/Cora_ent_oodgat.pdf}\n        \\caption{OODGAT}\n    \\end{subfigure}\n    \\caption{Visualization of GCN and OODGAT. Experiments done on Cora. (a) and (b): t-SNE plot of the latent space, (c) and (d): distribution of nodes' predictive uncertainties, (e) and (f): training dynamics of the mean entropy of inliers and outliers. In (a) and (b), OODGAT shows a clearer boundary between ID and OOD classes. In (c) and (d), OODGAT produces scores with less overlap between ID and OOD. In (e) and (f), OODGAT maintains a larger gap between the entropy of inliers and outliers throughout the training phase.}\n    \\label{fig:visualize}\n\\end{figure}"
        },
        "equations": {
            "eq:1": "\\begin{equation}\n    \\mathbf{h}_i^{\\prime}=\\sigma\\left(\\sum_{j\\in \\mathcal{N}(i) \\cup \\{v_i\\}} {\\alpha_{ij} \\mathbf{W} \\mathbf{h}_j} \\right)\n\\end{equation}",
            "eq:2": "\\begin{equation}\n    e_{ij}=1-\\left|w(i)-w(j)\\right|\n    \\label{equ:unormalized}\n\\end{equation}",
            "eq:3": "\\begin{equation}\n     \\alpha_{ij} = softmax_j (e_{ij}) = \\frac{exp(e_{ij})}{\\sum_{k\\in\\mathcal{N}(i)\\cup\\{v_i\\}} exp(e_{ik})}\n \\end{equation}",
            "eq:4": "\\begin{equation}\n     \\mathbf{h}_i^{\\prime} = \\bigparallel_{k=1}^K \\sigma \\left(\\sum_{j \\in \\mathcal{N}(i) \\cup \\{v_i\\}} \\alpha_{ij}^k \\mathbf{W}^k \\mathbf{h}_j\\right)\n \\end{equation}",
            "eq:5": "\\begin{equation}\n     \\mathbf{z}_i =  softmax \\left(\\frac{1}{K} \\sum_{k=1}^K \\sum_{j \\in \\mathcal{N}(i) \\cup \\{v_i\\}} \\alpha_{ij}^k \\mathbf{W}^k \\mathbf{h}_j\\right)\n \\end{equation}",
            "eq:6": "\\begin{equation}\n    \\mathcal{L}_{con} =-\\cos\\left(\\mathbf{w},\\mathbf{e}\\right)\n    \\label{eq:consistency}\n\\end{equation}",
            "eq:7": "\\begin{equation}\n\\begin{aligned}\n    \\mathbf{w} = [w_1, w_2, & \\cdots, w_{|\\mathcal{V}|}]^\\top\\\\\n    w_i = \\sigma &(\\mathbf{a}^\\top \\mathbf{Wh}_i)\\\\\n\\end{aligned}\n\\end{equation}",
            "eq:8": "\\begin{equation}\n\\begin{aligned}\n    \\mathbf{e} = [\\sigma(\\tilde{e_1}), \\sigma(&\\tilde{e_2}), \\cdots, \\sigma(\\tilde{e_{|\\mathcal{V}|})}]^\\top\\\\\n    \\tilde{e_i} = &\\frac{e_i-\\mu_e}{\\sigma_e}\\\\\n    e_i = H(\\mathbf{z}_i) =& - \\sum_{j=1}^{|\\mathcal{Y}_l|} z_{ij}log(z_{ij})\n\\end{aligned}\n\\end{equation}",
            "eq:9": "\\begin{equation}\n\\begin{aligned}\n    \\mathcal{L}_{con} & = -\\frac{1}{2} \\times \\left(\\cos(\\mathbf{w}^1,\\mathbf{e}) + \\cos(\\mathbf{w}^2,\\mathbf{e})\\right)\\\\\n    \\mathbf{w^l} = \\biggl[\\frac{1}{K}&\\sum_{k=1}^{K} w_1^{lk}, \\frac{1}{K}\\sum_{k=1}^{K} w_2^{lk}, \\cdots, \\frac{1}{K}\\sum_{k=1}^{K} w_{|\\mathcal{V}|}^{lk} \\biggr]^\\top\n\\end{aligned}\n\\end{equation}",
            "eq:10": "\\begin{equation}\n     \\mathcal{L}_{ent}=\\frac{\\sum_{i=1}^{\\left|\\mathcal{V}\\right|}CE\\left(\\mathbf{u},\\mathbf{z}_i\\right)\\delta\\bigl(w(i)>\\epsilon\\bigr)}{\\sum_{i=1}^{\\left|\\mathcal{V}\\right|}\\delta\\bigl(w(i)>\\epsilon\\bigr)}\n \\end{equation}",
            "eq:11": "\\begin{equation}\n     \\mathcal{L}_{dis}=-\\cos\\left(\\mathbf{w}^1,\\mathbf{w}^2\\right)\n \\end{equation}",
            "eq:12": "\\begin{equation}\n\\begin{aligned}\n        \\mathcal{L}_{OODGAT} &=- \\frac{1}{|\\mathcal{V}_l|} \\sum_{i=1}^{|\\mathcal{V}_l|} log(z_{iy_i})  \\\\\n        & +a^{b\\times t}(\\beta \\mathcal{L}_{con}\n        + \\gamma \\mathcal{L}_{ent}\n        + \\zeta \\mathcal{L}_{dis})\n\\end{aligned}\n\\end{equation}"
        },
        "git_link": "https://github.com/SongYYYY/KDD22-OODGAT"
    }
}