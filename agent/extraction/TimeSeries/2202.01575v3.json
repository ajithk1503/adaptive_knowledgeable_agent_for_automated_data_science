{
    "meta_info": {
        "title": "CoST: Contrastive Learning of Disentangled Seasonal-Trend  Representations for Time Series Forecasting",
        "abstract": "Deep learning has been actively studied for time series forecasting, and the\nmainstream paradigm is based on the end-to-end training of neural network\narchitectures, ranging from classical LSTM/RNNs to more recent TCNs and\nTransformers. Motivated by the recent success of representation learning in\ncomputer vision and natural language processing, we argue that a more promising\nparadigm for time series forecasting, is to first learn disentangled feature\nrepresentations, followed by a simple regression fine-tuning step -- we justify\nsuch a paradigm from a causal perspective. Following this principle, we propose\na new time series representation learning framework for time series forecasting\nnamed CoST, which applies contrastive learning methods to learn disentangled\nseasonal-trend representations. CoST comprises both time domain and frequency\ndomain contrastive losses to learn discriminative trend and seasonal\nrepresentations, respectively. Extensive experiments on real-world datasets\nshow that CoST consistently outperforms the state-of-the-art methods by a\nconsiderable margin, achieving a 21.3% improvement in MSE on multivariate\nbenchmarks. It is also robust to various choices of backbone encoders, as well\nas downstream regressors. Code is available at\nhttps://github.com/salesforce/CoST.",
        "author": "Gerald Woo, Chenghao Liu, Doyen Sahoo, Akshat Kumar, Steven Hoi",
        "link": "http://arxiv.org/abs/2202.01575v3",
        "category": [
            "cs.LG"
        ],
        "additionl_info": ""
    },
    "latex_extraction": {
        "content": {
            "section 1": {
                "name": "Introduction",
                "content": "\n\\label{sec:intro}\n\n\nTime series forecasting has been widely applied to various domains, such as electricity pricing \\citep{cuaresma2004forecasting}, demand forecasting \\citep{carbonneau2008application}, capacity planning and management \\citep{kim2003financial}, and anomaly detection \\citep{laptev2017time}. Recently, there has been a surge of efforts applying deep learning for forecasting \\citep{wen2017multi, bai2018empirical, zhou2021informer}, and owing to the increase in data availability and computational resources, these approaches have offered promising performance over conventional methods in forecasting literature. Compared to conventional approaches, these methods are able to jointly learn feature representations and the prediction function (or forecasting function) by stacking a series of non-linear layers to perform feature extraction, followed by a regression layer focused on forecasting.\n\nHowever, jointly learning these layers end-to-end from observed data may lead to the model over-fitting and capturing spurious correlations of the unpredictable noise contained in the observed data. The situation is exacerbated when the learned representations are entangled -- when a single dimension of the feature representation encodes information from multiple local independent modules of the data-generating process -- and a local independent module experiences a distribution shift.\nFigure~\\ref{fig:time-series-decomposition} is an example of such a case, where the observed time series is generated by a seasonal module and nonlinear trend module. If we know that the seasonal module has experienced a distribution shift, we could still makes a reasonable prediction based on the invariant trend module. However, if we learn an entangled feature representation from the observed data, it would be challenging for the learned model to handle this distribution shift, even if it only happens in a local component of the data-generating process. In summary, the learned representations and prediction associations from the end-to-end training approach are unable to transfer nor generalize well when the data is generated from a non-stationary environment, a very common scenario in the time series analysis. Therefore, in this work, we take a step back and aim to learn disentangled seasonal-trend representations which are more useful for time series forecasting.\n\nTo achieve this goal, we leverage the idea of structural time series models \\citep{scott20154,qiu2018multivariate}, which formulates time series as a sum of trend, seasonal and error variables, and exploit such prior knowledge to learn time series representations. First, we present the necessity of learning disentangled seasonal-trend representations through a causal lens, and demonstrate that such representations are robust to interventions on the error variable. Then, \ninspired by \\citet{mitrovic2020representation}, we propose to simulate interventions on the error variable via data augmentations and learn the disentangled seasonal-trend representations via contrastive learning.\n\nBased on the above motivations, we propose a novel contrastive learning framework to learn disentangled seasonal-trend representations for the Long Sequence Time-series Forecasting (LSTF) task \\citep{zhou2021informer}. Specifically, CoST leverages inductive biases in the model architecture to learn disentangled seasonal-trend representations. \nCoST efficiently learns trend representations, mitigating the problem of lookback window selection by introducing a mixture of auto-regressive experts. It also learns more powerful seasonal representations by leveraging a learnable Fourier layer which enables intra-frequency interactions.\nBoth trend and seasonal representations are learned via contrastive loss functions. The trend representations are learned in the time domain, whereas the seasonal representations are learned via a novel frequency domain contrastive loss which encourages discriminative seasonal representations and side steps the issue of determining the period of seasonal patterns present in the data.\nThe contributions of our work are as follows:\n\\begin{enumerate}\n    \\item We show via a causal perspective, the benefits of learning disentangled seasonal-trend representations for time series forecasting via contrastive learning.\n    \\item We propose CoST, a time series representation learning approach which leverages inductive biases in the model architecture to learn disentangled seasonal and trend representations, as well as incorporating a novel frequency domain contrastive loss to encourage discriminative seasonal representations.\n    \\item CoST outperforms existing state-of-the-art approaches by a considerable margin on real-world benchmarks -- 21.3\\% improvement in MSE for the multivariate setting. We also analyze the benefits of each proposed module, and establish that CoST is robust to various choices of backbone encoders and downstream regressors via extensive ablation studies.\n\\end{enumerate}\n\n"
            },
            "section 2": {
                "name": "Seasonal-Trend Representations for Time Series",
                "content": "\n\n\n\\paragraph{Problem Formulation}  Let \\((\\vx_1, \\ldots \\vx_T) \\in \\R^{T \\times m}\\) be a time series, where \\(m\\) is the dimension of observed signals. Given lookback window $h$, our goal is to forecast the next $k$ steps, \\(\\hat\\mX = g(\\mX)\\), where $\\mX\\in\\R^{h \\times m}, \\hat\\mX\\in\\R^{k \\times m}$, and $g(\\cdot)$ denotes the prediction mapping function, and \\(\\hat\\mX\\) predicts the next \\(k\\) time steps of \\(\\mX\\).\n\nIn this work, instead of jointly learning the representation and prediction association through $g(\\cdot)$, we focus on learning feature representations from observed data, with the goal of improving predictive performance. Formally, we aim to learn a nonlinear feature embedding function $\\mV = f(\\mX)$, where $\\mX \\in \\R^{h\\times m}$ and $\\mV \\in \\R^{h \\times d}$, to project $m$-dimensional raw signals into a $d$-dimensional latent space for each timestamp. Subsequently, the learned representation of the final timestamp \\(\\vv_{h}\\) is used as inputs for the downstream regressor of the forecasting task.\n\n\n\\paragraph{Disentangled Seasonal-Trend Representation Learning and Its Causal Interpretation}  As discussed in \\citet{bengio2013representation}, complex data arise from the rich interaction of multiple sources -- a good representation should be able to disentangle the various explanatory sources, making it robust to complex and richly structured variations. Not doing so may otherwise lead to capturing spurious features that do not transfer well under non i.i.d. data distribution settings.\n\nTo achieve this goal, it is necessary to introduce structural priors for time series. Here, we borrow ideas from Bayesian Structural Time Series models \\citep{scott20154,qiu2018multivariate}. As illustrated in the causal graph in Figure~\\ref{fig:data-generating-process}, we assume that the observed time series data $X$ is generated from the error variable $E$ and the error-free latent variable $X^\\star$. $X^\\star$ in turn, is generated from the trend variable $T$ and seasonal variable $S$. As $E$ is not predictable, the optimal prediction can be achieved if we are able to uncover $X^\\star$ which only depends on $T$ and $S$.\n\nFirstly, we highlight that existing work using end-to-end deep forecasting methods to directly model the time-lagged relationship and the multivariate interactions along the observed data $X$. Unfortunately, each $X$ includes unpredictable noise $E$, which might lead to capturing spurious correlations. Thus, we aim to learn the error-free latent variable $X^\\star$.\n\nSecondly, by the independent mechanisms assumption \\citep{peters2017elements, parascandolo2018learning}, we can see that the seasonal and trend modules do not influence or inform each other. Therefore, even if one mechanism changes due to a distribution shift, the other remains unchanged. The design of disentangling seasonality and trend leads to better transfer, or generalization in non-stationary environments. Furthermore, independent seasonal and trend mechanisms can be learned independently and be flexibly re-used and re-purposed.\n\nWe can see that interventions on $E$ does not influence the conditional distribution $P(X^\\star|T, S)$, i.e. \\(P^{do(E=e_i)}(X^\\star|T, S) = P^{do(E=e_j)}(X^\\star|T, S)\\), for any $e_i, e_j$ in the domain of $E$. Thus, $S$ and $T$ are invariant under changes in $E$. Learning representations for $S$ and $T$ allows us to find a stable association with the optimal prediction (of \\(X^\\star\\)) in terms of various types of errors. Since the targets $X^\\star$ are unknown, we construct a proxy contrastive learning task inspired by \\citet{mitrovic2020representation}. Specifically,  we use data augmentations as interventions on the error $E$ and learn invariant representations of $T$ and $S$ via contrastive learning. Since it is impossible to generate all possible variations of errors, we select three typical augmentations: scale, shift and jitter, which can simulate a large and diverse set of errors, beneficial for learning better representations. \n\n"
            },
            "section 3": {
                "name": "Seasonal-Trend Contrastive Learning Framework",
                "content": "\n\\label{sec:method}\n\n\nIn this section, we introduce our proposed CoST framework to learn disentangled seasonal-trend representations.\nWe aim to learn representations such that for each time step, we have the disentangled representations for seasonal and trend components,  i.e., \\(\\mV = [\\mV^{(T)}; \\mV^{(S)}] \\in \\R^{h \\times d}\\), where  \\(\\mV^{(T)} \\in \\R^{h \\times d_T}\\) and \\(\\mV^{(S)} \\in \\R^{h \\times d_S}\\), such that \\(d = d_T + d_S\\).\n\nFigure~\\ref{fig:proposed-method}a illustrates our overall framework. Firstly, we make use of an encoder backbone \\(f_b: \\R^{h \\times m} \\to \\R^{h \\times d}\\) to map the observations to latent space. \nNext, we construct both the trend and seasonal representations from these intermediate representations. Specifically, the Trend Feature Disentangler (TFD), \\(f_T: \\R^{h \\times d} \\to \\R^{h \\times d_T}\\), extracts the trend representations via a mixture of auto-regressive experts and is learned via a time domain contrastive loss \\(\\mathcal{L}_{\\mathrm{time}}\\).\nThe Seasonal Feature Disentangler (SFD), \\(f_S: \\R^{h \\times d} \\to \\R^{h \\times d_S}\\), extracts the seasonal representations via a learnable Fourier layer and is learned by a frequency domain contrastive loss which includes an amplitude component, \\(\\mathcal{L}_{\\mathrm{amp}}\\), and a phase component, \\(\\mathcal{L}_{\\mathrm{phase}}\\). We give a detailed description of both components in the next section. \nThe model is learned in an end-to-end fashion, with the overall loss function being\n\\vspace{-0.075in}\n\\[\\mathcal{L} = \\mathcal{L}_{\\mathrm{time}} + \\frac{\\alpha}{2} (\\mathcal{L}_{\\mathrm{amp}} + \\mathcal{L}_{\\mathrm{phase}}), \\]\nwhere \\(\\alpha\\) is a hyper-parameter which balances the trade-off between trend and seasonal factors. \nFinally, we concatenate the outputs of the Trend and Seasonal Feature Disentanglers to obtain our final output representations.\n\n",
                "subsection 3.1": {
                    "name": "Trend Feature Representations",
                    "content": "\nExtracting the underlying trend is crucial for modeling time series. Auto-regressive filtering is one widely used method, as it is able to capture time-lagged causal relationships from past observations. One challenging problem is to select the appropriate lookback window -- a smaller window leads to under-fitting, while a larger model leads to over-fitting and over-parameterization issues. A straightforward solution is to optimize this  hyper-parameter by grid search  on the training or validation loss \\citep{hyndman2008automatic}, but such an approach is too computationally expensive.  Thus, we propose to use a mixture of auto-regressive experts which can adaptively select the appropriate lookback window.\n\n\\textbf{Trend Feature Disentangler (TFD)}\nAs illustrated in Figure~\\ref{fig:proposed-method}b, the TFD is a mixture of $L+1$ auto-regressive experts, where \\(L = \\lfloor log_2(h/2) \\rfloor\\). Each expert is implemented as a \\(1d\\) causal convolution with \\(d\\) input channels and \\(d_T\\) output channels, where the kernel size of the $i$-th expert is $2^i$. Each expert outputs a matrix \\(\\displaystyle \\tilde{\\mV}^{(T, i)} = \\mathrm{CausalConv}(\\tilde{\\mV}, 2^i)\\).\nFinally, an average-pooling operation is performed over the outputs to obtain the final trend representations,\n\\vspace{-0.075in}\n\\begin{align*}\n    \\mV^{(T)} & = \\mathrm{AvePool}(\\tilde{\\mV}^{(T,0)}, \\tilde{\\mV}^{(T,1)}, \\ldots, \\tilde{\\mV}^{(T,L)}) \n    = \\frac{1}{(L+1)} \\sum_{i=0}^L \\tilde{\\mV}^{(T,i)}.\n\\end{align*}\n\n\\textbf{Time Domain Contrastive Loss}\nWe employ a contrastive loss in the time domain to learn discriminative trend representations. Specifically, we apply the MoCo \\citep{he2020momentum} variant of contrastive learning which makes use of a momentum encoder to obtain representations of the positive pair, and a dynamic dictionary with a queue to obtain negative pairs. We elaborate further on the details of contrastive learning in Appendix~\\ref{app:contrastive}. Then, given \\(N\\) samples and \\(K\\) negative samples, the time domain contrastive loss is\n\\[\n\\mathcal{L}_{\\mathrm{time}} = \\sum_{i=1}^N -\\log \\frac{\\exp (\\vq_i \\cdot \\vk_i / \\tau)}{\\exp (\\vq_i \\cdot \\vk_i / \\tau) + \\sum_{j=1}^K \\exp (\\vq_i \\cdot \\vk_j / \\tau)},\n\\]\nwhere given a sample \\(\\mV^{(T)}\\), we first select a random time step \\(t\\) for the contrastive loss and apply a projection head, which is a one-layer MLP to obtain \\(\\vq \\), and \\(\\vk\\) is respectively the augmented version of the corresponding sample from the momentum encoder/dynamic dictionary. \n\n"
                },
                "subsection 3.2": {
                    "name": "Seasonal Feature Representations",
                    "content": "\nSpectral analysis in the frequency domain has been widely used in seasonality detection \\citep{shumway2000time}. \nThus, we turn to the frequency domain to handle the learning of seasonal representations.\nTo do so, we aim to address two issues:\ni) how can we support intra-frequency interactions (between feature dimensions) which allows the representations to encode periodic information more easily, and,\nii) what kind of learning signal is required to learn representations which are able to discriminate between different seasonality patterns?\nStandard backbone architectures are unable to easily capture intra-frequency level interactions, thus, we introduce the SFD which makes use of a learnable Fourier layer. \nThen, in order to learn these seasonal features without prior knowledge of the periodicity, a frequency domain contrastive loss is introduced for each frequency.\n\n\\textbf{Seasonal Feature Disentangler (SFD)}\nAs illustrated in Figure~\\ref{fig:proposed-method}c, the SFD is primarily composed of a discrete Fourier transform (DFT) to map the intermediate features to frequency domain, followed by a learnable Fourier layer. \nWe include further details and definitions of the DFT in Appendix~\\ref{app:dft}.\nThe DFT is applied along the temporal dimension and maps the time domain representations into the frequency domain, \\(\\mathcal{F}(\\tilde{\\mV}) \\in \\sC^{F \\times d}\\), where \\(F = \\lfloor h /2 \\rfloor +1\\) is the number of frequencies.\nNext, the learnable Fourier layer, which enables frequency domain interactions, is implemented via a per-element linear layer.\nIt applies an affine transform on each frequency, with a unique set of complex-valued parameters for each frequency, since we do not expect this layer to be translation invariant.\nFinally, we transform the representation back to time domain using an inverse DFT operation.\n\nThe final output matrix of this layer is the seasonal representation, \\(\\mV^{(S)} \\in \\sR^{h \\times d_S}\\). Formally, we can denote the  \\(i,k\\)-th element of the output as\n\\[ \\emV^{(S)}_{i,k} = \\mathcal{F}^{-1} \\Big( \\sum_{j=1}^d \\etA_{i,j,k} \\mathcal{F}(\\tilde{\\mV})_{i,j} + \\emB_{i,k} \\Big), \\]\nwhere \\(\\tA \\in \\mathbb{C}^{F \\times d \\times d_S}, \\mB \\in \\mathbb{C}^{F \\times d_S} \\) are the parameters of the per-element linear layer. \n\n\\textbf{Frequency Domain Contrastive Loss}\nAs illustrated in Figure~\\ref{fig:proposed-method}c, the inputs to the frequency domain loss functions are the pre-iFFT representations, denoted by \\(\\mF \\in \\sC^{F \\times d_S}\\). These are complex-valued representations in the frequency domain.\nTo learn representations which are able to discriminate between different seasonal patterns, we introduce a frequency domain loss function. \nAs our data augmentations can be interpreted as interventions on the error variable, the seasonal information does not change and thus, a contrastive loss in frequency domain corresponds to discriminating between different periodic patterns given a frequency.\nTo overcome the issue of constructing a loss function with complex-valued representations, each frequency can be uniquely represented by its amplitude and phase representations, \\(|\\mF_{i,:}|\\) and \\(\\phi(\\mF_{i,:})\\).\nThen, the loss functions are denoted,\n\\[\n\\mathcal{L}_{\\mathrm{amp}} \n= \n\\frac{1}{FN} \\sum_{i=1}^F \\sum_{j=1}^{N} \n-\\log \n\\frac{\\exp (|\\mF_{i,:}^{(j)}| \\cdot |(\\mF_{i,:}^{(j)})^{\\prime}|)} % numerator\n{\\exp (|\\mF_{i,:}^{(j)}| \\cdot |(\\mF_{i,:}^{(j)})^{\\prime}|) + \\sum_{k\\neq j}^N \\exp (|\\mF_{i,:}^{(j)}| \\cdot |\\mF_{i,:}^{(k)}|)}  % denominator\n,\\]\n\\[\n\\mathcal{L}_{\\mathrm{phase}} \n= \n\\frac{1}{FN} \\sum_{i=1}^F \\sum_{j=1}^{N} \n-\\log \n\\frac{\\exp (\\phi(\\mF_{i,:}^{(j)}) \\cdot \\phi((\\mF_{i,:}^{(j)})^{\\prime}))}\n{\\exp (\\phi(\\mF_{i,:}^{(j)}) \\cdot \\phi((\\mF_{i,:}^{(j)})^{\\prime})) + \\sum_{k\\neq j}^N \\exp (\\phi(\\mF_{i,:}^{(j)}) \\cdot \\phi(\\mF_{i,:}^{(k)}))}\n,\n\\]\nwhere \\(\\mF_{i,:}^{(j)}\\) is the \\(j\\)-th sample in a mini-batch, and \\((\\mF_{i,:}^{(j)})^{\\prime}\\) is the augmented version of that sample.\n\n\\newpage\n"
                }
            },
            "section 4": {
                "name": "Experiments",
                "content": "\nIn this section, we report the results of a detailed empirical analysis of CoST and compare it against a diverse set of time series representation learning approaches, as well as compare against end-to-end supervised forecasting methods. Appendix~\\ref{app:runtime} contains further results on runtime analysis.\n\n",
                "subsection 4.1": {
                    "name": "Experimental Setup",
                    "content": "\n\\textbf{Datasets}\n\\label{subsec:datasets}\nWe conduct extensive experiments on five real-world public benchmark datasets. ETT (Electricity Transformer Temperature)\\footnote{https://github.com/zhouhaoyi/ETDataset} \\citep{zhou2021informer} consists of two hourly-level datasets (ETTh) and one 15-minute-level dataset (ETTm), measuring six power load features and ``oil temperature\", the chosen target value for univariate forecasting. \nElectricity\\footnote{https://archive.ics.uci.edu/ml/datasets/ElectricityLoadDiagrams20112014} measures the electricity consumption of 321 clients, and following popular benchmarks, we convert the dataset into hourly-level measurements and set ``MT\\_320\" as the target value for univariate forecasting.\nWeather\\footnote{https://www.ncei.noaa.gov/data/local-climatological-data/} is an hourly-level dataset containing 11 climate features from nearly 1,600 locations in the U.S., and we take ``wet bulb\" as the target value for univariate forecasting. Finally, we also include the M5 dataset \\citep{makridakis2020m5} in Appendix~\\ref{app:m5}.\n\n\\textbf{Evaluation Setup}\nFollowing prior work, we perform experiments on two settings -- multivariate and univariate forecasting. The multivariate setting involves multivariate inputs and outputs, considering all dimensions of the dataset. The univariate setting involves univariate inputs and outputs, which are the target values described above. We use MSE and MAE as evaluation metrics, and perform a 60/20/20 train/validation/test split. Inputs are zero-mean normalized and evaluated over various prediction lengths. Following \\citep{yue2021ts2vec}, self-supervised learning approaches are first trained on the train split, and a ridge regression model is trained on top of the learned representations to directly forecast the entire prediction length. The validation set is used to choose the appropriate ridge regression regularization term \\(\\alpha\\), over a search space of \\(\\{0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000\\}\\). Evaluation results are reported on the test set.\n\n\\textbf{Implementation Details}\nFor CoST and all other representation learning methods, the backbone encoder used is a Temporal Convolution Network (following similar practice in TS2Vec \\citep{yue2021ts2vec}) unless the approach includes or is an architectural modification (further details in Appendix~\\ref{app:baselines}). All methods used have a representation dimensionality of 320.\nWe use a standard hyper-parameter setting on all datasets -- a batch size of 256 and learning rate of \\(1\\mathrm{E}{-3}\\), momentum of 0.9 and weight decay of \\(1\\mathrm{E}{-4}\\) with SGD optimizer and cosine annealing. The MoCo implementation for time domain contrastive loss uses a queue size of 256, momentum of 0.999, and temperature of 0.07.\nWe train for 200 iterations for datasets with less than 100,000 samples, and 600 iterations otherwise.\nDetails on data augmentations used in CoST can be found in Appendix~\\ref{app:augmentations}.\n\n"
                },
                "subsection 4.2": {
                    "name": "Results",
                    "content": "\n%\n\nAmong the baselines, we report the performance of  representation learning techniques including TS2Vec, TNC, and a time series adaptation of MoCo in our main results. A more extensive benchmark of feature-based forecasting approaches can be found in Appendix~\\ref{app:feature-based-baselines-results} due to space limitations. Further details about the baselines can be found in Appendix~\\ref{app:baselines}. We include supervised forecasting approaches - two Transformer based models, Informer \\citep{zhou2021informer} and LogTrans\\citep{li2020enhancing}, and the backbone TCN trained directly on an end-to-end forecasting loss. \nA comparison of end-to-end forecasting approaches can be found in Appendix~\\ref{app:e2e}.\n\nTable~\\ref{tab:main-multi} summarizes the results of CoST and top performing baselines for the multivariate setting, and Table~\\ref{tab:main-uni} (in Appendix~\\ref{app:univariate-forecasting-results} due to space limitations) for the univariate setting.\nFor end-to-end forecasting approaches, the TCN generally outperforms the Transformer based approaches, Informer and LogTrans. At the same time, the representation learning methods outperform end-to-end forecasting approaches, but there are indeed cases, such as in certain datasets for the univariate setting, where the end-to-end TCN performs surprisingly well. While Transformers have been shown to be powerful models in other domains like NLP, this suggests that TCN models are still a powerful baseline which should still be considered for time series.\n\nOverall, our approach achieves state-of-the-art performance, beating the best performing end-to-end forecasting approach by 39.3\\% and 18.22\\% (MSE) in the multivariate and univariate settings respectively. CoST also beats next best performing feature-based approach by 21.3\\% and 4.71\\% (MSE) in the multivariate and univariate settings respectively. This indicates that CoST learns more relevant features by learning a composition of trend and seasonal features which are crucial for forecasting tasks.\n\n"
                },
                "subsection 4.3": {
                    "name": "Parameter Sensitivity",
                    "content": "\n"
                }
            }
        },
        "tables": {
            "tab:main-multi": "\\begin{table}[!t]\n  \\centering\n  \\caption{Multivariate forecasting results. Best results are highlighted in bold.}\n  \\resizebox{\\textwidth}{!}{\n    \\input{tables/main_multi}\n    }\n  \\label{tab:main-multi}%\n\\end{table}"
        },
        "figures": {
            "fig:time-series-decomposition": "\\begin{wrapfigure}{r}{0.3\\textwidth}\n\\begin{center}\n\\resizebox{0.3\\textwidth}{!}{\n    \\includegraphics[scale=1]{images/time-series-decomposition.pdf}\n}\n\\end{center}\n\\vspace{-0.05in}\n\\caption{Time series composed of seasonal and trend components.}\n\\vspace{-0.15in}\n\\label{fig:time-series-decomposition}\n\\end{wrapfigure}",
            "fig:data-generating-process": "\\begin{wrapfigure}{r}{0.38\\textwidth}\n\\vspace{-0.2in}\n\\begin{center}\n\\includegraphics[scale=0.38]{images/ets_generation.png}\n\\end{center}\n\\vspace{-0.1in}\n\\caption{Causal graph of the generative process for time series data.}\n\\label{fig:data-generating-process}\n\\vspace{-0.3in}\n\\end{wrapfigure}",
            "fig:proposed-method": "\\begin{figure}[!ht]\n\\begin{center}\n\\resizebox{\\textwidth}{!}{\\includegraphics[scale=0.8]{proposed-method.pdf}}\n\\end{center}\n\\vspace{-0.1in}\n\\caption{\n(a) Overall Framework. Given intermediate representations from the backbone encoder, \\(\\tilde{\\mV} = f_b(\\mX)\\), the TFD and SFD produce the trend features, \\(\\mV^{(T)} = f_T(\\tilde{\\mV})\\), and seasonal features, \\(\\mV^{(S)} = f_S(\\tilde{\\mV})\\), respectively.\n(b) Trend Feature Disentangler. Composition of a mixture of auto-regressive experts, instantiated as 1d-causal convolutions with kernel size of \\(2^i, \\forall i = 0, \\ldots, L\\), where \\(L\\) is a hyper-parameter. Followed by average-pool over the \\(L+1\\) representations.\n(c) Seasonal Feature Disentangler. After transforming the intermediate representations into frequency domain via the FFT, the SFD applies a (complex-valued) linear layer with unique weights for each frequency. Then, an inverse FFT is performed to map the representations back to time domain, to form the seasonal representations, \\(\\mV^{(S)}\\).\n}\n\\label{fig:proposed-method}\n\\vspace{-0.1in}\n\\end{figure}"
        },
        "equations": {
            "eq:1": "\\begin{align*}\n    \\mV^{(T)} & = \\mathrm{AvePool}(\\tilde{\\mV}^{(T,0)}, \\tilde{\\mV}^{(T,1)}, \\ldots, \\tilde{\\mV}^{(T,L)}) \n    = \\frac{1}{(L+1)} \\sum_{i=0}^L \\tilde{\\mV}^{(T,i)}.\n\\end{align*}"
        },
        "git_link": "https://github.com/salesforce/CoST"
    }
}