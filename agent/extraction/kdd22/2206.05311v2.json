{
    "meta_info": {
        "title": "Graph-in-Graph Network for Automatic Gene Ontology Description  Generation",
        "abstract": "Gene Ontology (GO) is the primary gene function knowledge base that enables\ncomputational tasks in biomedicine. The basic element of GO is a term, which\nincludes a set of genes with the same function. Existing research efforts of GO\nmainly focus on predicting gene term associations. Other tasks, such as\ngenerating descriptions of new terms, are rarely pursued. In this paper, we\npropose a novel task: GO term description generation. This task aims to\nautomatically generate a sentence that describes the function of a GO term\nbelonging to one of the three categories, i.e., molecular function, biological\nprocess, and cellular component. To address this task, we propose a\nGraph-in-Graph network that can efficiently leverage the structural information\nof GO. The proposed network introduces a two-layer graph: the first layer is a\ngraph of GO terms where each node is also a graph (gene graph). Such a\nGraph-in-Graph network can derive the biological functions of GO terms and\ngenerate proper descriptions. To validate the effectiveness of the proposed\nnetwork, we build three large-scale benchmark datasets. By incorporating the\nproposed Graph-in-Graph network, the performances of seven different\nsequence-to-sequence models can be substantially boosted across all evaluation\nmetrics, with up to 34.7%, 14.5%, and 39.1% relative improvements in BLEU,\nROUGE-L, and METEOR, respectively.",
        "author": "Fenglin Liu, Bang Yang, Chenyu You, Xian Wu, Shen Ge, Adelaide Woicik, Sheng Wang",
        "link": "http://arxiv.org/abs/2206.05311v2",
        "category": [
            "cs.AI",
            "cs.CL"
        ],
        "additionl_info": "Accepted by KDD 2022 (Research Track)"
    },
    "latex_extraction": {
        "content": {
            "section 1": {
                "name": "Introduction",
                "content": "\n\nGene Ontology (GO), which includes tens of thousands of biological functions, is crucial to biomedical research \\cite{ashburner2000gene, dutkowski2013gene} and advances many downstream applications, such as protein function prediction \\cite{wang2015exploiting}, disease mechanism analysis \\cite{davis2016generating} and drug discovery \\cite{mutowo2016drug}. Biological functions, which we refer to as Gene Ontology \\textit{terms}, are grouped and organized hierarchically according to three categories: molecular function, biological process and cellular component \\cite{GO2015GO,GO2017GO}, where each node is a term and each edge represents an `is a' relationship between two terms (Figure~\\ref{fig:introduction}). Each term is further associated with a set of genes that have this function and a curated text description of this function. \n\n\n\n\nAlthough GO has been used extensively, a key challenge for using GO is the updating of GO with new biomedical discoveries, which are often part of newly-generated biomedical literature \\cite{tomczak2018interpretation, xu2022protranslator}. Currently, GO updates are performed manually by domain experts through digesting scientific literature, annotating associated genes, identifying similar terms and writing descriptions. As this multi-step process is tedious and time-consuming, even for domain experts, expert updates can hardly scale to the size of GO.\nHowever, to the best of our knowledge, there are no existing works attempted to generate the description of a GO term, which is one of the most time-consuming steps for updating GO. \nMore importantly, the inconsistency in the descriptions generated by different experts may further cause bias in the GO description and hinder the process of GO analysis. Therefore, there is a pressing need to automatically generate GO term descriptions in order to assist biologists in discovering the gene function of new terms \\cite{Elham2017Survey,liu2021graphine,yangpathway2text}.\n\n\n\n\n\nTo this end, we propose the novel task of automatic GO term description generation, which aims to generate a textual description for an input term based on the associated genes. After examining the GO data, we find two types of information that can be leveraged to model the description: 1) \\textit{Term graph structure:} terms in GO are organized hierarchically, which enables us to capture their biological relationships by representing terms as a directed acyclic graph; 2) \\textit{Overlapping phrases}: many phrases are reused in both gene text and the term description for a given GO term. We illustrated one such case in Figure \\ref{fig:introduction} where the overlapping phrases are underlined. The overlapping phrases further enables us to construct a \\textit{gene graph} using these phrases. At last, to model the term graph and gene graph simultaneously, we propose a graph-in-graph network approach. As shown in Figure~\\ref{fig:framework}, the outside layer graph is the term graph. Nodes in the term graph also form an inside layer graph, where the nodes are the term itself, genes belonging to this term, and individual words in the gene text. Such a graph-in-graph network can capture both the biological relations between terms and the gene relations within each term, providing a holistic view of the GO data. By encoding and decoding information in the graph-in-graph network, we can generate the description for a novel GO term as soon as it is inserted into the term graph.  \nIt can assist biologists in GO construction and analysis. For domain experts, given a new GO term with its associated genes, our model can automatically generate a textual description to describe its biological function, and the experts only need to make revision rather than writing a new description from scratch.\nIt can not only relieve the experts from heavy workload but also alert them to some important biological functions to avoid mislabeling and missed labeling (avoid errors and omissions). \n\n\nTo prove the effectiveness of our graph-in-graph network, we build three large-scale benchmark datasets, i.e., Molecular Function, Biological Process and Cellular Component. In our experiments, we incorporate the graph-in-graph network into seven different sequence-to-sequence models: 1) RNN-based model, 2) attention-based model, 3) hierarchical RNN-based model, 4) copy mechanism based model, 5) convolutional-neural-network- (CNN-) based model, 6) graph-to-sequence model, and 7) fully-attentive model, i.e., Transformer \\cite{Vaswani2017Transformer}. The experiments show that our approach can substantially boost the performance of baselines across all evaluation metrics.\n\nOverall, the main contributions of this paper are:\n\\begin{itemize}\n\n    \\item We make the first attempt to automatically describe the biological function of GO terms, which can assist biologists in GO construction and analysis. To address the task, we build three large-scale benchmark datasets and propose a novel Graph-in-Graph network.\n\n    \\item Our approach introduces a gene graph to model the semantic similarity between genes within a term and a term graph to model the structural similarity between terms. Two graphs are coupled together to generate the GO term description.\n\n    \\item We prove the effectiveness and the generalization capabilities of our approach on three datasets. After including our Graph-in-Graph network, performances of the baseline models improve significantly on all metrics, \n    with up to 34.7\\%, 14.5\\%, and 39.1\\% relative improvements in BLEU, ROUGE-L, and METEOR, respectively. The analysis further highlights the transferability of our approach.\n\\end{itemize}\n\n\n\n"
            },
            "section 2": {
                "name": "Related Works",
                "content": "\nIn this section, we describe the related works: 1) Gene Ontology Construction; 2) Sequence-to-Sequence Learning.\n\n\n",
                "subsection 2.1": {
                    "name": "Gene Ontology Construction",
                    "content": "\nRecently, several computational approaches have been proposed to automate Gene Ontology construction. \n\\citet{Mazandu2017Gene} builds and organizes semantically-related terms; \\citet{koopmans2019syngo} helps identify the relationship between newly-discovered terms and existing terms; \\citet{Zhang2020GO} proposes to generate the name of new discovered terms. \nSpecifically, NeXO \\cite{dutkowski2013gene} is proposed to reconstruct the graph structure of gene ontology by clustering genes based on their topological features encoded in the molecular networks. CliXO  \\cite{Kramer2014Inferring} further incorporated multi-omics and semantic information into the clustering procedure and obtained an improved performance in GO construction. A few other approaches have proposed to predict term associations on the Gene Ontology by utilizing its graph structure and modeling it as a link prediction problem \\cite{Gligorijevic2014Integration,li2016integrating,Peng2016Extending}. Despite the encouraging performance of these methods on a variety of tasks, none of the existing methods has attempted to generate the description of a GO term, which is arguably the most time-consuming step in updating GO. Consequently, gene functions of new terms are still manually annotated by the experts, which is very time-consuming, tedious and inefficient.\n\\citet{Zhang2020GO} introduced a graph-based approach to automatically annotate the GO terms given their associated set of genes. However, they focus on automatic generation of the term names, e.g., ''microtubule motor activity`` in Figure~\\ref{fig:introduction}, which are usually very short (five words on average). Therefore, term name generation cannot fully represent the rich functional semantic of GO terms.\nRather than generating term names, we propose to generate the descriptions of gene function, which are usually $20\\sim30$ words in length (see Table~\\ref{tab:statistics}), to assist biologists in discovering new GO terms and GO construction and better support research in biomedicine and biology.\n\n\n\n\n\n"
                },
                "subsection 2.2": {
                    "name": "Sequence-to-Sequence Learning",
                    "content": "\nIn recent years, many deep neural systems have been proposed for sequence-to-sequence learning.\nThe common approaches \\cite{Vaswani2017Transformer,bahdanau2014neural} use the encoder-decoder framework, which is usually based on the RNN or CNN model \\cite{Hochreiter1997LSTM,Gehring2017ConvS2S}, to map a source sequence to a target sequence, such as in machine translation \\cite{bahdanau2014neural} and paraphrasing \\cite{Liu2019Paraphrase}.\nThe encoder network computes intermediate representations for the source sequence and the decoder network defines a probability distribution over target sentences given the intermediate representation. \nTo enable a more efficient use of the source sequences, a copy mechanism \\cite{Gu2016CopyNet} and a series of attention methods \\cite{Luong2015Seq2Seq_Attention,Vaswani2017Transformer} have been proposed to directly provide the decoder with the source information.\nIn particular, the recent advent of fully-attentive models, e.g., Transformer \\cite{Vaswani2017Transformer,Devlin2019BERT}, in which no recurrence is required, have been proposed and successfully applied to multiple tasks.\nFor the network structure, although graph-to-sequence models \\cite{Kedziorski2019Text,ozturk2020exploring,Cai2020Graph} have been developed, \nin our work, to exploit the information of overlapping phrases, given the input \\textit{plain text} of GO, we construct a gene graph using these overlapping phrases, while most existing graph-to-sequence tasks leverage existing explicit structures to construct the graph.\n\n"
                }
            },
            "section 3": {
                "name": "Approach",
                "content": "\n\\label{sec:approach}\nWe first define the automatic Gene Ontology (GO) description problem. Next, we describe the proposed Graph-in-Graph network in detail.\n\n",
                "subsection 3.1": {
                    "name": "GO Description Problem Definition",
                    "content": "\n\\label{sec:definition}\nWe use the pair ($T$, $S$) to denote a GO term and its corresponding textual description. Let $T=\\{g_1,g_2,\\dots,g_{N_\\text{G}}\\}$ denote the $N_\\text{G}$ genes belonging to this term, where $g_i \\in \\R^{d}$ represents the embedding of the $i^{th}$ gene. As shown in Figure \\ref{fig:introduction}, each gene has a corresponding description, i.e., gene text. To produce $g_i$, we embed the gene text with BiLSTM \\cite{Hochreiter1997LSTM}. Let $S=\\{y_1,y_2,\\dots,y_{N_\\text{S}}\\}$ denote the target description of the GO term which contains $N_\\text{S}$ words. The goal of our proposed GO description task is to generate $S$ given $T$.\n\nSince both the input $T$ and the output $S$ are sequences, we can adopt the encoder-decoder framework, which is widely-used in sequence-to-sequence tasks (e.g., neural machine translation \\cite{bahdanau2014neural} and paraphrasing \\cite{Liu2019Paraphrase}), to perform the GO description generation task. In particular, the encoder-decoder framework includes a term encoder and a description decoder, which is formulated as:\n\\begin{equation}\n\\label{eq:definition}\n\\text{Term Encoder}  : T \\to I ;\n\\quad\n\\text{Description Decoder} : I \\to S .\n\\end{equation}\nThe term encoder, e.g., LSTM \\cite{Hochreiter1997LSTM} or Transformer \\cite{Vaswani2017Transformer}, aims to compute the intermediate representation $I$ from the input $T$. Then $I$ is fed into the decoder network, e.g., LSTM \\cite{Hochreiter1997LSTM} or Transformer \\cite{Vaswani2017Transformer}, to generate the description. The decoder defines the probability distribution $p_{\\theta}\\left(y_{t} \\mid y_{1: t-1}, I\\right)$ over target sentences $S$ given the intermediate representation $I$. Finally, given a target ground-truth sequence $\\{y_1^*, ..., y_{N_\\text{S}}^*\\}$ and the GO description model with parameters $\\theta$, the training objective is to minimize the following widely-used cross-entropy loss:\n\\begin{align}\n\\label{eq:loss}\nL_{\\text{XE}}(\\theta)=-\\sum_{t=1}^{N_\\text{S}} \\log \\left(p_{\\theta}\\left(y_{t}^{*} \\mid y_{1: t-1}^{*}\\right)\\right).\n\\end{align}\n\n\n"
                },
                "subsection 3.2": {
                    "name": "Graph-in-Graph Network",
                    "content": "\nTo model the relationship between terms and the relationships within a term, we propose a graph-in-graph network. As shown in Figure~\\ref{fig:framework}, the outer-layer graph is the term graph $\\mathcal{G}_\\text{term}  = (V', E')$ which models the biological relationships between terms. We represent each node in $V'$ with a gene graph $\\mathcal{G}_\\text{gene} = (V, E)$, which models the relationships between genes within this term. As shown in the left plot of Figure~\\ref{fig:framework}, the set of nodes $V$ in the gene graph includes the term itself, the genes belonging to this term and the words in the gene text.\nTo capture the nested structural information, the Graph-in-Graph network introduces two encoders, i.e., the Gene Graph Encoder and the Term Graph Encoder.\nTherefore, the baseline encoder-decoder model equipped with the graph-in-graph network can be formulated as:\n\\begin{align}\n\\label{eq:formulation}\n\\text{Graph Construction} &: T \\to \\{\\mathcal{G}_\\text{gene}, \\mathcal{G}_\\text{term}\\}  \\nonumber \\\\\n\\text{Graph-in-Graph Network}  &:  \\{\\mathcal{G}_\\text{gene}, \\mathcal{G}_\\text{term}\\} \\to I \\nonumber   \\\\\n\\text{Description Decoder} &: I \\to S . \n\\end{align}\nNext, we formalize our graph-in-graph construction and encoding.\n\n",
                    "subsubsection 3.2.1": {
                        "name": "Gene Graph",
                        "content": "\nThe gene graph is defined as $\\mathcal{G}_\\text{gene} = (V, E)$, where $V = \\{v_i\\}_{i=1:N_\\text{gene}} \\in \\R^{N_\\text{gene} \\times d}$ is a set of nodes and $E = \\{e_{i,j}\\}_{i,j=1:N_\\text{gene}}$ is a set of edges. Given a term $T=\\{g_1,g_2,\\dots,g_{N_\\text{G}}\\}$, which includes $N_G$ genes, we use the term itself, associated genes and each word in the gene text as nodes. Given $N_W$ words in the gene text for all associated genes, the number of nodes in $\\mathcal{G}_\\text{gene}$ is $N_\\text{gene} = 1+N_G+N_W$. We include two types of edges in $E$: we first connect the term with its related genes and then connect the genes with the words extracted from their descriptions. For each node in $V$, we represent it with the embedding $v_i \\in \\R^{d}$. In this gene graph, the node embedding of the term node, gene nodes and word nodes are initialized with the term name embedding, the gene embeddings ($\\{g_i\\}$) and the word embeddings, respectively. The edge weights of all term-gene are set to 1, while the gene-word edges are set the degree-normalized co-occurrence of gene node and word node computed from the current gene text.\n\nThe gene graph is then encoded using a gene-graph encoder, defined as\n\\begin{equation}\n\\hat{v}_{i}={v}_{i}+\\text{ReLU}\\left(\\sum\\nolimits_{j=1}^{N_\\text{gene}} {e}_{i, j} {W}_{v} {v}_{j}\\right) ,\n\\end{equation}\nwhere $\\text{ReLU}(\\cdot)$ represents the ReLU activation function and $W_v \\in \\R^{d \\times d}$ is a learnable matrix. This enables us to obtain the set of encoded gene node embeddings:\n\\begin{align}\n\\label{eqn:gene_graph}\n\\hat{V} &= \\text{Gene-Graph-Encoder}(\\mathcal{G}_\\text{gene}) \\nonumber \\\\\n& = \\{\\hat{v}_1,\\hat{v}_2,\\dots,\\hat{v}_{N_\\text{gene}}\\} \\in \\R^{N_\\text{gene} \\times d}.   \n\\end{align}\nMore complicated gene graph structures that incorporate external knowledge bases, e.g., InBioMap \\cite{li2017scored}, can also be applied to the graph-in-graph network as well. However, we mainly aim to demonstrate the effectiveness of capturing the structural information with the gene network for generating GO term description, so we use the simpler encoder formulation. \n\n\n\n"
                    },
                    "subsubsection 3.2.2": {
                        "name": "Term Graph",
                        "content": "\nWe construct a term graph $\\mathcal{G}_\\text{term} = (V', E')$ to model biological relationships among terms. $V' = \\{v'_i\\}_{i=1:N_\\text{term}} \\in \\R^{N_\\text{term} \\times d}$ is a set of nodes and $E' = \\{e'_{i,j}\\}_{i,j=1:N_\\text{term}}$ is a set of edges. For any two terms, if they have a connection in GO, we add a corresponding edge in $E'$. We represent each node in $V'$ with the embedding $v'_i \\in \\R^{d}$.\nIn our implementation, we initialize the embedding $v'_i$ with its corresponding embedding of term node from the gene graph. The edge weights are all set to be 1.\n\nNext, we introduce the term-graph encoder, which is based on the graph convolution operation \\cite{Li2016GCN}, to encode the term graph as\n\\begin{equation}\n\\hat{v}'_{i}={v}'_{i}+\\text{ReLU}\\left(\\sum\\nolimits_{j=1}^{N_\\text{term}} {e}'_{i, j} {W}'_{v} {v}'_{j}\\right) ,\n\\end{equation}\nwhere $W'_v \\in \\R^{d \\times d}$ is a learnable matrix.\nAs a result, we can acquire a set of encoded term node embeddings:\n\\begin{align}\n\\label{eqn:term_graph}\n\\hat{V}' &= \\text{Term-Graph-Encoder}(\\mathcal{G}_\\text{term}) \\nonumber \\\\\n& = \\{\\hat{v}'_1,\\hat{v}'_2,\\dots,\\hat{v}'_{N_\\text{term}}\\} \\in \\R^{N_\\text{term} \\times d}.   \n\\end{align}\nFinally, we concatenate the encoded gene node embeddings $\\hat{V}$ from Eq.~(\\ref{eqn:gene_graph}) and the encoded term node embeddings $\\hat{V}'$ from Eq.~(\\ref{eqn:term_graph}) to produce the intermediate representations $I = [\\hat{V}; \\hat{V}'] \\in \\R^{(N_\\text{gene} + N_\\text{term}) \\times d}$ for the input term $T$, and then feed these representations into baseline decoders to generate an accurate and coherent GO term description.\n\n\n\n\n\n\n"
                    }
                },
                "subsection 3.3": {
                    "name": "Description Decoder",
                    "content": "\n\\label{sec:decoder}\n\nAs shown in Eq.~(\\ref{eq:formulation}), the description decoder aims to generate the final textual description based on the encoded  intermediate representation $I \\in \\R^{(N_\\text{gene} + N_\\text{term}) \\times d}$.\nIn implementation, we can choose either the LSTM \\cite{Hochreiter1997LSTM} or Transformer \\cite{Vaswani2017Transformer} as the decoder.\nSpecifically, Transformer, which includes the Multi-Head Attention (MHA) and the Feed-Forward Network (FFN), achieves the state-of-the-art performances on multiple natural language generation tasks.\nTaking the Transformer decoder as example: for each decoding step $t$, the decoder takes the embedding of the current input word $x_t = w_t + e_t \\in \\R^{d}$ as input, where $w_t$ and $e_t$ denote the word embedding and fixed position embedding, respectively; we then generate each word $y_t$ in the target description $S = \\{y_1, y_2,\\dots, y_{N_\\text{S}}\\}$, which is defined as follows:\n\\begin{align}\n&h_t = \\text{MHA}(x_t, x_{1:t}, x_{1:t}) \\label{eq:MHA} \\\\\n&h'_t = \\text{MHA}(h_t, I, I) \\\\\n&y_{t} \\sim p_{t} =\\text{softmax}(\\text{FFN}(h'_t)\\text{W}_p + \\text{b}_p) \\label{eq:FFN} ,\n\\end{align}\nwhere $\\text{W}_p \\in \\R^{d \\times |D|}$ and $\\text{b}_p$ are the learnable parameters ($|D|$: vocabulary size); the MHA and FFN stand for the Multi-Head Attention and Feed-Forward Network in the original Transformer \\cite{Vaswani2017Transformer}, respectively. \nIn detail, the MHA consists of $n$ parallel heads and each head is defined as a scaled dot-product attention:\n\\begin{align}\n&\\text{Att}_i(Q,K,V) = \\text{softmax}\\left(\\frac{Q\\text{W}_i^\\text{Q}(K\\text{W}_i^\\text{K})^T}{\\sqrt{{d}_{n}}}\\right)V\\text{W}_i^\\text{V} \\nonumber \\\\\n& \\text{MHA}(Q,K,V) = [\\text{Att}_1(Q,K,V); \\dots; \\text{Att}_n(Q,K,V)]\\text{W}^\\text{O} ,\n\\end{align}\nwhere $Q \\in \\R^{l_Q \\times d}$, $K \\in \\R^{l_K \\times d}$, and $V \\in \\R^{l_V \\times d}$ denote the Query matrix, the Key matrix, and the Value matrix, respectively; $\\text{W}_i^\\text{Q}, \\text{W}_i^\\text{K}, \\text{W}_i^\\text{V} \\in \\R^{d \\times d_n}$ and $\\text{W}^\\text{O} \\in \\R^{d \\times d}$ are learnable parameters, where ${d}_{n} = d / {n}$; $[\\cdot;\\cdot]$ stands for concatenation operation.\n\nFollowing the MHA is the FFN, defined as follows:\n\\begin{align}\n\\text{FFN}(x) = \\max(0,x\\text{W}_\\text{f}+\\text{b}_\\text{f})\\text{W}_\\text{ff}+\\text{b}_\\text{ff}   \n\\end{align}\nwhere $\\max(0,*)$ represents the ReLU activation function; $\\text{W}_\\text{f} \\in \\R^{d \\times 4d}$ and $\\text{W}_\\text{ff} \\in \\R^{4d \\times d}$ denote  learnable matrices for linear transformation; $\\text{b}_\\text{f}$ and $\\text{b}_\\text{ff}$ represent the bias terms. It is worth noting that both the MHA and FFN are followed by an operation sequence of dropout \\cite{srivastava2014dropout}, residual connection \\cite{he2016deep}, and layer normalization \\cite{ba2016layernormalization}.\nIn particular, if LSTM \\cite{Hochreiter1997LSTM} is adopted as the description decoder, we can directly replace the MHA in Eq.~(\\ref{eq:MHA}) with the LSTM unit and remove the FFN in Eq.~(\\ref{eq:FFN}).\n\nOverall, as our Graph-in-Graph network substitutes the original intermediate representations of input term with $I = [\\hat{V}; \\hat{V}']$, our approach can use the sequence-to-sequence model decoders without any alterations to experimental settings or training strategies.\nIn our subsequent experiments, we show that our approach can benefit a wide range of downstream sequence-to-sequence models.\n\n\n\n\n\n\n \n\n"
                }
            },
            "section 4": {
                "name": "Experiments",
                "content": "\n\nIn this section, we first introduce the three datasets that we constructed for experiments, as well as the metrics, base models and settings that we tested. Then, we present the results of our proposed Graph-in-Graph Network.\n\n",
                "subsection 4.1": {
                    "name": "Datasets, Metrics, Baselines and Settings",
                    "content": "\n",
                    "subsubsection 4.1.1": {
                        "name": "Datasets",
                        "content": "\nTo address the GO description problem, we propose three large-scale benchmark datasets containing the GO terms about \\textit{Homo sapiens} (humans), i.e., 1) \\textit{Molecular Function}\\footnote{\\url{http://www.informatics.jax.org/vocab/gene_ontology/GO:0003674}}, 2) \\textit{Biological Process}\\footnote{\\url{http://www.informatics.jax.org/vocab/gene_ontology/GO:0008150}} and 3) \\textit{Cellular Component}\\footnote{\\url{http://www.informatics.jax.org/vocab/gene_ontology/GO:0005575}}, which contain a large number of terms.\nNext, following \\cite{Zhang2020GO}, we collect the gene text from GeneCards\\footnote{\\url{https://www.genecards.org/}}\\cite{stelzer2016genecards}, which contains the information from Universal Protein Resource (UniProt)\\footnote{\\url{https://www.uniprot.org/}} \\cite{UniProt}. These databases are free for academic research and academic non-profit institutions.\nSpecifically, the \\textit{Creative Commons Attribution (CC BY 4.0) License} (\\url{https://www.uniprot.org/help/license}) is used.\nThe dataset statistics are provided in Table~\\ref{tab:statistics}, with the number of terms, the number of genes and the average length of descriptions.\nThen, we randomly split the three datasets into 70\\%-10\\%-20\\% train-validation-test splits.\nAs a result, the Molecular Function/Biological Process/Cellular Component datasets are split into 8,580/21,343/3,124 term-description pairs for training, 1,225/3,049/446 term-description pairs for validation and 2,450/6,098/892 term-description pairs for testing.\nNext, we preprocess the descriptions by tokenizing and converting to lower-cases. At last, we filter tokens that occur less than 3 times in the corpus, resulting in a vocabulary of around 5k, 12k, 4k tokens for Molecular Function, Biological Process and Cellular Component datasets, respectively.\n\n\n\n\n\n"
                    },
                    "subsubsection 4.1.2": {
                        "name": "Metrics",
                        "content": "\nIn our experiment, we evaluate the performance of models on the widely-used natural language generation metrics, i.e., BLEU \\cite{papineni2002bleu}, METEOR \\cite{Banerjee2005METEOR} and ROUGE-L \\cite{lin2004rouge}, which are reported by the evaluation toolkit \\cite{chen2015microsoft}\\footnote{\\url{https://github.com/tylin/coco-caption}}.\nIn particular, BLEU and METEOR were originally designed for machine translation evaluation. ROUGE-L automatically evaluates extracted text summarization.\n\n\n"
                    },
                    "subsubsection 4.1.3": {
                        "name": "Baselines",
                        "content": " \nIn our experiments, we choose seven sequence-to-sequence models with different structures as baseline models, i.e., 1) RNN-based model (\\textbf{Seq2Seq}) \\cite{bahdanau2014neural}, 2) attention-based model (\\textbf{GlobalAtt.}) \\cite{Luong2015Seq2Seq_Attention}, 3) hierarchical RNN-based model (\\textbf{HRNN}) \\cite{Lin2015HRNN}, 4) copy mechanism based model (\\textbf{CopyNet}) \\cite{Gu2016CopyNet}, 5) convolutional-neural-network- (CNN-) based model (\\textbf{ConvS2S}) \\cite{Gehring2017ConvS2S}, 6) graph-to-sequence model (\\textbf{GraphWriter}) \\cite{Kedziorski2019Text}, and 7) fully-attentive model (\\textbf{Transformer}) \\cite{Vaswani2017Transformer}, which are widely used in current sequence-to-sequence tasks, e.g., neural machine translation and paraphrasing. In detail, to demonstrate the effectiveness of the proposed graph-in-graph network, we compare the performance of the models with and without the graph-in-graph network.\n\n\n\n\n\n\n\n\n\n"
                    },
                    "subsubsection 4.1.4": {
                        "name": "Settings",
                        "content": "\n\n\n\nWe use the embedding size $d=512$ for both the graph-in-graph network and the baseline models. \nTo obtain the parent and child nodes of the current term of our graph-in-graph network, we retrieve the term nodes, whose genes cover all genes in current term, as the parent nodes, and the term nodes, whose genes are a subset of current term, as the child nodes. \nWe use the Adam optimizer~\\cite{kingma2014adam} with a batch size of 16 and a learning rate of 1e-3 for parameter optimization.\n\nSince our proposed graph-in-graph is regarded as a pluggable module to explore the relations between terms and the relations between genes, we keep the inner structure of each of the baselines unchanged and maintain the same parameter initialization and training strategy.\nSpecifically, as shown in the GO Description Problem Definition (section~\\ref{sec:definition}) and Equation~\\ref{eq:definition} of our Approach section, we take the input term $T$, consisting of $N_\\text{G}$ genes (vectors) as a sequence, and adopt the sequence-to-sequence baselines to generate a description to describe the biological function of the input term.\nTo incorporate our graph-in-graph into baselines, as shown in Equation~\\ref{eq:formulation}, our approach can produce the $\\mathcal{G}_\\text{term}$ and the $\\mathcal{G}_\\text{gene}$ by capturing the biological relations between terms and the gene relations within each term, respectively. \nNext, as shown in the last paragraph of Section~\\ref{sec:decoder}, we substitute the original intermediate representations $I$ of input term $T$ with $[\\mathcal{G}_\\text{term}; \\mathcal{G}_\\text{gene}]$, i.e., $I = [\\hat{V}; \\hat{V}']$, so our approach can use the sequence-to-sequence model decoders without any alterations to experimental settings or training strategies.\nAll re-implementations and our experiments were run on 4 V100 GPUs for approximately seven days.\n\n\n\n\n\n"
                    }
                },
                "subsection 4.2": {
                    "name": "Results",
                    "content": "\nThe experimental results on our built three benchmark datasets are reported in Table~\\ref{tab:results}. As shown, our proposed graph-in-graph network can consistently boost all baselines across all metrics, with a relative BLEU score improvement of 14.3\\%$\\sim$32.3\\%, 15.1\\%$\\sim$34.7\\%, and 5.7\\%$\\sim$24.8\\% for Molecular Function, Biological Process, and Cellular Component, respectively, where the Seq2Seq with Graph-in-Graph achieves the greatest improvements. \nThe results prove the effectiveness of our approach in exploring the relationships between terms and the relationships between genes. \n\n\n\n\n\n\n\n\n"
                },
                "subsection 4.3": {
                    "name": "Ablation Study",
                    "content": "\nWe select two mainstream sequence-to-sequence models, i.e., Seq2Seq and Transformer, where the latter achieves state-of-the-art performances on multiple tasks, to evaluate the contribution of each proposed module, i.e., Gene Graph and Term Graph encoders (Table~\\ref{tab:ablation}). As we can see, each component in our proposed approach can boost the performances of baselines over all metrics, verifying the effectiveness of our approach. \n\n",
                    "subsubsection 4.3.1": {
                        "name": "Effect of Gene Graph Encoder",
                        "content": " \\ \\ In particular, setting (a) in Table~\\ref{tab:ablation} shows that the Gene Graph encoder can successfully boost baselines with relative gains up to 12.9\\%, 10.7\\% and 7.2\\% for Molecular Function, Biological Process and Cellular Component datasets in terms of BLEU score respectively, demonstrating how our proposed Gene Graph exploits the relations between genes to promote the performance. \n\n\n\n"
                    },
                    "subsubsection 4.3.2": {
                        "name": "Effect of Term Graph Encoder",
                        "content": " \\ \\ Settings (b,c) show that modeling either parent nodes or child nodes respectively both boost performance, indicating the importance of introducing enriched information from parent and child nodes into the models. \nIn particular, since the genes of the current node are a subset of the parent nodes and the genes of the child nodes are a subset of the current node, modeling parent nodes encourages the model to utilize the abstractive information from parents, and modeling children encourages the model to summarize the information from child nodes, similar to the task of text summarization.\nMoreover, by comparing the results of (b) and (c), we observe that the child nodes introduce more improvements than the parent nodes. We attribute this to the fact that child nodes contain more specific textual information than the parent nodes, which we verify in our following quantitative analysis. Since the Gene Graph encoder and Term Graph encoder can improve the performance from different information sources, combining them can lead to the most prominent improvement across all metrics (see Full Model), with up to 32.3\\%, 34.7\\%, 24.8\\% BLEU score improvement for the Molecular Function, Biological Process, Cellular Component datasets, respectively.\n\n\n\n\n\n\n\n"
                    }
                },
                "subsection 4.4": {
                    "name": "Out-of-Domain Analysis",
                    "content": "\nIn this section, we further conduct an out-of-domain analysis to examine whether our model can aid in the discovery of new Gene Ontology terms through describing the function of terms from \\textbf{a new domain}. \nSpecifically, we perform a cross-dataset prediction by training on one dataset and evaluating on the other two datasets. We summarized the performance of our method and base models in Table~\\ref{tab:ood}. As we show, our approach consistently outperforms the baseline methods. Although we observe that the performance of the baseline models and our approach all decrease on the out-of-domain datasets, our approach achieves a lower drop in performance compared to the baseline models on most cases, which further demonstrates the effectiveness and the transferability of our approach. \nMore encouragingly, when transferring our approach trained on Biological Process dataset into Cellular Component dataset, we observed a superior out-of-domain performance when using our method, i.e., METEOR/ROUGE-L/BLEU: 15.6/28.8/15.5, which are competitive with the in-domain results of baseline, i.e., METEOR/ROUGE-L/BLEU: 16.1/31.4/15.2.\nThe superior performance on the out-of-domain datasets demonstrate the effectiveness of our approach with boosted transferability of models, leading to higher quality descriptions for new GO terms from a new domain than baseline models.\n\n\n\n"
                },
                "subsection 4.5": {
                    "name": "Qualitative Analysis",
                    "content": "\nIn Figure~\\ref{fig:example}, we conduct a qualitative analysis to more thoroughly understand our approach.\nWe can see that the descriptions generated by our proposed method are better aligned with ground truth descriptions than baseline models.\nFor example, our approach correctly generates the key gene function ``\\textit{motor activity}'' and ``\\textit{driven by ATP hydrolysis}'' in the first example and ``\\textit{interacts (directly or indirectly) with a variety of receptors}'' in the second example.\nWe attribute this to the capability of our Graph-in-Graph framework to explore the structural information of terms and then exploit the abstract information from parent nodes and the detailed information from child nodes to improve the description generation. This can be verified by the strong overlap between the generated description and the description of attended nodes.\nThe qualitative analysis further supports our hypothesis and verifies the effectiveness of our proposed approach in exploring the structural information of GO to boost the performance of description generation.\n\n\n\n\n\n"
                }
            },
            "section 5": {
                "name": "Conclusion and Discussion",
                "content": "\n\nIn this paper, we make the first attempt to automatically describe the function of a Gene Ontology term. We propose the novel Graph-in-Graph framework, which introduces a Gene Graph encoder and a Term Graph encoder to explore the structural information of the relationships between genes and the relationships between terms, respectively. The extensive experiments and analyses on our three benchmark datasets verify the effectiveness and the generalization capabilities of our approach, which consistently demonstrates superior performance on a wide range of baseline models with substantially different model structures, across all metrics. The greatest relative BLEU, ROUGE-L, and METEOR score improvements of our method are 34.7\\%, 14.5\\%, and 39.1\\%, respectively. The analysis further proves the transferability of our approach.\n\nAlthough this paper makes the first attempt to automatically describe the biological function of Gene Ontology (GO) terms, which can assist biologists in GO construction and analysis, the training of our proposed model relies on a large volume of GO-description pairs. Such limitations may have following consequences: 1) The performance will be limited by the size of existing GO terms in biology domain, but could be alleviated using techniques such as distillations from publicly-available pre-trained models, e.g., BioBERT \\cite{BioBERT}; 2) When applying to new biology domains, we need to collect a new set of GO descriptions, which may be difficult and time-consuming for some biology domains \\cite{wang2022textomics,wang2021leveraging}.\n\nIn the future, it can be interesting to apply the Graph-in-Graph network to improve other medical tasks.\nTake drug mining and recommendation for example, the inner graph may refer to the molecular structure of drugs and the outer graph may refer to the knowledge graph that connects drugs, diseases, symptoms and other medical entities. \n\n\n"
            },
            "section 6": {
                "name": "Acknowledgments",
                "content": "\nWe thank all the anonymous reviewers for their constructive comments and suggestions.\n\n\n\\bibliographystyle{ACM-Reference-Format}\n\\bibliography{sample}\n\n\n"
            }
        },
        "tables": {
            "tab:statistics": "\\begin{table}[t]\n\\centering\n\\caption{The statistics of the three datasets that we constructed, w.r.t. the numbers of terms and genes, and the mean length of descriptions.}\n\\label{tab:statistics}\n\\setlength{\\tabcolsep}{2.5pt}   \n\\begin{tabular}{@{}l c c c@{}}\n\\toprule \n\n\\multirow{2}{*}{Datasets} & \\multirow{2}{*}{\\begin{tabular}[c]{@{}c@{}} Molecular \\\\ Function \\end{tabular}} & \\multirow{2}{*}{\\begin{tabular}[c]{@{}c@{}} Biological \\\\ Process \\end{tabular}} & \\multirow{2}{*}{\\begin{tabular}[c]{@{}c@{}} Cellular \\\\ Component \\end{tabular}} \\\\ \\\\\n\\midrule [\\heavyrulewidth]\nNumber of Terms & 12,257 & 30,490 & 4,463 \\\\\nNumber of Genes & 32,002 & 32,840 & 32,477\\\\\nMean Description Length & 19.29 & 27.49 & 29.36\\\\\n\\bottomrule\n\\end{tabular}\n\\end{table}",
            "tab:results": "\\begin{table*}[t]\n\\centering\n\\caption{Performance on our built three benchmark datasets. Higher is better in all columns. We conducted 5 runs with different seeds for all experiments, the t-tests indicate that $p$ $<$ 0.01. As we can see, all the baseline models with significantly different  structures enjoy a comfortable improvement with our Graph-in-Graph network.}\n\\label{tab:results}\n\\setlength{\\tabcolsep}{5pt}\n\\begin{tabular}{@{}l c c c c c c c c c@{}}\n\\toprule \n\n\\multirow{2}{*}[-3pt]{Methods} & \\multicolumn{3}{c}{Dataset: Molecular Function} & \\multicolumn{3}{c}{Dataset: Biological Process} & \\multicolumn{3}{c}{Dataset: Cellular Component}  \\\\ \\cmidrule(lr){2-4} \\cmidrule(lr){5-7} \\cmidrule(lr){8-10}\n& METEOR & ROUGE-L & BLEU & METEOR & ROUGE-L & BLEU & METEOR & ROUGE-L & BLEU  \\\\\n\\midrule [\\heavyrulewidth]\n\nSeq2Seq \\cite{bahdanau2014neural} &  20.5 & 44.7 & 26.3 & 15.1 & 36.8 & 17.6 & 12.9 & 28.3 & 11.7  \\\\  \n\n\\ with Graph-in-Graph & \\bf 27.5 & \\bf 51.2 & \\bf 34.8 & \\bf 21.0 & \\bf 40.3 & \\bf 23.7 & \\bf 15.3 & \\bf 31.6 & \\bf 14.6 \\\\ \\midrule \n\nGlobalAtt. \\cite{Luong2015Seq2Seq_Attention} & 21.9 & 45.5 & 26.8 & 16.0 & 37.3 & 18.1 & 14.5 & 28.9 & 11.8 \\\\  \n\n\\ with Graph-in-Graph & \\bf 27.9 & \\bf 49.8 & \\bf 34.6 & \\bf 20.5 & \\bf 39.2 & \\bf 21.4 & \\bf 16.7 & \\bf 32.1 &\\bf 14.5  \\\\  \\midrule \n\nHRNN \\cite{Lin2015HRNN} & 23.1 & 44.9 & 27.2 & 18.3 & 38.7 & 19.7 & 16.1 & 30.4 & 13.3 \\\\\n\n\\ with Graph-in-Graph & \\bf 28.6 & \\bf 49.6 & \\bf 34.4 & \\bf  22.4 & \\bf 40.5 & \\bf  24.8 & \\bf 17.3 & \\bf  34.3 & \\bf 15.9 \\\\ \\midrule  \n\nCopyNet \\cite{Gu2016CopyNet} & 22.0 & 44.5 & 27.0 & 16.4 & 37.7 & 18.5 & 14.7 & 29.2 & 12.3 \\\\ \n\n\\ with Graph-in-Graph & \\bf 25.2 & \\bf 47.3 & \\bf 31.3 & \\bf 19.7 & \\bf 39.4 & \\bf 21.3 & \\bf 15.5 & \\bf 30.5 & \\bf 13.0 \\\\ \\midrule\n\nConvS2S \\cite{Gehring2017ConvS2S} & 15.7 & 34.1 & 16.2 & 11.4 & 27.5 & 10.5 & 10.2 & 23.9 & 11.1 \\\\\n\n\\ with Graph-in-Graph & \\bf 17.5 & \\bf 34.8 & \\bf 19.7 & \\bf 12.5 & \\bf 27.9 & \\bf 12.8 & \\bf 11.6 & \\bf 25.0 & \\bf 12.7 \\\\ \\midrule  \n\nGraphWriter \\cite{Kedziorski2019Text} & 25.3 & 47.2 & 31.7 &  22.3 & 43.5 & 24.8  &  17.0 &  30.9 & 14.1 \\\\  \n\n\\ with Graph-in-Graph  & \\bf 27.1 & \\bf 52.0 & \\bf 36.9 & \\bf 25.2 & \\bf 45.7 & \\bf 26.7 & \\bf 17.8 & \\bf 32.5 & \\bf 17.4 \\\\   \\midrule \n\n\nTransformer \\cite{Vaswani2017Transformer} & 26.7 & 49.6 & 33.5 &  20.9 & 41.6 &  23.4 &  16.1 &  31.4 & 15.2 \\\\  \n\n\\ with Graph-in-Graph & \\bf 30.4 & \\bf 56.3 & \\bf 38.3 & \\bf 24.5 & \\bf 46.1 & \\bf 27.0 & \\bf 17.5 & \\bf 33.7 & \\bf 17.9 \\\\\n\n\n\n\\bottomrule\n\\end{tabular}\n\\end{table*}",
            "tab:ablation": "\\begin{table*}[t]\n\\centering\n\\caption{Ablation study of our approach, which includes the Gene Graph and Term Graph encoders, on the Molecular Function, Biological Process, and Cellular Component datasets. PN and CN denote the Parent Nodes and Child Nodes, respectively. Higher scores are better in all columns. Full Model represents the baseline model with the Graph-in-Graph. As we can see, each component of our approach boosts the performances of the baseline models across all metrics.}\n\\label{tab:ablation}\n\\setlength{\\tabcolsep}{4pt}   \n\\begin{tabular}{@{}c c c c c c c c c c c c c@{}}\n\\toprule \n\n\\multirow{2}{*}[-3pt]{Methods} & \\multirow{2}{*}[-2pt]{\\begin{tabular}[c]{@{}c@{}} Gene  \\\\ Graph \\end{tabular}} &  \\multicolumn{2}{c}{Term Graph} & \\multicolumn{3}{c}{Dataset: Molecular Function} & \\multicolumn{3}{c}{Dataset: Biological Process} & \\multicolumn{3}{c}{Dataset: Cellular Component}  \\\\ \\cmidrule(lr){3-4} \\cmidrule(lr){5-7} \\cmidrule(lr){8-10} \\cmidrule(lr){11-13}\n& & PN & CN & METEOR & ROUGE-L & BLEU & METEOR & ROUGE-L & BLEU & METEOR & ROUGE-L & BLEU \\\\\n\\midrule [\\heavyrulewidth]\n\nSeq2Seq  & & & &  20.5 & 44.7 & 26.3 & 15.1 & 36.8 & 17.6 & 12.9 & 28.3 & 11.7  \\\\    \n\n(a) & $\\surd$  & & & 23.6 & 46.3 & 29.7 & 16.5 & 37.1 & 18.4 & 13.7 & 29.0 & 12.5 \\\\\n\n(b) & $\\surd$ & $\\surd$ & & 24.1 & 47.5 & 31.0 & 17.5 & 37.9 & 19.5 & 14.2 & 29.1 & 12.7 \\\\\n\n(c) & $\\surd$ & & $\\surd$ & 27.2 & 50.8 & 34.0 & 20.3 & 39.4 & 22.9 & 15.1 & 30.8 & 14.2 \\\\\n\nFull Model & $\\surd$ & $\\surd$ & $\\surd$ & \\bf 27.5 & \\bf 51.2 & \\bf 34.8 & \\bf 21.0 & \\bf 40.3 & \\bf 23.7 & \\bf 15.3 & \\bf 31.6 & \\bf 14.6 \\\\\n\n\\midrule \n\nTransformer &  &  &  & 26.7 & 49.6 & 33.5 &  20.9 & 41.6 &  23.4 &  16.1 &  31.4 & 15.2 \\\\  \n\n(a) & $\\surd$ &  & & 27.3 & 51.2 & 34.4 & 21.8 & 42.9 & 25.0 & 16.6 & 32.1 & 16.3 \\\\\n\n(b) & $\\surd$ & $\\surd$ & & 27.5 & 52.3 & 35.1 & 22.0 & 43.5 & 25.3 & 16.4 & 32.1 & 15.8 \\\\\n\n(c) & $\\surd$ & & $\\surd$ & 29.8 & 55.7 & 38.0 & 24.1 & 45.3 & 26.2 & 17.3 & 33.3 & 17.5 \\\\\n\nFull Model & $\\surd$ & $\\surd$ & $\\surd$ & \\bf 30.4 & \\bf 56.3 & \\bf 38.3 & \\bf 24.5 & \\bf 46.1 & \\bf 27.0 & \\bf 17.5 & \\bf 33.7 & \\bf 17.9 \\\\\n\n\\bottomrule\n\\end{tabular}\n\\end{table*}",
            "tab:ood": "\\begin{table*}[t]\n\\centering\n\\caption{Out-of-Domain analysis on the Transformer (Baseline) and the Transformer with Graph-in-Graph model (Ours). The principal diagonal reports the in-domain results, and the off-diagonal reports the out-of-domain results. The ($\\downarrow$ Number) denotes the decreased performance of out-of-domain results compared to in-domain results.}\n\\label{tab:ood}\n\\setlength{\\tabcolsep}{3pt}   \n\\begin{tabular}{@{}l l c c c|c c c|c c c@{}}\n\\toprule\n\n\\multirow{2}{*}[-2pt]{\\begin{tabular}[c]{@{}l@{}} Training  \\\\ Dataset \\end{tabular}} & \\multirow{2}{*}[-3pt]{Methods} & \\multicolumn{3}{c|}{Dataset: Molecular Function} & \\multicolumn{3}{c|}{Dataset: Biological Process} & \\multicolumn{3}{c}{Dataset: Cellular Component}  \\\\ \\cmidrule(lr){3-5} \\cmidrule(lr){6-8} \\cmidrule(lr){9-11}\n& & METEOR & ROUGE-L & BLEU & METEOR & ROUGE-L & BLEU & METEOR & ROUGE-L & BLEU \\\\\n\\midrule [\\heavyrulewidth]\n\n\n\n\\multirow{2}{*}{\\begin{tabular}[c]{@{}l@{}} Molecular  \\\\ Function \\end{tabular}} & Baseline & 26.7 ($-$) & 49.6 ($-$) & 33.5 ($-$) & 3.5 ($\\downarrow$17.4) & 4.1 ($\\downarrow$37.5) & 1.3 ($\\downarrow$22.1) & 5.8 ($\\downarrow$10.3) & 11.3 ($\\downarrow$20.1) & 2.7 ($\\downarrow$12.5)  \\\\  \n\n& Ours & \\textbf{30.4} ($-$) &\\textbf{56.3} ($-$) & \\textbf{38.3} ($-$) & \\textbf{4.4} ($\\downarrow$20.1) & \\textbf{5.8} ($\\downarrow$40.3) & \\textbf{2.9} ($\\downarrow$24.1) & \\textbf{6.7} ($\\downarrow$10.8) & \\textbf{15.0} ($\\downarrow$18.7) & \\textbf{5.9} ($\\downarrow$12.0)  \\\\ \\midrule\n \n \n \n \n\\multirow{2}{*}{\\begin{tabular}[c]{@{}l@{}} Biological  \\\\ Process \\end{tabular}} & Baseline & 14.0 ($\\downarrow$12.7) & 25.5 ($\\downarrow$24.1) & 13.5 ($\\downarrow$20.0) & 20.9 ($-$) & 41.6 ($-$) & 23.4 ($-$) & 11.8 ($\\downarrow$4.3) & 22.2 ($\\downarrow$9.2) & 10.3 ($\\downarrow$4.9)\\\\\n\n& Ours & \\textbf{20.3} ($\\downarrow$10.1) & \\textbf{37.1} ($\\downarrow$19.2) & \\textbf{25.0} ($\\downarrow$13.3) & \\textbf{24.5} ($-$) & \\textbf{46.1} ($-$) & \\textbf{27.0} ($-$) & \\textbf{15.6} ($\\downarrow$1.9) & \\textbf{28.8} ($\\downarrow$4.9) & \\textbf{15.5} ($\\downarrow$2.4) \\\\ \\midrule\n\n\n\n\n\\multirow{2}{*}{\\begin{tabular}[c]{@{}l@{}} Cellular  \\\\ Component \\end{tabular}} & Baseline  & \\ \\ 7.7 ($\\downarrow$19.0) & 12.4 ($\\downarrow$37.2) & \\ \\ 4.8 ($\\downarrow$28.7) & 10.7 ($\\downarrow$10.2) & 15.3 ($\\downarrow$26.3) & 7.5 ($\\downarrow$15.9) & 16.1  ($-$) & 31.4  ($-$)& 15.2 ($-$)  \\\\\n\n& Ours & \\textbf{12.6} ($\\downarrow$17.8) & \\textbf{17.6} ($\\downarrow$38.7) & \\textbf{10.2} ($\\downarrow$28.1) & \\textbf{13.4} ($\\downarrow$11.1) & \\textbf{21.5} ($\\downarrow$24.6) & \\textbf{9.9} ($\\downarrow$17.1) & \\textbf{17.5} ($-$) & \\textbf{33.7} ($-$) & \\textbf{17.9} ($-$) \\\\ \n\n\\bottomrule\n\\end{tabular}\n\\end{table*}"
        },
        "figures": {
            "fig:introduction": "\\begin{figure}[t]\n\\centering\n\\includegraphics[width=1\\linewidth]{introduction.pdf}\n\\caption{Examples of the GO term “microtubule motor activity” and its associated GO description. The term contains a set of genes DNAH2, KIF2B, DNAH6..., which are annotated with the gene text, and the GO description provides the biological function of combined genes. The GO structure around the term of interest is organized hierarchically, with other terms shown in orange ovals.}\n\\label{fig:introduction}\n\\end{figure}",
            "fig:framework": "\\begin{figure*}[t]\n\n\\centering\n\\includegraphics[width=1\\linewidth]{framework.pdf}\n\\caption{Illustration of our Graph-in-Graph network. Specifically, we first construct a gene graph for each term to model the relationships between genes that share a specific term and further construct a tree-like term graph to model the relationships between the GO term nodes, which includes both the parent nodes (PN) and child nodes (CN). Thus, the Graph-in-Graph stands for Gene Graph-in-Term Graph. Then, our approach introduces a gene-graph encoder and a term-graph encoder to capture the structural information of Gene Ontology (GO).}\n\\label{fig:framework}\n\\end{figure*}",
            "fig:example": "\\begin{figure*}[t]\n\n\\centering\n\\includegraphics[width=1\\linewidth]{example.pdf}\n\\caption{Examples of the generated descriptions of GO from baselines and from our approach (i.e., baselines with Graph-in-Graph). We also visualize the attended term nodes with top-2 attention weights in the attention mechanism of the decoder and their corresponding descriptions. Please view in color. The Blue colored text denotes the examples when our approach generates better descriptions than the baseline, while Red denotes unfavorable descriptions. Underlined text denotes alignment between the ground truth text and generated/attended text.}\n\\label{fig:example}\n\\end{figure*}"
        },
        "equations": {
            "eq:1": "\\begin{equation}\n\\label{eq:definition}\n\\text{Term Encoder}  : T \\to I ;\n\\quad\n\\text{Description Decoder} : I \\to S .\n\\end{equation}",
            "eq:2": "\\begin{align}\n\\label{eq:loss}\nL_{\\text{XE}}(\\theta)=-\\sum_{t=1}^{N_\\text{S}} \\log \\left(p_{\\theta}\\left(y_{t}^{*} \\mid y_{1: t-1}^{*}\\right)\\right).\n\\end{align}",
            "eq:3": "\\begin{align}\n\\label{eq:formulation}\n\\text{Graph Construction} &: T \\to \\{\\mathcal{G}_\\text{gene}, \\mathcal{G}_\\text{term}\\}  \\nonumber \\\\\n\\text{Graph-in-Graph Network}  &:  \\{\\mathcal{G}_\\text{gene}, \\mathcal{G}_\\text{term}\\} \\to I \\nonumber   \\\\\n\\text{Description Decoder} &: I \\to S . \n\\end{align}",
            "eq:4": "\\begin{equation}\n\\hat{v}_{i}={v}_{i}+\\text{ReLU}\\left(\\sum\\nolimits_{j=1}^{N_\\text{gene}} {e}_{i, j} {W}_{v} {v}_{j}\\right) ,\n\\end{equation}",
            "eq:5": "\\begin{align}\n\\label{eqn:gene_graph}\n\\hat{V} &= \\text{Gene-Graph-Encoder}(\\mathcal{G}_\\text{gene}) \\nonumber \\\\\n& = \\{\\hat{v}_1,\\hat{v}_2,\\dots,\\hat{v}_{N_\\text{gene}}\\} \\in \\R^{N_\\text{gene} \\times d}.   \n\\end{align}",
            "eq:6": "\\begin{equation}\n\\hat{v}'_{i}={v}'_{i}+\\text{ReLU}\\left(\\sum\\nolimits_{j=1}^{N_\\text{term}} {e}'_{i, j} {W}'_{v} {v}'_{j}\\right) ,\n\\end{equation}",
            "eq:7": "\\begin{align}\n\\label{eqn:term_graph}\n\\hat{V}' &= \\text{Term-Graph-Encoder}(\\mathcal{G}_\\text{term}) \\nonumber \\\\\n& = \\{\\hat{v}'_1,\\hat{v}'_2,\\dots,\\hat{v}'_{N_\\text{term}}\\} \\in \\R^{N_\\text{term} \\times d}.   \n\\end{align}",
            "eq:8": "\\begin{align}\n&h_t = \\text{MHA}(x_t, x_{1:t}, x_{1:t}) \\label{eq:MHA} \\\\\n&h'_t = \\text{MHA}(h_t, I, I) \\\\\n&y_{t} \\sim p_{t} =\\text{softmax}(\\text{FFN}(h'_t)\\text{W}_p + \\text{b}_p) \\label{eq:FFN} ,\n\\end{align}",
            "eq:9": "\\begin{align}\n&\\text{Att}_i(Q,K,V) = \\text{softmax}\\left(\\frac{Q\\text{W}_i^\\text{Q}(K\\text{W}_i^\\text{K})^T}{\\sqrt{{d}_{n}}}\\right)V\\text{W}_i^\\text{V} \\nonumber \\\\\n& \\text{MHA}(Q,K,V) = [\\text{Att}_1(Q,K,V); \\dots; \\text{Att}_n(Q,K,V)]\\text{W}^\\text{O} ,\n\\end{align}",
            "eq:10": "\\begin{align}\n\\text{FFN}(x) = \\max(0,x\\text{W}_\\text{f}+\\text{b}_\\text{f})\\text{W}_\\text{ff}+\\text{b}_\\text{ff}   \n\\end{align}"
        }
    }
}