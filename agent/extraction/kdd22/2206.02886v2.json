{
    "meta_info": {
        "title": "Graph Rationalization with Environment-based Augmentations",
        "abstract": "Rationale is defined as a subset of input features that best explains or\nsupports the prediction by machine learning models. Rationale identification\nhas improved the generalizability and interpretability of neural networks on\nvision and language data. In graph applications such as molecule and polymer\nproperty prediction, identifying representative subgraph structures named as\ngraph rationales plays an essential role in the performance of graph neural\nnetworks. Existing graph pooling and/or distribution intervention methods\nsuffer from lack of examples to learn to identify optimal graph rationales. In\nthis work, we introduce a new augmentation operation called environment\nreplacement that automatically creates virtual data examples to improve\nrationale identification. We propose an efficient framework that performs\nrationale-environment separation and representation learning on the real and\naugmented examples in latent spaces to avoid the high complexity of explicit\ngraph decoding and encoding. Comparing against recent techniques, experiments\non seven molecular and four polymer real datasets demonstrate the effectiveness\nand efficiency of the proposed augmentation-based graph rationalization\nframework.",
        "author": "Gang Liu, Tong Zhao, Jiaxin Xu, Tengfei Luo, Meng Jiang",
        "link": "http://arxiv.org/abs/2206.02886v2",
        "category": [
            "cs.LG",
            "stat.ML"
        ],
        "additionl_info": "Accepted by KDD 2022"
    },
    "latex_extraction": {
        "content": {
            "section 1": {
                "name": "Introduction",
                "content": "\n\\label{sec:introduction}\n\n\nGraph property prediction has attracted attention in different research fields like chemoinformatics and bioinformatics where small molecules are represented as labelled graphs of atoms \\cite{hu2020open,zhou2020data,guo2021few}.\nBesides, materials informatics for \\emph{polymers} has emerged in recent years from property prediction to inverse design \\cite{kim2018polymer,chen2021polymer}.\nPolymer are materials consisting of macromolecules, composed of many repeating units. They are ubiquitous in applications ranging from plastic cups and electronics to aerospace structures.\nNew engineering and environmental challenges demand that polymers possess unconventional properties such as high-temperature stability, excellent thermal conductivity, and biodegradability \\cite{ma2019evaluating,wei2021thermal}.\nIt's important to integrate data science and machine learning into polymer informatics on the tasks of graph classification and regression.\n\nTo automate feature extraction from graph data, graph neural network (GNN) models learn node representations through nonlinear functions and layers that aggregate information from node neighborhood \\cite{kipf2017semi,velivckovic2018graph,hamilton2017inductive,zhang2020deep,wu2020comprehensive}. Graph pooling is a central component of the GNN architecture that learns a cluster assignment for nodes and passes cluster nodes and their representations to the next layer \\cite{ying2018hierarchical,lee2019self}. The final layer returns the representations of entire graphs. Despite the advances of various GNN models, the limitation of data size makes them easily fall into \\emph{over-fitting and poor generalizability}. For example, the number of graphs in molecule benchmark datasets is usually in the range of 1,000 and 10,000; and the size of polymer datasets is even smaller (e.g., $\\sim$600) \\cite{ma2020pi1m}.\n\nRationalization techniques have been designed to solve the above problem in vision and language data, where the rationale is defined as a subset of input features that best explains or supports the prediction by machine learning models \\cite{chang2020invariant,arjovsky2019invariant,rosenfeld2021risks}.\nHowever, graph rationalization has not been extensively studied, which aims at identifying representative subgraph structures for accurate and interpretable graph property prediction.\nRelated work mainly focused on advancing graph pooling methods, but cluster assignment could not reflect the most essential part that led to accurate prediction \\cite{mesquita2020rethinking,gao2021graph}.\nA very recent technique named \\dir \\cite{wu2022discovering} employed two GNN modules to discover invariant graph rationales: one module separates each input graph into a rationale subgraph and an environment subgraph; the other is a graph property predictor based on the rationale subgraph. As shown at the top in Figure \\ref{fig:idea}, given graph $g_i$, the separator $f_{sep}$ identifies rationale $g^{(r)}_i$, and the predictor $f_{pred}$ gives label $\\hat{y}^{(r)}_i$ based on the rationale. \\dir conducted interventions on training distribution to improve the invariance. Unfortunately, when the data size was small, $f_{sep}$ could hardly find good rationales, as reported in our later experiments.\n\n\\vspace{0.05in}\nIn this work, we make the first attempt to enhance graph rationalization by graph data augmentations. Existing augmentation methods were mainly heuristic modification of graph structure, which could not directly support the identification of graph rationales \\cite{rong2019dropedge,wang2020graphcrop,wang2020nodeaug,zhao2021data}. We present two augmentation methods based on \\emph{environment subgraphs} that are the remaining parts in the graph after rationale identification. First, rationales are used to train the property predictor, which can be considered as graph examples augmented by \\emph{environment removal}.\nSecond, we replace the environment of input graph with the environment of another graph in the batch:\nto generate an augmented example: this augmentation method is called \\emph{environment replacement}.\nThe idea is that the rationale can be accurately identified and/or separated from the input graph when the augmented examples are expected to have the same label of the input graph example.\n\nFigure \\ref{fig:idea} presents the idea of generating virtual data for small datasets via data augmentations. Suppose we have rationale $g^{(r)}_i$ separated from input graph $g_i$. We use the same GNN-based separator to find environment subgraph $g^{(e)}_j$ from another graph $g_j$ in the batch.\nThe example augmented by environment replacement is denoted by $g_{(i,j)}=g^{(r)}_i \\cup g^{(e)}_j$. The model is trained on this example to predict label $\\hat{y}_{i,j}$ to be the same as $y_i$ that is the observed label of $g_i$.\nWe compute two losses on the augmented examples, $\\mathcal{L}_{rem}$ and $\\mathcal{L}_{rep}$ (``rem'' for removal and ``rep'' for replacement), and jointly optimize $f_{sep}$ and $f_{pred}$ by their combination.\n\nThe key challenge in the idea implementation is the high computational complexity of decoding for \\emph{explicit graph forms} of rationales, environment subgraphs, and augmented examples, as well as encoding them for representation learning and property prediction.\nMoreover, it is scientifically and technically difficult to explicitly combine rationale $g^{(r)}_i$ and environment $g^{(e)}_j$ from different graphs, as shown in the three augmented examples $g_{(i,j)}$ in Figure~\\ref{fig:idea}. To address these challenges, we hypothesize that the \\emph{contextualized representations of nodes} play a significant role in rationales, environment subgraphs, and augmented graphs. \n% As a result, we can create the representations of all these objects from \\emph{one latent space} that is created from the input graphs.\nThus, we create the representations of all these objects from \\emph{one latent space}.\n\nIn this paper, we propose a novel, efficient framework of \\underline{G}raph \\underline{R}ationalization enhanced by \\underline{E}nvironment-based \\underline{A}ugmentations (\\method).\nIt performs rationale-environment separation and representation learning on the real and augmented examples in  one latent space to avoid the high complexity of explicit subgraph decoding and encoding.\nFigure~\\ref{fig:implementation} presents the architecture of \\method with a few steps.\nFirst, it employs $\\text{GNN}_1$ and $\\text{MLP}_1$ models to infer the probability of nodes being classified into rationale subgraph $\\mathbf{m}$.\nSecond, it employs $\\text{GNN}_2$ to create contextualized node representations $\\mathbf{H}$.\nThen, it \\emph{directly} creates the representation vectors of rationales, environment subgraphs and environment-replaced examples, denoted by $\\mathbf{h}^{(r)}_i$, $\\mathbf{h}^{(e)}_i$, and $\\mathbf{h}_{(i,j)}$, respectively. Note that \\dir \\cite{wu2022discovering} used a GNN to generate a matrix of masks that indicate the importance of edges and then select the top-$K$ edges with the highest masks to construct the rationale. Then it had to run GNNs on all the explicit graph objects.\nInstead, our \\method uses $\\mathbf{m}$ and $\\mathbf{H}$ to compute the representation vectors of the artificial graphs.\n\nWe conduct experiments on seven molecule and four polymer datasets. Results demonstrate the advantages of \\method over baselines. For example, it significantly reduces the prediction error on oxygen permeability of polymer membrane with only 595 training examples. The oxygen permeability defines how easily oxygen passes through a particular material. Accurate prediction will speed up material discovery for healthcare and energy utilization.\n\nThe main contributions of this work are summarized below:\n\\begin{compactitem}\n    \\item the first attempt to improve graph rationale identification using data augmentations, including environment replacement, for accurate and interpretable property prediction;\n    \\item a novel and efficient framework that performs rationale-environment separation and representation learning on real and augmented examples in one latent space;\n    \\item extensive experiments on more than ten molecule and polymer datasets to demonstrate the effectiveness and efficiency of the proposed framework.\n\\end{compactitem}\n"
            },
            "section 2": {
                "name": "Related Work",
                "content": "\n\\label{sec:related}\n\n\nThere are four research topics related to the proposed work. We briefly present their recent studies and compare with ours.\n\n",
                "subsection 2.1": {
                    "name": "Graph Property Prediction",
                    "content": "\n\nLearning representations and predicting properties of entire graphs is important for chemistry, biology, and material sciences, where molecule and polymer data can be structured as graphs \\cite{hu2020open}.\nWhen RDKit is widely used to generate molecular fingerprints \\cite{landrum2013rdkit}, \ngraph neural networks (GNNs) such as Graph Convolutional Network (GCN)~\\cite{kipf2017semi}, Graph Attention Networks (GAT)~\\cite{velivckovic2018graph}, and \\textsc{GraphSAGE}~\\cite{hamilton2017inductive} have automated representation learning with nonlinear functions from graph data~\\cite{zhang2020deep,wu2020comprehensive,ma2021unified,wang2020calendar,wang2021dynamic,wang2021modeling,wang2021modeling_tkde,zhao2021synergistic,jiang2022federated}.\n\nIn the GNN models, graph pooling is a central component of their architectures as a cluster assignment function to find local patches in graphs \\cite{mesquita2020rethinking}.\nFor example, \\textsc{DiffPool} presented a differentiable graph pooling module that learned a differentiable soft cluster assignment for nodes at each layer of a deep GNN, mapped nodes to a set of clusters, and then formed the coarsened input for the next GNN layer \\cite{ying2018hierarchical}. Lee et al. proposed self-attention graph convolution that allows graph pooling to consider both node features and graph topology \\cite{lee2019self}. Gao and Ji proposed graph pooling and unpooling operations in Graph \\textsc{U-Nets} \\cite{gao2021graph}. Xu et al. presented a theoretical framework for analyzing the representational power of GNNs through the graph pooling functions \\cite{xu2018how}. While graph pooling identifies soft clusters that effectively aggregate information from nodes \\cite{ying2019gnnexplainer}, our work identifies representative subgraph structures for accurate and interpretable predictions of GNN models.\n\n% \\vspace{-0.3in}\n"
                },
                "subsection 2.2": {
                    "name": "Graph Rationalization",
                    "content": "\n\nMost rationalization techniques identify the small subset of input features by maximizing the predictive performance based only on the subset itself, called rationale. To rule out spurious correlation between the input features and the output, Chang et al. proposed the concept of invariant rationalization by modeling different environments as non-causal input to train predictors \\cite{chang2020invariant}. Rosefeld et al. offered formal guarantees for improvement of the invariant causal prediction on out-of-distribution generalization \\cite{arjovsky2019invariant, rosenfeld2021risks}.\n\nBy introducing causal modeling into GNN optimization, Fan et al. presented a causal representation framework for GNN models to perform on out-of-distribution graphs \\cite{fan2021generalizing}. Li et al. proposed \\oodgnn that employed a novel nonlinear graph representation decorrelation method that used random Fourier features to encourage GNNs to eliminate the statistical dependence between relevant and irrelevant graph representations \\cite{li2021ood}.\nVery recently, Wu et al. proposed the first work called \\dir to approach causal rationales for GNNs to improve the interpretability and predictive performance on out-of-distribution data \\cite{wu2022discovering}. \\dir conducted interventions on the training distribution to create multiple distributions. Unfortunately, distribution intervention might not be the optimal solution to graph rationale identification. Also, the edge selection method suffers from high computational complexity for rationale creation. Moreover, the studies were mainly performed on synthetic data.\nIn this paper, we make the first attempt to define ``environment'' in graph data, augment data examples by environment replacement, develop an efficient framework, and conduct experiments on a large set of real molecule and polymer data. We find that augmentation-enhanced graph rationalization is more effective than \\dir.\n\n"
                },
                "subsection 2.3": {
                    "name": "Graph Data Augmentation",
                    "content": "\n\nGraph data augmentation (GDA) techniques~\\cite{zhao2022graph,zhao2021counterfactual,zhao2021action,chen2020measuring} have improved the performance on semi-supervised node classification, such as \\textsc{DropEdge} \\cite{rong2019dropedge}, \\textsc{NodeAug} \\cite{wang2020nodeaug}, and \\textsc{GAug} \\cite{zhao2021data}.\nBesides, many GDA techniques have been designed for graph-level tasks, aiming at creating new training examples by modifying input graph data examples. For example, \\textsc{GraphCrop} regularized GNN models for better generalization by cropping subgraphs or motifs to simulate real-world noise of sub-structure omission \\cite{wang2020graphcrop}.\n\\textsc{M-Evolve} presented two heuristic algorithms including random mapping and motif-similarity mapping to generate weakly labeled data for small datasets \\cite{zhou2020data}.\n\\textsc{MH-Aug} adopted the Metropolis-Hastings algorithm to create augmented graphs from an explicit target distribution for semi-supervised learning \\cite{park2021metropolis}.\nMeanwhile, graph contrastive learning learned unsupervised representations of graphs using graph data augmentations to incorporate various priors~\\cite{you2020graph}. \\citet{zhu2021graph} proposed adaptive augmentation that incorporated various priors for topological and semantic aspects of graphs. Specifically, it designed augmentation schemes based on node centrality measures to highlight important connective structures and corrupted node features by adding noise to unimportant node features. A comprehensive survey of GDA is given by \\citet{zhao2022graph}.\n\n"
                },
                "subsection 2.4": {
                    "name": "Graph Learning on Polymer Data",
                    "content": "\n\nMaterial informatics uses machine learning approaches to fast screen material candidates or generate new materials meeting certain criteria, so as to reduce the time of material development. When most related research performed on molecule data \\cite{guo2021few}, polymer researchers have developed a benchmark database and developed machine learning techniques for polymer data, called polymer embeddings \\cite{kim2018polymer,chen2021polymer}. They can be used to perform several polymer informatics regression tasks for density, glass transition temperature, melting temperature, and dielectric constants \\cite{ma2019evaluating,ma2020pi1m,wei2021thermal}.\n\n"
                }
            },
            "section 3": {
                "name": "Problem Definition",
                "content": "\n\\label{sec:problem}\n\\paragraph{Graph Property Prediction}\nLet $g = (\\mathcal{V}, \\mathcal{E})$ be a graph of $N$ nodes and $M$ edges, where $\\mathcal{V}$ is the set of nodes (e.g., atoms) and $\\mathcal{E} \\subseteq \\mathcal{V} \\times \\mathcal{V}$ is the set of edges (e.g., bonds between atoms). We use $y \\in \\mathcal{Y}$ to denote the graph-level property of $g$, where $\\mathcal{Y}$ is the value space. It can have a categorical or numerical value, corresponding to the task of classification or regression, respectively.\n\nA graph property predictor $f_{pred}$ takes a graph $g$ as input and predicts its label $\\hat{y}$. Specifically, a GNN-based predictor employs a GNN encoder to generate node representations $\\mathbf{H}$ from $g$:\n\\begin{equation}\n\\label{eq:gnn}\n    % \\mathbf{H} = \\begin{bmatrix}\n    % - \\\\\n    % \\vec{h}_v \\\\\n    % -\n    % \\end{bmatrix}_{v \\in \\mathcal{V}}\n    % = \\text{GNN}(g) \\in \\mathbb{R}^{N \\times d},\n    \\mathbf{H} = \\begin{bmatrix}\n    \\cdots, \\vec{h}_v, \\cdots\n    \\end{bmatrix}_{v \\in \\mathcal{V}}^\\top\n    = \\text{GNN}(g) \\in \\mathbb{R}^{N \\times d},\n\\end{equation}\nwhere $\\vec{h}_v \\in \\mathbb{R}^d$ is the representation vector of node $v$ in graph $g$. GNN encoder $\\text{GNN}(\\cdot)$ can be chosen as \\gcn \\cite{kipf2017semi} or \\gin \\cite{xu2018how}.\n\nOnce the node representations are ready, a multilayer perceptron (MLP) can project them into a one-dimensional space to obtain a scalar for each node as $m_v = \\text{MLP}(\\vec{h}_v).$\n% \\begin{equation}\n% \\label{eq:mlp_v}\n%     m_v = \\text{MLP}(\\vec{h}_v).\n% \\end{equation}\nAs we are more interested in graph-level classification or regression, we first use a readout operator (e.g., average pooling) to get the graph representation $\\mathbf{h}$ and then apply a MLP to project it to a graph label:\n\\begin{equation}\n\\label{eq:readout_and_mlp_g}\n    \\mathbf{h} = \\text{READOUT}(\\mathbf{H}) \\in \\mathbb{R}^{d}, \\quad \\hat{y} = \\text{MLP}(\\mathbf{h}) \\in \\mathcal{Y}.\n\\end{equation}\n% and then we apply a MLP to project it to a graph label:\n% \\begin{equation}\n% \\label{eq:mlp_g}\n%     \\hat{y} = \\text{MLP}(\\mathbf{h}) \\in \\mathcal{Y}.\n% \\end{equation}\n\n\\paragraph{Graph Rationalization}\nFollowing the existing literature on graph rationalization~\\cite{ying2018hierarchical,lee2019self,gao2021graph,fan2021generalizing,wu2022discovering} and GNN explanation~\\cite{ying2019gnnexplainer}, we use rationale $g^{(r)} = (\\mathcal{V}^{(r)}, \\mathcal{E}^{(r)})$ to indicate the causal subgraph of the property $y$, where $g^{(r)}$ is a subgraph of $g$ such that $\\mathcal{V}^{(r)} \\subseteq \\mathcal{V}$ and $\\mathcal{E}^{(r)} \\subseteq \\mathcal{E}$. We use $g^{(e)}$ to denote the environment subgraph, which is the complementary subgraph of $g^{(r)}$ in $g$.\nIn contrast with the rationale subgraph $g^{(r)}$, the environment subgraph $g^{(e)}$ corresponds to the non-causal part of the graph data, which has no causal relationship with the target graph property~\\cite{chang2020invariant,wu2022discovering}.\n\nLet $f_{sep}$ be a GNN-based graph rationalization model that splits an input graph $g$ into a rationale subgraph $g^{(r)}$ and an environment subgraph $g^{(e)}$. Existing graph rationalization methods used only the rationale subgraph as input for property prediction~\\cite{lee2019self,ying2018hierarchical,gao2021graph,wu2022discovering}:\n\\begin{equation}\n\\label{eq:f_pred}\n    \\hat{y} = \\hat{y}^{(r)} = f_{pred} \\big(g^{(r)}\\big),\n\\end{equation}\nwhere $f_{pred}(\\cdot) = \\text{MLP}(\\text{READOUT}(\\text{GNN}(\\cdot)))$ and $\\hat{y}^{(r)}$ denotes the predicted property of the rationale subgraph $g^{(r)}$.\n\nUnfortunately, when suffering from lack of training examples, these methods chose to discard environment subgraphs at the training stage. \nIn the next section, we present a novel framework showing our idea that environment subgraphs can provide natural noise through data augmentation to improve graph rationalization.\n% Our idea is that the environment subgraphs can provide natural noise through data augmentation to improve graph rationalization.\n% In the next section, we present a novel framework to implement this idea.\n"
            },
            "section 4": {
                "name": "Proposed Framework",
                "content": "\n\\label{sec:method}\nIn this section, we introduce a novel graph rationalization framework \\method. The key idea is to augment the rationale subgraph by removing its own environment subgraph and/or combining it with different environment subgraphs. \\cref{fig:implementation} shows the overall architecture of \\method:\n$\\text{GNN}_1$ and $\\text{MLP}_1$ first separate input graph $g$ into rationale subgraph $g^{(r)}$ and environment subgraph $g^{(e)}$;\n% using Eq.(\\ref{eq:gnn}-\\ref{eq:mlp_v}); \n$\\text{GNN}_2$ next generates node representations $\\mathbf{H}$ using Eq.(\\ref{eq:gnn}); \nthe rationale subgraph's representation $\\mathbf{h}^{(r)}_i$ is then combined with different environment subgraph's representations $\\mathbf{h}^{(e)}_j$ for the augmented graph's representations $\\mathbf{h}_{(i,j)}$; \nfinally, both $\\mathbf{h}^{(r)}_i$ and $\\mathbf{h}_{(i,j)}$ are fed into $\\text{MLP}_2$ for the prediction of $y_i$ during training as Eq.(\\ref{eq:readout_and_mlp_g}).\n\n",
                "subsection 4.1": {
                    "name": "Rationale-Environment Separation",
                    "content": " \n\\label{sec:gnnsep}\nTo separate input graph $g$ into rationale subgraph $g^{(r)}$ and environment subgraph $g^{(e)}$, the rationale-environment separator consists of two components: a GNN encoder ($\\text{GNN}_1$) that generates latent node representations and a MLP decoder ($\\text{MLP}_1$) that maps the node representations to a mask vector $\\mathbf{m} \\in {(0, 1)}^{N}$ on the nodes in the set $\\mathcal{V}$. $m_v = Pr(v \\in \\mathcal{V}^{(r)})$ is the node-level mask that indicates the probability of node $v \\in \\mathcal{V}$ being classified into the rationale subgraph.\nThe mask can be on either a node or an edge~\\cite{wu2022discovering}. we choose to learn masks on the nodes to avoid the computational complexity of edge selection. Hence, $\\mathbf{m}$ can be calculated as\n\\begin{equation}\n\\label{eq:separator_enc_dec}\n    \\mathbf{m} = \\sigma(\\text{MLP}_1(\\text{GNN}_1(g))),\n\\end{equation}\nwhere $\\sigma$ denotes the sigmoid function. Based on $\\mathbf{m}$, we have $(\\mathbf{1}_{N} - \\mathbf{m})$ that indicates the probability of nodes being classified into the environment subgraph. $\\text{GNN}_1$ and $\\text{MLP}_1$ make up the GNN-based graph rationalization model $f_{sep}$ mentioned in \\cref{sec:problem}.\n\n\\method uses another GNN encoder to generate contextualized node representations $\\mathbf{H}$: $\\mathbf{H} = \\text{GNN}_2(g)$.\nWith $\\mathbf{m}$ and $\\mathbf{H}$, the rationale subgraph and environment subgraph can be easily separated in the \\emph{latent space}. Using sum pooling, we have \n\\begin{align}\n    \\label{eq:h_r}\n    \\mathbf{h}^{(r)} = \\mathbf{1}^{\\top}_N \\cdot (\\mathbf{m} \\times \\mathbf{H}), \\quad\n    % \\label{eq:h_e}\n    \\mathbf{h}^{(e)} = \\mathbf{1}^{\\top}_N \\cdot ((\\mathbf{1}_N - \\mathbf{m}) \\times \\mathbf{H}),\n\\end{align}\nwhere $\\mathbf{1}_N$ denotes the $N$-size column vector with all entries as 1, and $\\mathbf{h}^{(r)},\\mathbf{h}^{(e)} \\in \\mathbb{R}^{d}$ are the representation vectors of graph $g^{(r)}$ and $g^{(e)}$, respectively.\n\n"
                },
                "subsection 4.2": {
                    "name": "Environment-based Augmentations",
                    "content": "\n\\label{sec:env_aug}\n\nSuppose $g_1, g_2, \\dots, g_B$ are the input graphs in one batch for training, where $B$ is known as batch size.\nThe rationale-environment separator has generated the graph representations of rationale and environment subgraphs for each graph $g_i$. That is, we have\n$\\{(\\mathbf{h}_1^{(r)}, \\mathbf{h}_1^{(e)}), (\\mathbf{h}_2^{(r)}, \\mathbf{h}_2^{(e)}), \\dots, (\\mathbf{h}_B^{(r)}, \\mathbf{h}_B^{(e)})\\}$. We design environment-based augmentations in the latent space of graph representations.\n\n",
                    "subsubsection 4.2.1": {
                        "name": "Environment Removal Augmentation",
                        "content": " \nAs graph rationalization aims to find the rationale subgraph which is regarded as the causal factor of graph property, the rationale itself should be good for property prediction. As in the graph pooling methods~\\cite{lee2019self,gao2021graph} and the graph rationalization as defined in \\cref{eq:f_pred}, the environment removal augmentation uses the rationale subgraph only for training the graph property predictor. That is, given the rationale subgraph representation $\\mathbf{h}_i^{(r)}$ of graph $g_i$, the predicted label is\n\\begin{equation}\n\\label{eq:mlp2_rem}\n\\hat{y}_{i}^{(r)} = \\text{MLP}_2 \\big(\\mathbf{h}_i^{(r)}\\big).\n\\end{equation}\n\n"
                    },
                    "subsubsection 4.2.2": {
                        "name": "Environment Replacement Augmentation",
                        "content": "\nAs aforementioned in \\cref{sec:problem}, the environment subgraphs can be viewed as natural noises on the rationale subgraphs. Hence, in order to enhance the model's robustness against the noise signal brought by the environment subgraphs, for each graph $g_i$, we combine its rationale subgraph $g_i^{(r)}$ not only with its own environment subgraph $g_i^{(e)}$, but also with all other environment subgraphs $g_j^{(e)}, j \\in \\{1, 2, \\dots, B\\} \\setminus \\{i\\}$ in the batch. By replacing the environment subgraph with other environment subgraphs in the batch, the environment replacement augmentation generates $B-1$ augmented data samples for each graph during training. As the environment replacement happens on the latent space, an aggregation function $\\text{AGG}(\\cdot, \\cdot)$ is used to combine the rationale subgraph representation $\\mathbf{h}_i^{(r)}$ and environment subgraph representation $\\mathbf{h}_j^{(e)}$. The aggregation function can be any combining/pooling functions such as concatenation, sum pooling, and max pooling. Taking the element-wise sum pooling as an example, the graph representation $\\mathbf{h}_{(i,j)}$ of a combined graph of rationale subgraph $g_i^{(r)}$ and environment subgraph $g_j^{(e)}$ can be calculated as below:\n\\begin{equation}\n\\label{eq:rat_env_agg}\n    \\mathbf{h}_{(i,j)} = \\text{AGG}\\big(\\mathbf{h}_i^{(r)}, \\mathbf{h}_j^{(e)}\\big) = \\mathbf{h}_i^{(r)} + \\mathbf{h}_j^{(e)}.\n\\end{equation}\n\nFor the graph representations $\\mathbf{h}_{(i,j)}$ generated by the environment replacement augmentation, the MLP property predictor is trained to predict $y_i$. That is,\n\\begin{equation}\n\\label{eq:mlp2_rep}\n    \\hat{y}_{(i,j)} = \\operatorname{MLP}_2 \\big(\\mathbf{h}_{(i,j)} \\big).\n\\end{equation}\n\n\n\nThe graph representations generated by both environment removal augmentation and environment replacement augmentation (i.e., $\\mathbf{h}_i^{(r)}$ and $\\mathbf{h}_{(i,j)}$) are fed into the same property predictor $\\text{MLP}_2$. The GNN-based property predictor $f_{pred}$ defined in \\cref{sec:problem} includes $\\text{MLP}_2$ and $\\text{GNN}_2$ that generates the contextualized node representation $\\mathbf{H}$.\n\n"
                    },
                    "subsubsection 4.2.3": {
                        "name": "Optimization",
                        "content": "\n\\label{sec:training}\nDuring training, the type of loss function on the observed graph property ($y_i$) and predicted labels ($\\hat{y}_{i}^{(r)}$ and $\\hat{y}_{(i,j)}$) depends on the type of the property label. For example, when the graph property $y$ has binary values in the binary classification task, we use the standard binary cross-entropy loss. When the graph property $y$ has real values in the graph regression task, we use the mean squared error (MSE) loss. Without loss of generality, suppose we focus on the binary classification task. Given a batch of $B$ graphs $g_1, g_2, \\dots, g_B$, the loss functions for each graph example $g_i$ and its label $y_i$ are defined as\n\\begin{align}\n    \\label{eq:loss_rem}\n    &\\mathcal{L}_{rem} = y_{i} \\cdot \\log \\hat{y}_{i}^{(r)} + \\left(1-y_{i}\\right) \\cdot \\log \\big(1-\\hat{y}_{i}^{(r)}\\big), \\\\\n    \\label{eq:loss_rep}\n    &\\mathcal{L}_{rep} = \\frac{1}{B} \\sum_{j=1}^B \\big( y_{i} \\cdot \\log \\hat{y}_{(i,j)} + \\left(1-y_{i}\\right) \\cdot \\log (1-\\hat{y}_{(i,j)}) \\big),\n\\end{align}\nwhere $\\mathcal{L}_{rem}$ is the loss for the examples created by environment removal augmentation, and $\\mathcal{L}_{rep}$ is the loss for the examples created by the environment replacement augmentation. \n\nMoreover, the following regularization term is used to control the size of the selected rationale subgraph:\n% \\begin{equation}\n% \\label{eq:loss_reg}\n%     \\mathcal{L}_{reg} = \\Big(\\frac{\\mathbf{1}^\\top_N \\mathbf{m}}{N} - \\gamma \\Big) + \\Big(\\frac{\\sum_{k: \\mathbf{m}_k > 0} 1}{N} - \\gamma \\Big),\n% \\end{equation}\n\\begin{equation}\n\\label{eq:loss_reg}\n    \\mathcal{L}_{reg} = \\Big|\\frac{\\mathbf{1}^\\top_N \\cdot \\mathbf{m}}{N} - \\gamma \\Big|,\n\\end{equation}\nwhere $\\gamma \\in [0,1]$ is a hyperparamter to control the expected size of the rationale subgraph $g^{(r)}$. We penalize the number of nodes in the rationale when it deviates from our expectations.\n% The node probabilities classified as the rationale should only exist on certain nodes with the expected size. Therefore, we use the first term to penalize the number of nodes in the rationale when it deviates from our expectations and the second term to encourage an uneven distribution for $\\mathbf{m}$. \n\n\n\n\n\nWe use the alternate training schema in~\\citet{chang2020invariant} to train \\method. That is, we iteratively train $f_{sep}$ ($\\text{GNN}_1$ and $\\text{MLP}_1$) and $f_{pred}$ ($\\text{GNN}_2$ and $\\text{MLP}_2$) for a fixed number of epochs $T_{sep}$ and $T_{pred}$, respectively.\nThe loss functions for training \\method are\n\\begin{align}\n    \\label{eq:loss_pred}\n    &\\mathcal{L}_{pred} = \\mathcal{L}_{{rem}} + \\alpha \\cdot \\mathcal{L}_{{{rep}}}, \\\\\n    \\label{eq:loss_sep}\n    &\\mathcal{L}_{sep} = \\mathcal{L}_{{rem}} + \\alpha \\cdot \\mathcal{L}_{{{rep}}} + \\beta \\cdot  \\mathcal{L}_{reg},\n\\end{align}\nwhere $\\mathcal{L}_{pred}$ in \\cref{eq:loss_pred} and $\\mathcal{L}_{sep}$ in \\cref{eq:loss_sep} are used to train $f_{sep}$ ($\\text{GNN}_1$ and $\\text{MLP}_1$) and $f_{pred}$ ($\\text{GNN}_2$ and $\\text{MLP}_2$), respectively. $\\alpha$ and $\\beta$ are hyperparameters that control the weights of $\\mathcal{L}_{rep}$ and $\\mathcal{L}_{reg}$, respectively. During inference, $\\hat{y}_{i}^{(r)}$ is used as the final predicted property of input graph $g_i$.\n\n"
                    }
                }
            },
            "section 5": {
                "name": "Experiments",
                "content": "\n\\label{sec:experiments}\nWe conduct experiments to answer the following questions:\n\\begin{compactitem}\n\\item \\textbf{Q1)} Effectiveness: Does the proposed \\method make more accurate prediction on molecule and polymer properties than existing graph classification/regression methods?\n\\item \\textbf{Q2)} Ablation study: Do the environment-based augmentations make positive effect on the performance?\n\\item \\textbf{Q3)} Case study: Based on domain expertise, are the polymer rationale examples identified by \\method representative? \n\\item \\textbf{Q4)} Efficiency: Does the \\emph{latent space-based design} for augmentations perform faster than explicit graph decoding and encoding? Can we empirically analyze the complexity?\n\\item \\textbf{Q5)} Sensitivity analysis: Is the performance of \\method sensitive to hyperparameters such as $\\alpha$, $\\beta$, and $\\text{AGG}(\\cdot)$?\n\\end{compactitem}\n\n\\vspace{-0.05in}\n",
                "subsection 5.1": {
                    "name": "Experimental Settings",
                    "content": "\n\n",
                    "subsubsection 5.1.1": {
                        "name": "Datasets",
                        "content": " \nWe conduct experiments on \\textbf{four} polymer datasets and \\textbf{seven} molecule datasets. \nThe statistics of the datasets are given in \\cref{tab:dataset_stat}, such as number of graphs and average size of graphs. The four datasets \\glassTemp, \\meltTemp, \\density, and \\oxygen are used to predict different properties of polymers such as \\emph{glass transition temperature} ($^\\circ$C), \\emph{polymer density} g/cm$^3$, \\emph{melting temperature} ($^\\circ$C), and \\emph{oxygen permeability} (Barrer). For all the polymer datasets, we randomly split by 60\\%/10\\%/30\\% for training, validation, and test. \nBesides polymer datasets, we use seven molecule datasets from the graph property prediction task on Open Graph Benchmark or known as OGBG. For all molecule datasets, we use the scaffold splitting procedure as OGBG adopted \\cite{hu2020open}. It attempts to separate structurally different molecules into different subsets, which provides a more realistic estimate of model performance in experiments \\cite{wu2018moleculenet}. Dataset descriptions with details are presented in the Appendix~\\ref{sec:dataset_details}. \n\n\\vspace{-0.03in}\n"
                    },
                    "subsubsection 5.1.2": {
                        "name": "Evaluation Metrics",
                        "content": " On the polymer datasets, we perform the tasks of graph regression. We use the coefficient of determination (\\regreRSquare) and Root Mean Square Error (\\regreRMSE) as evaluation metrics according to previous works~\\cite{ma2020pi1m,hu2020open}.\nOn the molecule datasets, we perform the tasks of graph binary classification using the Area under the ROC curve (\\classifyAUC) as the metric.\nTo evaluate model efficiency, we use the computational time per training batch (in seconds).\n\n\\vspace{-0.03in}\n"
                    },
                    "subsubsection 5.1.3": {
                        "name": "Baseline Methods",
                        "content": "\nThere are three categories of related methods that we can compare \\method with. The first category is \\emph{graph pooling} methods that aim at finding (soft) cluster assignment of nodes towards aggregated representations of graph. They are \\unets~\\cite{gao2021graph} and \\selfattn~\\cite{lee2019self}.\nThe second category improves the \\emph{optimization and generalization} of learned representations. They include \\stablegnn~\\cite{fan2021generalizing}, \\oodgnn~\\cite{li2021ood}, and \\irm~\\cite{arjovsky2019invariant}.\nThe third is \\dir for \\emph{graph rationale identification} that was proposed in a very recent work by \\citet{wu2022discovering}.\nTo investigate the effect of \\emph{environment replacement augmentation} (denoted by \\textsc{RepAug} as a module that may be used or not in the methods), we implement two method variants: (1) \\dirplusaug: We add environment-replaced augmentation to \\dir \\cite{wu2022discovering} to identify rationales, however, it has to explicitly decode and encode the rationales; (2) \\methodnoaug: We disable the environment replacement augmentation and use only the environment removal augmentation, i.e., rationale subgraphs in \\method. \nIn the experiments, we study two types of GNN models (\\gcn~\\cite{kipf2017semi} and \\gin~\\cite{xu2018how}) as graph encoders for all the methods. Please refer to Appendix~\\ref{sec:details} for details of implementation.\n\n"
                    }
                },
                "subsection 5.2": {
                    "name": "Results on Effectiveness (Q1)",
                    "content": "\\label{sec:q1_effectivene}\n\\cref{tab:result_plym} presents the results on polymer property regression with \\regreRSquare and \\regreRMSE metrics.\n\\cref{tab:res_ogbg_mol} presents the results on molecule property classification using \\classifyAUC.\nUnderlined are for the best baseline(s).\nThe best baseline is \\oodgnn for its elimination of the statistical dependence between property-relevant graph representation and property-irrelevant graph representation. The first graph rationalization method \\dir was evaluated on synthetic data \\cite{wu2022discovering}; unfortunately, it performs poorly on real polymer and molecule datasets because it selects edges to create rationale subgraphs and thus loses the original contextual information of atoms in the the rationale representations. Compared to them, our \\method with either \\gcn or \\gin consistently achieves the best performance on all the polymer and molecule datasets. On the \\density dataset, \\method with \\gcn improves \\regreRSquare over \\oodgnn relatively by +3.91\\%. On \\meltTemp, \\method with \\gin produces $1.56\\times$ \\regreRSquare over \\dir.\n\n"
                },
                "subsection 5.3": {
                    "name": "Ablation Study on \\method (Q2)",
                    "content": "\\label{sec:q2_abalation}\n\\cref{tab:result_plym,tab:res_ogbg_mol} have presented the results of \\dirplusaug and \\methodnoaug. \\dirplusaug is a variant of baseline method \\dir by enabling \\emph{environment replacement augmentations} for training. \\methodnoaug is a variant of our \\method that disables the replacement augmentations and uses \\emph{environment removal} only for training.\nClearly, \\dirplusaug outperforms \\dir, showing positive effect of the replacement augmentations.\nAnd the performance of \\methodnoaug is not satisfactory. Environment replacement augmentations are effective for training graph rationalization methods.\n\n\n"
                },
                "subsection 5.4": {
                    "name": "Case Study on Polymer Data (Q3)",
                    "content": "\\label{sec:q3_casestudy}\n\n\n\n\n\nGiven test polymer examples in the \\oxygen dataset, we visualize and compare the rationale subgraphs that are identified by from \\dir \\cite{wu2022discovering} and our \\method in \\cref{fig:case_study}. We have three observations.\n\nFirst, the rationales identified by \\method have more \\emph{coherent structures of atom nodes} than those identified by \\dir.\nThe red boxes show that quite a few edges in the rationales by \\dir are far separated.\nThis is because \\dir explicitly decodes the subgraphs by selecting edges.\nOur \\method estimates the probability of \\emph{nodes} being included in the rationales and uses the \\emph{contextualized representations} of atoms in the input graphs to create the representations of rationales.\nSo the rationales have coherent structures of nodes.\n\nSecond, the rationales from \\method are \\emph{more interpretable and beneficial} than the ones from \\dir, based on domain expertise in polymer science.\nTake a look at the first polymer example in Figure~\\ref{fig:case_study}.\nThe rationale from \\method includes non-aromatic rings and methyl groups.\nThe former group allows larger free volume elements and lower densities (i.e., enlarge microporousity) in the polymer's repeating units, which positively contributes to the gas permeability \\cite{sanders2013energy,yang2021discovery}.\nThe latter group is hydrophobic and contributes to steric frustration between polymer chains \\cite{yang2021discovery}, inducing a positive correlation to the permeability.\nOn the other hand, the rationale from \\dir would make property predictor overestimate the oxygen permeability, because it suggests that the double-bonded oxygens, ethers, and nitrogen atoms are positively correlated with the property.\nHowever, it conflicts with observations and conclusions from chemical experiments in previous literature \\cite{yang2021discovery} where researchers argue that the double-bonded oxygens, ethers, and nitrogen atoms are negatively correlated with gas permeability.\nFor the second and third examples, \\dir also predicts through double-bonded oxygens, ethers, and nitrogen atoms, and it overestimates the permeability.\nOur \\method realizes and employs the true relationship between the functional groups and property and successfully suppresses the representations of non-aromatic rings and methyl groups in the prediction.\n\\method intrinsically discovers correct relationships between rationale subgraphs and the property.\n\nThird, the rationales from \\method are \\emph{commonly observed across different polymers}.\nWe expect rationales to have universal indication on the polymer properties.\nThe rationales identified in the second and third examples both have the fused heterocyclic rings (at the right end of the monomers and highlighted by blue boxes).\n\n"
                },
                "subsection 5.5": {
                    "name": "Results on Efficiency (Q4)",
                    "content": "\\label{sec:q4_efficiency}\nWe conduct efficiency analysis using the \\hiv dataset without losing the generality. Results are presented in Figure~\\ref{fig:efficiency}. When batch size increases, in other words, when a batch has more and more graphs, the time cost per batch of \\dir increases significantly; our proposed \\method spends much less time than \\dir. Empirically we show that our \\method is more efficient than \\dir. This is because \\method does not explicitly decode or encode the subgraphs but directly creates their representations in latent space.\n\\cref{fig:test_auc} shows that compared to three most competitive baselines, \\method delivers the highest \\classifyAUC by learning augmented examples, while spending comparable amount of time. \n\n"
                },
                "subsection 5.6": {
                    "name": "Sensitivity Analysis (Q5)",
                    "content": "\\label{sec:q5_sensitivity}\n\n\nWithout losing the generality, we conduct three series of sensitivity analyses. First, \\cref{fig:loss_sensitivity} shows that on four polymer datasets, the performance of \\method in terms of \\regreRSquare is insensitive to the hyperparameters $\\alpha$ and $\\beta$ in \\cref{eq:loss_sep}.\nSecond, \\cref{fig:sensitivity_gamma} shows that the performance is insensitive to rationale size $\\gamma$ in \\cref{eq:loss_reg}.\nThird, on two polymer datasets and one of the most popular molecule datasets, \\cref{tab:sensitivity_agg} compares the effects of different choices of $\\text{AGG}(\\cdot)$ function that aggregates the representations of rationale and environment subgraphs. Sum pooling is generally the best choice.\n"
                }
            },
            "section 6": {
                "name": "Conclusions",
                "content": "\n\\label{sec:conclusion}\nIn this work, we made the first attempt to improve graph rationale identification using data augmentations, including environment replacement, for accurate and interpretable graph property prediction. We proposed an efficient framework that performs rationale-environment separation and representation learning on real and augmented examples in one latent space. Experiments on molecule and polymer datasets demonstrated its effectiveness and efficiency.\n\n\\begin{acks}\nThis research was supported in part by NSF Grants IIS-1849816, IIS-2142827, IIS-2146761, and CBET-2102592.\n\\end{acks}\n\n\\balance\n\\bibliographystyle{ACM-Reference-Format}\n% \\bibliography{ref}\n\\bibliography{ref-short}\n\n\\clearpage\n\\appendix\n"
            },
            "section 7": {
                "name": "Dataset Details",
                "content": "\n\\label{sec:dataset_details}\n\\vspace{-0.05in}\n\\paragraph{Polymer datasets} The four datasets \\glassTemp, \\meltTemp, \\density, and \\oxygen are used to predict different properties of polymers such as \\emph{glass transition temperature} ($^\\circ$C), \\emph{polymer density} g/cm$^3$, \\emph{melting temperature} ($^\\circ$C), and \\emph{oxygen permeability} (Barrer). \\glassTemp, \\meltTemp, and \\density are collected from PolyInfo, which is the largest web-based polymer database \\cite{otsuka2011polyinfo}. The \\oxygen dataset is created from the Membrane Society of Australasia portal,\n% \\footnote{The dataset was downloaded from \\url{https://membrane-australasia.org/msa-activities/polymer-gas-separation-membrane-database/}}\nconsisting of a variety of gas permeability data \\cite{thornton2012polymer}. However, the limited size (i.e., 595 polymers) brings great challenges to rationale identification and property prediction. Since a polymer is built from repeated monomer units, researchers use monomers as polymer graphs to predict properties. Different from molecular graphs, the monomer graphs have two special nodes (see ``$*$'' in the molecular structures in Figure~\\ref{fig:idea}), indicating the polymerization points of monomers \\cite{ma2020pi1m}. For all the polymer datasets, we randomly split by 60\\%/10\\%/30\\% for training, validation, and test.\n\n\\vspace{-0.05in}\n\\paragraph{Molecule datasets} Besides polymer datasets, we use seven molecule datasets from the graph property prediction task on Open Graph Benchmark or known as OGBG. They were originally collected by MoleculeNet \\cite{wu2018moleculenet} and used to predict the properties of molecules, including (1) inhibition to HIV virus replication in \\hiv, (2) toxicological properties of 617 types in \\toxcast, (3) toxicity measurements such as nuclear receptors and stress response in \\toxt, (4) blood–brain barrier permeability in \\bbbp, (5) inhibition to human $\\beta$-secretase 1 in \\bace, (6) FDA approval status or failed clinical trial in \\clintox, and (7) having drug side effects of 27 system organ classes in \\sider. For all molecule datasets, we use the scaffold splitting procedure as OGBG adopted \\cite{hu2020open}. It attempts to separate structurally different molecules into different subsets, which provides a more realistic estimate of model performance in experiments \\cite{wu2018moleculenet}.\n\n"
            },
            "section 8": {
                "name": "Implementation Details",
                "content": "\n\\label{sec:details}\n\nAll the experiments in this work are conducted on an Linux server with Intel Xeon Gold 6130 Processor (16 Cores @2.1Ghz), 96 GB of RAM, and a single RTX 2080Ti card (11 GB of RAM). Our method is implemented with \\verb+Python 3.9.9+ and \\verb+PyTorch 1.10.1+. We manually tune the hyperparameters over the following ranges:\n\\begin{compactitem}\n\\item $\\gamma \\in \\{0.05, 0.1, 0.15, \\dots, 0.75, 0.8\\}$,\n\\item $T_{sep} \\in \\{1,2\\}$,\n\\item $T_{pred} \\in \\{2,3\\}$,\n\\item Learning rate $\\in \\{0.001, 0.005, 0.01\\}$,\n\\item Batch size $\\in \\{32, 128, 256, 512\\}$,\n\\item Representation dimensions $d_1$, $d_2 \\in \\{64, 128, 300\\}$,\n\\item Number of GNN$_1$ layer $L_1=\\{2\\}$,\n\\item Number of GNN$_2$ layers $L_2 \\in \\{2,3,4,5\\}$.\n\\end{compactitem}\nWe use sum pooling as the default $\\text{AGG}(\\cdot)$ in \\method for the experiments in \\cref{tab:result_plym,tab:res_ogbg_mol}. We set \\gin as the default encoder for all ablation studies, case studies, and efficiency analysis.\nWe employ the virtual node trick~\\cite{hu2020open} for all methods on the \\hiv, \\toxt, \\bbbp, and all polymer datasets. For \\density, we train and evaluate the models using the logarithm of the property~\\cite{ma2020pi1m}.\nWe report the mean and standard deviation of the test performance over 10 runs with different random initialization of the parameters. \n\nOur code and data are available on the GitHub\\footnote{\\url{https://github.com/liugangcode/GREA}}. To implement the baseline methods, we use the official code package\\footnote{\\url{https://github.com/Wuyxin/DIR-GNN}} from the authors for \\dir~\\citep{wu2022discovering}. For \\unets~\\cite{gao2021graph} and \\selfattn~\\cite{lee2019self}, we use the public implementation provided by the \\verb+PyG+\\footnote{\\url{https://github.com/pyg-team/pytorch_geometric}} package. For \\irm~\\citep{arjovsky2019invariant}, we implement it's graph version based on its official repository.\\footnote{\\url{https://github.com/facebookresearch/InvariantRiskMinimization}}\nAs source codes of \\oodgnn~\\cite{li2021ood} and \\stablegnn~\\cite{fan2021generalizing} are not publically available, we implement then with the official code package of \\textsc{StableNet}\\footnote{\\url{https://github.com/xxgege/StableNet}} and the \\verb+PyG+ package.\n"
            }
        },
        "tables": {
            "tab:dataset_stat": "\\begin{table}[t]\n\\caption{Statistics of eleven datasets for graph property prediction: The four top rows are polymer datasets. The prediction tasks are graph regression. The seven bottom rows are molecule datasets. Their tasks are graph classification.}\n\\label{tab:dataset_stat}\n\\vspace{-0.1in}\n\\centering\n\\Scale[0.95]{\\begin{tabular}{lrrr}\n\\toprule\nDataset & \\# Graphs & Avg./Max \\# Nodes & Avg./Max \\# Edges \\\\\n\\midrule\n\\glassTemp & 7,174 & 36.7 / 166 & 79.3 / 362 \\\\\n\\meltTemp & 3,651 & 26.9 / 102 & 55.4 / 212 \\\\\n\\density & 1,694 & 27.3 / 93 & 57.6 / 210 \\\\\n\\oxygen & 595 & 37.3 / 103 & 82.1 / 234 \\\\\n\\midrule\n\\hiv & 41,127 & 25.5 / 222 & 54.9 / 502 \\\\\n\\toxcast & 8,576 & 18.8 / 124 & 38.5 / 268 \\\\\n\\toxt & 7,831 & 18.6 / 132 & 38.6 / 290 \\\\\n\\bbbp & 2,039 & 24.1 / 132 & 51.9 / 290 \\\\\n\\bace & 1,513 & 34.1 / 97 & 73.7 / 202 \\\\\n\\clintox & 1,477 & 26.2 / 136 & 55.8 / 286 \\\\\n\\sider & 1,427 & 33.6 / 492 & 70.7 / 1010 \\\\\n\\bottomrule\n\\end{tabular}}\n\\end{table}",
            "tab:result_plym": "\\begin{table*}[t]\n\\caption{Results on polymer property prediction: \\method consistently achieves the highest \\regreRSquare and smallest \\regreRMSE.}\n\\label{tab:result_plym}\n\\vspace{-0.1in}\n\\centering\n\\Scale[0.95]{\\begin{tabular}{l|l|rr|rr|rr|rr}\n\\toprule\n\\multicolumn{2}{l|}{} & \\multicolumn{2}{c|}{\\glassTemp} & \\multicolumn{2}{c|}{\\meltTemp}& \\multicolumn{2}{c|}{\\density} & \\multicolumn{2}{c}{\\oxygen} \\\\\n\\multicolumn{2}{l|}{} & \\multicolumn{1}{c}{\\regreRSquare $\\uparrow$} & \\multicolumn{1}{c|}{\\regreRMSE $\\downarrow$} & \\multicolumn{1}{c}{\\regreRSquare $\\uparrow$} & \\multicolumn{1}{c|}{\\regreRMSE $\\downarrow$} & \\multicolumn{1}{c}{\\regreRSquare $\\uparrow$} & \\multicolumn{1}{c|}{\\regreRMSE $\\downarrow$} & \\multicolumn{1}{c}{\\regreRSquare $\\uparrow$} & \\multicolumn{1}{c}{\\regreRMSE $\\downarrow$} \\\\\n\\midrule\n% \\multicolumn{9}{l}{Using \\gcn~\\cite{kipf2017semi} as encoder} \\\\\n% \\gcn~\\cite{kipf2017semi} & 0.844$\\pm$0.007 & 44.1$\\pm$1.0 & 0.708$\\pm$0.040 & 60.9$\\pm$4.0 & 0.684$\\pm$0.028 & 0.090$\\pm$0.004 & 0.870$\\pm$0.147 & 688$\\pm$385 \\\\\n\\parbox[t]{2mm}{\\multirow{9}{*}{\\rotatebox[origin=c]{90}{\\gcn~\\cite{kipf2017semi} as encoder}}} & \\unets~\\cite{gao2021graph} & 0.839$\\pm$0.005 & 44.9$\\pm$0.7 & 0.685$\\pm$0.012 & 63.4$\\pm$1.2 & 0.615$\\pm$0.053 & 0.100$\\pm$0.007 & 0.833$\\pm$0.084 & 865$\\pm$214 \\\\\n& \\selfattn~\\cite{lee2019self} & 0.848$\\pm$0.007 & 43.5$\\pm$1.0 & 0.709$\\pm$0.008 & 61.0$\\pm$0.9 &  0.688$\\pm$0.019 & \\underline{0.090}$\\pm$0.003 & 0.656$\\pm$0.135 & 1251$\\pm$266 \\\\\n& \\stablegnn~\\cite{fan2021generalizing} & 0.809$\\pm$0.013 & 48.8$\\pm$1.6 & 0.635$\\pm$0.033 & 70.0$\\pm$4.5 & 0.667$\\pm$0.070 & 0.093$\\pm$0.009 & 0.676$\\pm$0.127 & 1219$\\pm$241 \\\\\n& \\oodgnn~\\cite{li2021ood} & \\underline{0.852}$\\pm$0.006 & \\underline{43.0}$\\pm$0.9 & \\underline{0.714}$\\pm$0.025 & \\underline{60.4}$\\pm$2.6 & 0.676$\\pm$0.010 & 0.092$\\pm$0.001 & \\underline{0.921}$\\pm$0.059 & \\underline{576}$\\pm$212 \\\\\n& \\irm~\\cite{arjovsky2019invariant} & 0.830$\\pm$0.008 & 46.1$\\pm$1.1 & 0.677$\\pm$0.006 & 64.2$\\pm$0.6 & \\underline{0.690}$\\pm$0.016 & \\underline{0.090}$\\pm$0.002 & 0.871$\\pm$0.043 & 770$\\pm$141 \\\\\n& \\dir~\\cite{wu2022discovering} & 0.697$\\pm$0.061 & 61.2$\\pm$6.0 & 0.380$\\pm$0.214 & 87.8$\\pm$14. & 0.656$\\pm$0.036 & 0.094$\\pm$0.005 & 0.135$\\pm$0.068 & 2028$\\pm$80 \\\\\n& \\dirplusaug & 0.800$\\pm$0.006 & 56.5$\\pm$3.2 & 0.520$\\pm$0.101 & 77.8$\\pm$8.2 & 0.671$\\pm$0.033 & 0.092$\\pm$0.005 & 0.915$\\pm$0.031 & 626$\\pm$115 \\\\\n& \\methodnoaug & 0.685$\\pm$0.172 & 60.6$\\pm$16.5 & 0.679$\\pm$0.034 & 64.0$\\pm$3.3 & 0.686$\\pm$0.007 & \\underline{0.090}$\\pm$0.001 & 0.459$\\pm$0.254 & 1556$\\pm$395 \\\\\n& \\method (ours) & \\textbf{0.855}$\\pm$0.003 & \\textbf{42.6}$\\pm$0.5 & \\textbf{0.716}$\\pm$0.016  & \\textbf{60.2}$\\pm$1.6 &  \\textbf{0.717}$\\pm$0.023 & \\textbf{0.086}$\\pm$0.003 & \\textbf{0.941}$\\pm$0.018 & \\textbf{524}$\\pm$91 \\\\\n\\midrule\n% \\multicolumn{9}{l}{Using \\gin~\\cite{xu2018how} as encoder} \\\\\n% \\gin~\\cite{xu2018how} & 0.860$\\pm$0.006 & 41.8$\\pm$0.9 & 0.724$\\pm$0.008 & 59.4$\\pm$0.8 & 0.653$\\pm$0.024 & 0.095$\\pm$0.003 & 0.899$\\pm$0.075 & 658$\\pm$215 \\\\\n\\parbox[t]{2mm}{\\multirow{9}{*}{\\rotatebox[origin=c]{90}{\\gin~\\cite{xu2018how} as encoder}}} & \\unets~\\cite{gao2021graph} & 0.852$\\pm$0.006 & 42.9$\\pm$0.9 & 0.703$\\pm$0.009 & 61.6$\\pm$0.9 & 0.635$\\pm$0.029 & 0.097$\\pm$0.004 & 0.868$\\pm$0.085 & 753$\\pm$250 \\\\\n& \\selfattn~\\cite{lee2019self} & 0.848$\\pm$0.003 & 43.5$\\pm$0.4 & \\underline{0.726}$\\pm$0.009 & \\underline{59.2}$\\pm$1.0 & 0.654$\\pm$0.024 & 0.095$\\pm$0.003 & 0.601$\\pm$0.267 & 1265$\\pm$546 \\\\\n& \\stablegnn~\\cite{fan2021generalizing} & 0.794$\\pm$0.007 & 50.8$\\pm$0.9 & 0.535$\\pm$0.061 & 76.9$\\pm$5.0 & 0.642$\\pm$0.045 & 0.096$\\pm$0.006 & 0.501$\\pm$0.266 & 1487$\\pm$404 \\\\\n& \\oodgnn~\\cite{li2021ood} & \\underline{0.862}$\\pm$0.007 & \\underline{41.6}$\\pm$1.1 & 0.721$\\pm$0.006 & 59.7$\\pm$0.6 & 0.666$\\pm$0.025 & 0.093$\\pm$0.003 & \\underline{0.917}$\\pm$0.029 & \\underline{620}$\\pm$109 \\\\\n& \\irm~\\cite{arjovsky2019invariant} & 0.842$\\pm$0.004 & 44.5$\\pm$0.5 & 0.681$\\pm$0.008 & 63.8$\\pm$0.8 & 0.682$\\pm$0.031 & 0.091$\\pm$0.004 & 0.890$\\pm$0.042 & 709$\\pm$146 \\\\\n& \\dir~\\cite{wu2022discovering} & 0.594$\\pm$0.070 & 71.0$\\pm$6.0 & 0.287$\\pm$0.121 & 95.1$\\pm$7.9 & 0.617$\\pm$0.045 & 0.099$\\pm$0.006 & 0.501$\\pm$0.309 & 1446$\\pm$537 \\\\\n& \\dirplusaug & 0.744$\\pm$0.029 & 56.4$\\pm$3.2 & 0.542$\\pm$0.083 & 76.2$\\pm$7.0 & 0.647$\\pm$0.058 & 0.095$\\pm$0.008 & 0.743$\\pm$0.150 & 1054$\\pm$338 \\\\\n& \\methodnoaug & 0.494$\\pm$0.110 & 79.0$\\pm$9.3 & 0.660$\\pm$0.107 & 65.2$\\pm$9.5 & \\underline{0.717}$\\pm$0.022 & \\underline{0.086}$\\pm$0.003 & 0.400$\\pm$0.286 & 1623$\\pm$474 \\\\\n& \\method (ours) & \\textbf{0.864}$\\pm$0.005 & \\textbf{41.2}$\\pm$0.8 & \\textbf{0.736}$\\pm$0.012 & \\textbf{58.0}$\\pm$1.2 & \\textbf{0.723}$\\pm$0.030 & \\textbf{0.085}$\\pm$0.005 & \\textbf{0.930}$\\pm$0.020 & \\textbf{569}$\\pm$86 \\\\\n\\bottomrule\n\\end{tabular}}\n\\end{table*}",
            "tab:res_ogbg_mol": "\\begin{table*}[t]\n\\caption{Results on molecule property prediction: \\method consistently achieves the highest \\classifyAUC ($\\uparrow$).}\n\\label{tab:res_ogbg_mol}\n\\vspace{-0.1in}\n\\centering\n\\Scale[0.93]{\\begin{tabular}{llccccccc}\n\\toprule\n\\multicolumn{2}{l}{} & \\hiv & \\toxcast & \\toxt & \\bbbp & \\bace & \\clintox & \\sider \\\\ \n\\midrule\n% \\multicolumn{8}{l}{(Using \\gcn~\\cite{kipf2017semi} as encoder)} \\\\\n% \\gcn\n% & 0.7391$\\pm$0.0145 & 0.6580$\\pm$0.0054 & 0.7727$\\pm$0.0082       \n% & 0.6777$\\pm$0.0093 & 0.8121$\\pm$0.0247 & 0.8847$\\pm$0.0198          \n% & 0.6063$\\pm$0.0101 \\\\\n\\parbox[t]{2mm}{\\multirow{9}{*}{\\rotatebox[origin=c]{90}{\\gcn~\\cite{kipf2017semi} as encoder}}} & \\unets~\\cite{gao2021graph}\n& 0.7527$\\pm$0.0104 & 0.6507$\\pm$0.0086 & 0.7492$\\pm$0.0093       \n& 0.6709$\\pm$0.0176 & 0.7757$\\pm$0.0173 & 0.8450$\\pm$0.0403\n& 0.6181$\\pm$0.0121 \\\\\n& \\selfattn~\\cite{lee2019self}\n& \\underline{0.7733}$\\pm$0.0187 & 0.6510$\\pm$0.0076 & 0.7563$\\pm$0.0080       \n& 0.6602$\\pm$0.0220 & 0.7383$\\pm$0.0541 & 0.8291$\\pm$0.0791\n& 0.5718$\\pm$0.0219 \\\\\n& \\stablegnn~\\cite{fan2021generalizing}\n& 0.7218$\\pm$0.0099 & 0.6520$\\pm$0.0109 & 0.7454$\\pm$0.0059       \n& 0.6552$\\pm$0.0184 & 0.6607$\\pm$0.0500 & 0.7681$\\pm$0.0778\n& 0.5644$\\pm$0.0274 \\\\\n& \\oodgnn~\\cite{li2021ood}\n& 0.7580$\\pm$0.0176 & 0.6613$\\pm$0.0046 & 0.7673$\\pm$0.0109       \n& 0.6795$\\pm$0.0165 & \\underline{0.8096}$\\pm$0.0132 & \\underline{0.8874}$\\pm$0.0143\n& 0.6133$\\pm$0.0095 \\\\\n& \\irm~\\cite{arjovsky2019invariant}\n& 0.7702$\\pm$0.0107 & 0.6599$\\pm$0.0063 & 0.7654$\\pm$0.0072       \n& \\underline{0.6892}$\\pm$0.0053 & 0.7947$\\pm$0.0186 & 0.8819$\\pm$0.0231\n& 0.6035$\\pm$0.0195 \\\\\n& \\dir~\\cite{wu2022discovering}\n& 0.7466$\\pm$0.0093 & 0.5954$\\pm$0.0154 & 0.4727$\\pm$0.0129        \n& 0.6559$\\pm$0.0298 & 0.6751$\\pm$0.0323 & 0.6251$\\pm$0.0956\n& 0.5331$\\pm$0.0216 \\\\\n& \\dirplusaug & 0.7494$\\pm$0.0225 & \\underline{0.6632}$\\pm$0.0098 & 0.7437$\\pm$0.0054 & 0.6630$\\pm$0.0118 & 0.7677$\\pm$0.0226 & 0.8606$\\pm$0.0144 & 0.5934$\\pm$0.0170 \\\\ \n& \\methodnoaug & 0.7377$\\pm$0.0210 & 0.6614$\\pm$0.0048 & \\underline{0.7808}$\\pm$0.0061 & 0.6736$\\pm$0.0077 & 0.7655$\\pm$0.0529 & 0.8708$\\pm$0.0514 & \\underline{0.6222}$\\pm$0.0166  \\\\\n& \\method (ours)\n& \\textbf{0.7794}$\\pm$0.0065 & \\textbf{0.6662}$\\pm$0.0041 & \\textbf{0.7822}$\\pm$0.0093\n& \\textbf{0.6986}$\\pm$0.0175 & \\textbf{0.8191}$\\pm$0.0240 & \\textbf{0.8961}$\\pm$0.0150\n& \\textbf{0.6316}$\\pm$0.0151 \\\\\n\\midrule\n% \\multicolumn{8}{l}{(Using \\gin~\\cite{xu2018how} as encoder)} \\\\ \n% \\gin\n% & 0.7773$\\pm$0.0145 & 0.6659$\\pm$0.0063 & 0.7669$\\pm$0.0064\n% & 0.6808$\\pm$0.0142 & 0.7998$\\pm$0.0201 & 0.8682$\\pm$0.0229\n% & 0.5893$\\pm$0.0241 \\\\\n\\parbox[t]{2mm}{\\multirow{9}{*}{\\rotatebox[origin=c]{90}{\\gin~\\cite{xu2018how} as encoder}}} & \\unets~\\cite{gao2021graph}\n& 0.7375$\\pm$0.0362 & 0.6524$\\pm$0.0126 & 0.7560$\\pm$0.0093\n& 0.6809$\\pm$0.0163 & \\underline{0.8026}$\\pm$0.0105 & 0.8146$\\pm$0.0703\n& 0.5929$\\pm$0.0114 \\\\\n& \\selfattn~\\cite{lee2019self}\n& 0.7533$\\pm$0.0247 & 0.6351$\\pm$0.0137 & 0.7507$\\pm$0.0110\n& 0.6624$\\pm$0.0167 & 0.7348$\\pm$0.0194 & 0.7912$\\pm$0.0995\n& 0.5702$\\pm$0.0137 \\\\\n& \\stablegnn~\\cite{fan2021generalizing}\n& 0.7218$\\pm$0.0078 & 0.6485$\\pm$0.0025 & 0.7381$\\pm$0.0123       \n& 0.6695$\\pm$0.0120 & 0.7229$\\pm$0.0122 & 0.8559$\\pm$0.0224\n& 0.5593$\\pm$0.0172 \\\\\n& \\oodgnn~\\cite{li2021ood}\n& 0.7799$\\pm$0.0078 & \\underline{0.6697}$\\pm$0.0051 & 0.7646$\\pm$0.0038       \n& 0.6710$\\pm$0.0188 & 0.7800$\\pm$0.0228 & 0.8416$\\pm$0.0496\n& 0.5916$\\pm$0.0169 \\\\\n& \\irm~\\cite{arjovsky2019invariant}\n& \\underline{0.7817}$\\pm$0.0120 & 0.6641$\\pm$0.0065 & 0.7542$\\pm$0.0084\n& \\underline{0.6835}$\\pm$0.0071 & 0.7977$\\pm$0.0208 & 0.8485$\\pm$0.0215\n& 0.5778$\\pm$0.0206 \\\\\n& \\dir~\\cite{wu2022discovering}\n& 0.7533$\\pm$0.0117 & 0.5927$\\pm$0.0097 & 0.5078$\\pm$0.0313\n& 0.5843$\\pm$0.0443 & 0.6115$\\pm$0.0587 & 0.6911$\\pm$0.0810\n& 0.5406$\\pm$0.0127 \\\\\n& \\dirplusaug & 0.7725$\\pm$0.0249  & 0.6454$\\pm$0.0061 & 0.7453$\\pm$0.0080 & 0.6813$\\pm$0.0203 & 0.7590$\\pm$0.0642 & 0.8561$\\pm$0.0159  & 0.5730$\\pm$0.0115 \\\\ \n& \\methodnoaug & 0.7770$\\pm$0.0178 & 0.6681$\\pm$0.0066 & \\underline{0.7690}$\\pm$0.0117 & 0.6737$\\pm$0.0235 & 0.7997$\\pm$0.0380 & \\underline{0.8574}$\\pm$0.0442 & \\underline{0.5988}$\\pm$0.0169 \\\\\n& \\method (ours)\n& \\textbf{0.7932}$\\pm$0.0092 & \\textbf{0.6750}$\\pm$0.0067 & \\textbf{0.7723}$\\pm$0.0119\n& \\textbf{0.6970}$\\pm$0.0128 & \\textbf{0.8237}$\\pm$0.0237 & \\textbf{0.8789}$\\pm$0.0368\n& \\textbf{0.6014}$\\pm$0.0204 \\\\\n\\bottomrule\n\\end{tabular}}\n\\end{table*}",
            "tab:sensitivity_agg": "\\begin{table}[t]\n\\caption{Effect of $\\text{AGG}\\big(\\mathbf{h}_i^{(r)}, \\mathbf{h}_j^{(e)}\\big)$ in \\cref{eq:rat_env_agg}. We use Sum Pooling by default because it generally performs the best.}\n\\label{tab:sensitivity_agg}\n\\vspace{-0.15in}\n\\centering\n\\Scale[0.86]{\\begin{tabular}{l||c|c||c}\n    \\toprule\n    & \\meltTemp (\\regreRSquare) & \\oxygen (\\regreRSquare) & \\hiv (\\classifyAUC) \\\\\n    \\midrule\n    Sum Pooling\n    & \\textbf{0.7362}$\\pm$0.0115 & \\textbf{0.9304}$\\pm$0.0202 & \\textbf{0.7932}$\\pm$0.0092 \\\\\n    Mean Pooling\n    & 0.7328$\\pm$0.0068 & 0.9288$\\pm$0.0331 & 0.7810$\\pm$0.0117 \\\\\n    Max Pooling\n    & 0.7164$\\pm$0.0094 & 0.8984$\\pm$0.0494 & 0.7809$\\pm$0.0137 \\\\\n    Concatenation\n    & 0.7145$\\pm$0.0127 & 0.9240$\\pm$0.0143 & 0.7771$\\pm$0.0096 \\\\  \n    \\bottomrule\n\\end{tabular}}\n% \\vspace{-0.1in}\n\\end{table}"
        },
        "figures": {
            "fig:idea": "\\begin{figure*}[t]\n    \\centering\n    \\includegraphics[width=1.98\\columnwidth]{figures/idea.pdf}\n    \\vspace{-0.2in}\n    \\caption{Graph rationalization identifies a rationale subgraph that best explains or supports the prediction of graph property. Our work makes the first attempt to improve graph rationalization by graph data augmentations with \\emph{environment subgraphs} which are the remaining parts after rationale identification. It proposes new augmentation operations, designs and develops a novel graph rationalization framework, and conducts experiments on a large set of molecule and polymer data.}\n    \\label{fig:idea}\n    \\vspace{-0.1in}\n\\end{figure*}",
            "fig:implementation": "\\begin{figure*}[t]\n    \\centering\n    \\includegraphics[width=1.99\\columnwidth]{figures/implementation.pdf}\n    \\vspace{-0.15in}\n    \\caption{The architecture of the proposed graph rationalization framework: It performs the creation and representation learning of environment-based augmented examples in a \\emph{latent space}, instead of decoding every example into a graph form and running a GNN encoder on it. This design aligns graph representation spaces and avoids high computational complexity.}\n    \\label{fig:implementation}\n    \\vspace{-0.1in}\n\\end{figure*}",
            "fig:case_study": "\\begin{figure}[t]\n    \\centering\n    \\includegraphics[width=0.96\\linewidth]{figures/fig_case_study2.pdf}\n    \\vspace{-0.1in}\n    \\caption{Three polymer examples in O$_2$Perm test set to compare graph rationales and property predictions by \\dir \\cite{wu2022discovering} and our \\method. \\dir selects \\emph{edges} to decode rationale subgraphs. Our \\method estimates the probability of \\emph{nodes} being classified into rationales in latent space. The red boxes indicate incoherent edges that \\dir selects. The blue boxes indicate coherent node sets that contribute to accurate predictions on oxygen permeability of polymer membrane.}\n    \\label{fig:case_study}\n    \\vspace{-0.15in}\n\\end{figure}",
            "fig:efficiency": "\\begin{figure}[t]\n    \\centering\n    \\subfigure[Our \\method runs much faster than \\dir when batch size (\\# graphs) increases.]\n    {\\includegraphics[width=0.49\\linewidth]{figures/efficiency_batch.pdf}\\label{fig:time_cost}}\n    \\hfill\n    \\subfigure[\\method spends comparable amount of training time to deliver the highest \\classifyAUC.]\n    {\\includegraphics[width=0.49\\linewidth]{figures/efficiency_converge.pdf}\\label{fig:test_auc}}\n    \\vspace{-0.05in}\n    \\caption{Efficiency analysis on the \\hiv dataset.}\n    \\label{fig:efficiency}\n    % \\vspace{-0.15in}\n\\end{figure}",
            "fig:sensitivity_gamma": "\\begin{figure}[t]\n    \\centering\n    \\subfigure[\\density]\n    {\\includegraphics[width=0.49\\linewidth]{figures/gamma_density.pdf}\\label{fig:sensitivity_gamma_density}}\n    \\hfill\n    \\subfigure[\\oxygen]\n    {\\includegraphics[width=0.49\\linewidth]{figures/gamma_o2.pdf}\\label{fig:sensitivity_gamma_o2perm}}\n    \\vspace{-0.1in}\n    \\caption{On two polymer datasets, the performance of \\method is \\emph{not} sensitive to rationale size $\\gamma$ with wide ranges for tuning.}\n    % a wide range between 20\\% and 40\\% (of all nodes) for tuning.}\n    \\label{fig:sensitivity_gamma}\n    \\vspace{-0.05in}\n\\end{figure}",
            "fig:loss_sensitivity": "\\begin{figure}[t]\n    \\centering\n    \\vspace{-0.15in}\n    \\subfigure[\\glassTemp]\n    {\\includegraphics[width=0.49\\linewidth]{figures/loss_rep_reg_tg.pdf}\\label{fig:loss_glassT}}\n    \\hfill\n    \\subfigure[\\meltTemp]\n    {\\includegraphics[width=0.49\\linewidth]{figures/loss_rep_reg_mt.pdf}\\label{fig:loss_meltT}}\n    \\\\ \\vspace{-0.15in}\n    \\subfigure[\\density]\n    {\\includegraphics[width=0.49\\linewidth]{figures/loss_rep_reg_density.pdf}\\label{fig:loss_density}}\n    \\hfill\n    \\subfigure[\\oxygen]\n    {\\includegraphics[width=0.49\\linewidth]{figures/loss_rep_reg_o2.pdf}\\label{fig:loss_oxygen}}\n    \\vspace{-0.15in}\n    \\caption{On four polymer datasets, the performance of \\method (in \\regreRSquare) is \\emph{not} sensitive to hyperparameters $\\alpha$ and $\\beta$ in \\cref{eq:loss_sep}.}\n    \\label{fig:loss_sensitivity}\n    \\vspace{-0.2in}\n\\end{figure}"
        },
        "equations": {
            "eq:1": "\\begin{equation}\n\\label{eq:gnn}\n    % \\mathbf{H} = \\begin{bmatrix}\n    % - \\\\\n    % \\vec{h}_v \\\\\n    % -\n    % \\end{bmatrix}_{v \\in \\mathcal{V}}\n    % = \\text{GNN}(g) \\in \\mathbb{R}^{N \\times d},\n    \\mathbf{H} = \\begin{bmatrix}\n    \\cdots, \\vec{h}_v, \\cdots\n    \\end{bmatrix}_{v \\in \\mathcal{V}}^\\top\n    = \\text{GNN}(g) \\in \\mathbb{R}^{N \\times d},\n\\end{equation}",
            "eq:2": "\\begin{equation}\n\\label{eq:readout_and_mlp_g}\n    \\mathbf{h} = \\text{READOUT}(\\mathbf{H}) \\in \\mathbb{R}^{d}, \\quad \\hat{y} = \\text{MLP}(\\mathbf{h}) \\in \\mathcal{Y}.\n\\end{equation}",
            "eq:3": "\\begin{equation}\n\\label{eq:f_pred}\n    \\hat{y} = \\hat{y}^{(r)} = f_{pred} \\big(g^{(r)}\\big),\n\\end{equation}",
            "eq:4": "\\begin{equation}\n\\label{eq:separator_enc_dec}\n    \\mathbf{m} = \\sigma(\\text{MLP}_1(\\text{GNN}_1(g))),\n\\end{equation}",
            "eq:5": "\\begin{align}\n    \\label{eq:h_r}\n    \\mathbf{h}^{(r)} = \\mathbf{1}^{\\top}_N \\cdot (\\mathbf{m} \\times \\mathbf{H}), \\quad\n    % \\label{eq:h_e}\n    \\mathbf{h}^{(e)} = \\mathbf{1}^{\\top}_N \\cdot ((\\mathbf{1}_N - \\mathbf{m}) \\times \\mathbf{H}),\n\\end{align}",
            "eq:6": "\\begin{equation}\n\\label{eq:mlp2_rem}\n\\hat{y}_{i}^{(r)} = \\text{MLP}_2 \\big(\\mathbf{h}_i^{(r)}\\big).\n\\end{equation}",
            "eq:7": "\\begin{equation}\n\\label{eq:rat_env_agg}\n    \\mathbf{h}_{(i,j)} = \\text{AGG}\\big(\\mathbf{h}_i^{(r)}, \\mathbf{h}_j^{(e)}\\big) = \\mathbf{h}_i^{(r)} + \\mathbf{h}_j^{(e)}.\n\\end{equation}",
            "eq:8": "\\begin{equation}\n\\label{eq:mlp2_rep}\n    \\hat{y}_{(i,j)} = \\operatorname{MLP}_2 \\big(\\mathbf{h}_{(i,j)} \\big).\n\\end{equation}",
            "eq:9": "\\begin{align}\n    \\label{eq:loss_rem}\n    &\\mathcal{L}_{rem} = y_{i} \\cdot \\log \\hat{y}_{i}^{(r)} + \\left(1-y_{i}\\right) \\cdot \\log \\big(1-\\hat{y}_{i}^{(r)}\\big), \\\\\n    \\label{eq:loss_rep}\n    &\\mathcal{L}_{rep} = \\frac{1}{B} \\sum_{j=1}^B \\big( y_{i} \\cdot \\log \\hat{y}_{(i,j)} + \\left(1-y_{i}\\right) \\cdot \\log (1-\\hat{y}_{(i,j)}) \\big),\n\\end{align}",
            "eq:10": "\\begin{equation}\n\\label{eq:loss_reg}\n    \\mathcal{L}_{reg} = \\Big|\\frac{\\mathbf{1}^\\top_N \\cdot \\mathbf{m}}{N} - \\gamma \\Big|,\n\\end{equation}",
            "eq:11": "\\begin{align}\n    \\label{eq:loss_pred}\n    &\\mathcal{L}_{pred} = \\mathcal{L}_{{rem}} + \\alpha \\cdot \\mathcal{L}_{{{rep}}}, \\\\\n    \\label{eq:loss_sep}\n    &\\mathcal{L}_{sep} = \\mathcal{L}_{{rem}} + \\alpha \\cdot \\mathcal{L}_{{{rep}}} + \\beta \\cdot  \\mathcal{L}_{reg},\n\\end{align}"
        },
        "git_link": "https://github.com/liugangcode/GREA"
    }
}