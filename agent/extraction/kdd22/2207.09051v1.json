{
    "meta_info": {
        "title": "HICF: Hyperbolic Informative Collaborative Filtering",
        "abstract": "Considering the prevalence of the power-law distribution in user-item\nnetworks, hyperbolic space has attracted considerable attention and achieved\nimpressive performance in the recommender system recently. The advantage of\nhyperbolic recommendation lies in that its exponentially increasing capacity is\nwell-suited to describe the power-law distributed user-item network whereas the\nEuclidean equivalent is deficient. Nonetheless, it remains unclear which kinds\nof items can be effectively recommended by the hyperbolic model and which\ncannot. To address the above concerns, we take the most basic recommendation\ntechnique, collaborative filtering, as a medium, to investigate the behaviors\nof hyperbolic and Euclidean recommendation models. The results reveal that (1)\ntail items get more emphasis in hyperbolic space than that in Euclidean space,\nbut there is still ample room for improvement; (2) head items receive modest\nattention in hyperbolic space, which could be considerably improved; (3) and\nnonetheless, the hyperbolic models show more competitive performance than\nEuclidean models. Driven by the above observations, we design a novel learning\nmethod, named hyperbolic informative collaborative filtering (HICF), aiming to\ncompensate for the recommendation effectiveness of the head item while at the\nsame time improving the performance of the tail item. The main idea is to adapt\nthe hyperbolic margin ranking learning, making its pull and push procedure\ngeometric-aware, and providing informative guidance for the learning of both\nhead and tail items. Extensive experiments back up the analytic findings and\nalso show the effectiveness of the proposed method. The work is valuable for\npersonalized recommendations since it reveals that the hyperbolic space\nfacilitates modeling the tail item, which often represents user-customized\npreferences or new products.",
        "author": "Menglin Yang, Zhihao Li, Min Zhou, Jiahong Liu, Irwin King",
        "link": "http://arxiv.org/abs/2207.09051v1",
        "category": [
            "cs.IR",
            "cs.AI"
        ],
        "additionl_info": "Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery  and Data Mining (KDD '22)"
    },
    "latex_extraction": {
        "content": {
            "section 1": {
                "name": "Introduction",
                "content": "\n\nWith the growth of Amazon, Netflix, TikTok, and other e-commerce or social networking services over the past several years, recommender systems are becoming ubiquitous in the digital age.\nRecommender systems, in a broad sense, are algorithms that try to suggest relevant or potentially preferable items to the users, where items are, e.g., news to read, movies to watch, goods to buy, etc.\n\nCollaborative filtering, one of the most extensively used  techniques in the customized recommendation, is based on the assumption that users often get the preferable suggestions from someone with similar preferences. To provide relevant recommendations, collaborative-filtering approaches~~\\cite{koren2009matrix,koren2008factorization,VAECF2018,nmf-cf} rely on historical interactions between users and items, which are stored in the user-item matrix. \nRecently, researchers have proposed explicitly incorporating high-order collaborative interaction to improve recommendation performance. Usually, the user-item relationship is modeled as a bipartite graph with nodes representing users or items, and edges representing their interactions. Then, graph neural networks (GNNs)~\\cite{gcn2017,GAT,graphsage,zixingcikm2021,zhang2022graph} are applied to extract high-order relationships between users and items via the message propagation paradigm. By using layers of neighborhood aggregation under the graph convolutional setup to construct the final representations, these techniques~\\cite{wang2019ngcf,he2020lightgcn,sun2021hgcf,mao2021simplex,mao2021ultragcn} have attained state-of-the-art performance on diverse benchmark datasets.\n\nThe heavy-tailed distribution\\footnote{Heavy-tailed distributions are substantially right-skewed, with a small number of large values in the head and a large number of small values in the tail; they are often described by a power law, a log-normal, or an exponential function.} occurs in most large-scale recommendation datasets where the number of popular items liked by a large number of users accounts for the minority and the rest are the majority which are unpopular ones. In general, popular items are competitive while the long-tail item reflects personalized preference or something new. Both are critical for the recommendation. An example is illustrated in Figure~\\ref{fig:user_item_graph}.\nRecently, hyperbolic space has gained increasing interest in the recommendation area as the capacity of hyperbolic space exponentially increases with radius, which fits nicely with a power-law distributed user-item network.  Naturally, models based on hyperbolic graph neural networks achieve competitive performance in recommender systems~\\cite{sun2021hgcf,chen2021modeling,yang2022hrcf}. However, it is not clear in what respects the hyperbolic model is superior to the Euclidean counterpart. At the same time, it is unclear in which aspects hyperbolic models perform worse than Euclidean models.\n\n\n\nTo answer the above doubts, in this work, we take the simplest form of recommendation model, collaborative filtering (CF), as an example to analyze and observe the behaviors of hyperbolic and Euclidean models. Specifically, we take LightGCN~\\cite{he2020lightgcn} and HGCF~\\cite{sun2021hgcf} as an example for analysis and observation, both of which are essentially the same model applied in different spaces. \nSpecifically, we compare the recommendation effects of hyperbolic and Euclidean models, as well as their performance on the head-and-tail item, using a similar model configuration and running environment. Head and tail items are essentially chosen by the 20/80 rule\\footnote{The 80/20 rule is mathematically expressed as a power-law distribution (also known as a Pareto distribution).}, which states that all items are ranked according to their degrees, and the top 20\\% are considered the head (abbreviated H20), while the remaining 80\\% are called the tail (abbreviated T20). The experimental findings are presented in Section~\\ref{sec:observation}, which reveals the following facts. The tail item receives more consideration in the hyperbolic model than that in the Euclidean model, but there is still plenty of room for improvement, while the head item receives marginal attention in hyperbolic space, which might be substantially enhanced. Overall, the hyperbolic models outperform the Euclidean models. \nThese findings are of great significance to the community of recommender systems since they help researchers better understand the advantages and disadvantages of hyperbolic models, as well as when and where to deploy them.\n\nOn the basis of the above insights, we develop a novel technique to improve hyperbolic recommender models. Two main aspects are considered: the recommendation effect of the tail item, as well as the issue of the insufficient weight placed on the head item. \nGiven that most recommender systems pull the user and its interesting items in adjacent positions while pushing its uninterested items in distant areas, our method is carried out from the perspective of pull and push. The basic idea is to link the pull-and-push operations to hyperbolic geometry. Specifically, we design a hyperbolic aware margin ranking loss and hyperbolic informative aware negative sampling in such a way that both head and tail items get considerable attention. To summarize, the contribution of the proposed work is three-fold.\n\n\\begin{itemize}\n    \\item We initiate a quantitative investigation to study the behaviors of Euclidean and hyperbolic recommendation models, which reveals valuable findings and insights to the community. Specifically, it is observed that the hyperbolic model outperforms the Euclidean model in general and emphasizes more on the tail items, but with some sacrifice on the head items. This discovery is critical for the study of hyperbolic recommender systems.\n    \\item We present a hyperbolic informative collaborative filtering (HICF) method, which ensures that both head and tail items get sufficient attention via tightly coupling the embedding learning process to the hyperbolic geometry.\n    \\item \\textcolor{black}{Extensive experiments demonstrate the effectiveness of the proposed method where the maximum recommendation effect on overall items versus all baselines up to 12.92\\%, on head items against the hyperbolic model up to 12.50\\%, and on tail items against hyperbolic model up to~\\textbf{26.69\\%}. It should be noted that the proposed method is not limited to CF-based models, but is also applicable to other hyperbolic recommendation models.}\n\\end{itemize}\n% ============================================\n"
            },
            "section 2": {
                "name": "Related work",
                "content": "\nCollaborative filtering (CF) is one of the most widely used techniques in recommender systems, in which users and items are parameterized as a matrix and the matrix parameters are learned by reconstructing historical user-item interactions. \nEarlier CF methods mapping both the ID of users and items to a joint latent factor space, so that user-item interactions are modeled as inner products in that space \\cite{koren2008factorization,he2017neural,LRML2018,chen2017attentive}. The user-item interaction in the recommender system could well be represented by a bipartite graph. Recently, graph-based CF approaches~\\cite{wang2019ngcf,he2020lightgcn,chen2021attentive} have made significant progress in capturing explicit relationships.\nExisting graph neural networks, on the other hand, are mostly created in Euclidean space, which may understate the implicit power-law distribution of the user-item network.\n\nResearch~\\cite{hgcn2019,liu2019HGNN,yang2022hyperbolic} demonstrates that the hyperbolic space is more embeddable, particularly when graph-structured data exhibit hierarchical and scale-free characteristics.\nHyperbolic representation learning has gained growing interest in the field of studying graph representation~\\cite{liu2019HGNN,hgcn2019,lgcn,yang2021discrete,liu2022enhancing,yang2021hyper}. \nDue to the scale-free characteristic of the user-item network, hyperbolic geometry has also attracted a lot of attention and has been successfully applied to recommender systems~\\cite{HyperML2020,wang2021hypersorec,feng2020hme,sun2021hgcf,zhang2021we,chen2021modeling,yang2022hrcf} in recent years.\nFor the recommender system, HyperML~\\cite{HyperML2020} studies metric learning in a hyperbolic space for the representation of the user and the item. \nHGCF~\\cite{sun2021hgcf} incorporates multiple layers of neighborhood aggregation using a hyperbolic GCN module to gather higher-order information in user-item interactions.\nHSCML~\\cite{zhang2021we} provides a thorough study of network embedding techniques for recommender systems. \nLKGR~\\cite{chen2021modeling} attempts to learn embeddings in a hyperbolic space for the knowledge-graph-based recommender system.\nThe majority of the above works attempt to extend current Euclidean models to hyperbolic space. While the inherent benefits and shortage of hyperbolic space are seldom investigated. Although HSCML~\\cite{HyperML2020} provides several interesting observations, they are insufficient to fully understand the hyperbolic recommender system.\n% ============================================\n\n% ==============================================================================\n"
            },
            "section 3": {
                "name": "PRELIMINARIES",
                "content": "\nRiemannian geometry is a branch of differential geometry that involves the study of smooth manifolds with a Riemannian metric.\nDifferent curvatures of Riemannian manifolds create distinct geometries: elliptic (positive curvature), Euclidean (zero curvature), and hyperbolic (negative curvature).\nWe will concentrate on negative curvature space, i.e., hyperbolic geometry, in this work.\nThere are multiple equivalent models for hyperbolic space, each with a unique set of properties, yet being mathematically identical. The Lorentz model (alternatively called the hyperboloid model) is one of the typical hyperbolic models~\\cite{nickel2018learning,hgcn2019,liu2019HGNN,lgcn}. \n\nAn $n$-dimensional Lorentz manifold with negative curvature $-1/\\kappa (\\kappa>0)$ is defined as the Riemannian manifold $(\\mathbb{H}^n_\\kappa, g_\\mathcal{L})$, where $\\mathbb{H}^n_\\kappa =\\{\\mathbf{x}\\in\\mathbb{R}^{n+1}:\\langle\\mathbf{x},\\mathbf{x}\\rangle_\\mathcal{L}=-\\kappa, x_0>0\\}$, $g_\\mathcal{L}=\\eta$ $(\\eta = \\mathbf{I}_n$ except $\\eta_{0,0}=-1)$ and $\\langle\\cdot , \\cdot\\rangle_\\mathcal{L}$ is the Lorentzian inner product. Given $\\mathbf{x,y}\\in \\mathbb{H}^n_\\kappa$, the Lorentz inner product is give by:\n\\begin{equation}\n    \\langle\\mathbf{x},\\mathbf{y}\\rangle_\\mathcal{L}:=-x_0y_0 + \\sum_{i=1}^n x_iy_i.\n\\label{equ:inner_product}\n\\end{equation}\nFor any $\\mathbf{x}\\in \\mathbb{H}_\\kappa^n$, there is a tangent space $\\mathcal{T}_\\mathbf{x}\\mathbb{H}_\\kappa^n$ around $\\mathbf{x}$ approximating $\\mathbb{H}_\\kappa^n$, which is an $n$-dimensional vector space (\\textit{c.f.}, Definition~\\ref{def:lorentz_tangent_space}). To realize the projection between $\\mathbb{H}_\\kappa^n$ and $\\mathcal{T}_\\mathbf{x}\\mathbb{H}_\\kappa^n$, we can resort to the exponential map and the logarithmic map, which are given in Definition~\\ref{def:lorentz_exponential_map}. The original point $\\mathbf{o}:=\\{\\sqrt{\\kappa}, 0, \\cdots, 0\\} \\in \\mathbb{H}^n_\\kappa$ is a common choice as the reference point to perform these operations.\n\n\\begin{definition}[Tangent Space] \n\\label{def:lorentz_tangent_space}\nThe {tangent space} $\\mathcal{T}_\\mathbf{x}\\mathbb{H}_\\kappa^n$ $(\\mathbf{x}\\in \\mathbb{H}_\\kappa^n)$ is defined as the first-order approximation of $\\mathbb{H}_\\kappa^n$ around $\\mathbf{x}$:\n\\begin{equation}\n    \\mathcal{T}_\\mathbf{x}\\mathbb{H}_\\kappa^n:=\\{\\mathbf{v}\\in \\mathbb{R}^{n+1}: \\langle\\mathbf{v},\\mathbf{x}\\rangle_\\mathcal{L} = 0\\}.\n\\end{equation}\n\\end{definition}\n\n\\begin{definition}[Exponential \\& Logarithmic Map]\n\\label{def:lorentz_exponential_map}\nFor $\\mathbf{x}\\in \\mathbb{H}_\\kappa^n$ and $\\mathbf{v}\\in\\mathcal{T}_\\mathbf{x}\\mathbb{H}_\\kappa^n$ such that $\\mathbf{v} \\neq \\mathbf{0}$ and $\\mathbf{y} \\neq \\mathbf{x}$, there exists a unique geodesic $\\gamma:[0,1]\\to\\mathbb{H}_\\kappa^n$ where $\\gamma(0)=\\mathbf{x}, \\gamma^\\prime(0)=\\mathbf{v}$.\nThe exponential map $\\exp_\\mathbf{x}: \\mathcal{T}_\\mathbf{x}\\mathbb{H}_\\kappa^n \\to \\mathbb{H}_\\kappa^n$ is defined as $\\exp_{\\mathbf{x}}(\\mathbf{v})=\\gamma(1)$. Mathematically, \n% \\frac{\\|\\mathbf{v}\\|_{\\mathcal{L}}{\\sqrt{K}}\n\\begin{equation}\n    \\exp_{\\mathbf{x}}^{\\kappa}(\\mathbf{v})=\\cosh \\left(\\frac{\\|\\mathbf{v}\\|_{\\mathcal{L}}}{\\sqrt{\\kappa}}\\right) \\mathbf{x} + \\sqrt{\\kappa} \\sinh\\left(\\frac{\\|\\mathbf{v}\\|_\\mathcal{L}}{\\sqrt{\\kappa}}\\right){\\frac{\\mathbf{v}}{\\|\\mathbf{v}||_{\\mathcal{L}}}},\n\\end{equation}\nwhere $\\|\\mathbf{v}\\|_\\mathcal{L} = \\sqrt{\\langle \\mathbf{v}, \\mathbf{v}\\rangle _\\mathcal{L}}$ is the Lorentzian norm of $\\mathbf{v}$.\nThe logarithmic map $\\log_\\mathbf{x}$ is the inverse of the exponential $\\exp_\\mathbf{x}$, which is given by\n\\begin{equation}\n    \\log_{\\mathbf{x}}^{\\kappa}(\\mathbf{y})=d_{\\mathcal{L}}^\\kappa(\\mathbf{x},\\mathbf{y})\\frac{\\mathbf{y}+\\frac{1}{\\kappa}\\langle \\mathbf{x}, \\mathbf{y} \\rangle_\\mathcal{L}\\mathbf{x}}{\\|\\mathbf{y} + \\frac{1}{\\kappa}\\langle \\mathbf{x}, \\mathbf{y} \\rangle_\\mathcal{L}\\mathbf{x}\\|},\n\\end{equation}\nwhere $d_\\mathcal{H}^\\kappa(\\cdot, \\cdot)$ is the distance between two points $\\mathbf{x}, \\mathbf{y}\\in \\mathbb{H}^n_\\kappa$, which is formulated as:\n\\begin{equation}\n    d_\\mathcal{H}^\\kappa(\\mathbf{x}, \\mathbf{y}) = \\sqrt{\\kappa}\\mbox{arcosh}(-\\langle \\mathbf{x}, \\mathbf{y}\\rangle _\\mathcal{L}/\\kappa).\n\\end{equation}\n\\end{definition}\n\nFor simplicity, we fix $\\kappa$ and set it to 1, implying that the curvature is $-1$. We will disregard $\\kappa$ in the following parts for brevity.\n\n% ============================================\n"
            },
            "section 4": {
                "name": "Investigation and Method",
                "content": "\n% *************************************************************\n",
                "subsection 4.1": {
                    "name": "Hyperbolic Graph Collaborative Filtering in Brief",
                    "content": "\nThe basic concept behind Euclidean and hyperbolic graph collaborative filtering~\\cite{he2020lightgcn,wang2019ngcf,sun2021hgcf,chen2021modeling} is to extract high-order dependencies between users and items via a message aggregation mechanism. By graph collaborative filtering, users who like the same items, as well as items that are liked by the same users, will be grouped together.\nHyperbolic graph collaborative filtering, similar to its Euclidean counterpart, comprises three components: (1) hyperbolic encoding layer; (2) hyperbolic neighbor aggregation; and (3) prediction layer.\n\n\\textbf{Hyperbolic encoding layer.} The purpose of the hyperbolic encoding layer is to create an initial hyperbolic embedding for users and items. \nGaussian distribution initialization is a typical method in Euclidean space. Similarly, a hyperbolic Gaussian sampling method is applied for hyperbolic recommendation models~\\cite{sun2021hgcf,chen2021modeling,yang2022hrcf}. Formally, we use $\\mathbf{x}\\in\\mathbb{R}^n$ to represent the Euclidean state of the node (including the user and the item). Then the initial hyperbolic node state $\\mathbf{e}_i^0$ and $\\mathbf{e}_u^0$ can be obtained by:\n\\begin{equation}\n\\begin{aligned}\n    \\mathbf{e}_i^0 &= \\exp_\\mathbf{o}(\\mathbf{z}_i^0), \\quad \\quad \\mathbf{e}_u^0 = \\exp_\\mathbf{o}(\\mathbf{z}_u^0) \\\\\n    \\mathbf{z}_i^0 &= (0, \\mathbf{x}_i), \\quad\\quad \\mathbf{z}_u^0 = (0, \\mathbf{x}_u)\n\\end{aligned}\n    \\label{equ: initialization}\n\\end{equation}\nwhere $\\mathbf{x}$ is taken from multivariate Gaussian distribution. $\\mathbf{z}^0 = (0, \\mathbf{x})$ denotes the operation of inserting the value 0 into the zeroth coordinate of $\\mathbf{x}$ so that $\\mathbf{z}^0$ can always live in the tangent space of origin. The superscript $0$ in $\\mathbf{e}^0$ and $\\mathbf{z}^0$ indicate the initial or zeroth layer state.\n\n\n\\textbf{Hyperbolic neighbor aggregation.} Hyperbolic neighbor aggregation is used to extract explicit user-item interaction. The hyperbolic neighbor aggregation is computed by aggregating neighboring representations of user and item from the previous aggregation. Given the neighbors $\\mathcal{N}_i$ and $\\mathcal{N}_u$ of $i$ and $u$, respectively, the embedding of user $u$ and $i$ is updated using the tangent state $\\mathbf{z}$ and the $k$-th ($k$>0) aggregation is given by:\n\\begin{equation}\n    \\mathbf{z}_i^{k} = \\mathbf{z}_i^{k-1} + \\sum_{u\\in \\mathcal{N}_i}\\frac{1}{|\\mathcal{N}_i|}\\mathbf{z}_u^{k-1}, \\quad\\quad \\mathbf{z}_u^{k} = \\mathbf{z}_u^{k-1} + \\sum_{i\\in \\mathcal{N}_u}\\frac{1}{|\\mathcal{N}_u|}\\mathbf{z}_i^{k-1}. \n\\end{equation}\nwhere $|\\mathcal{N}_u|$ and $|\\mathcal{N}_i|$ are the number of one-hop neighbors of $u$ and $i$, respectively.\nFor high-order aggregation, sum-pooling is applied in these $k$ tangential states:\n\\begin{equation}\n    \\mathbf{z}_i = \\sum_{k} \\mathbf{z}_i^k, \\quad\\quad \\mathbf{z}_u = \\sum_{k} \\mathbf{z}_u^k.\n    \\label{equ:multiple aggregation}\n\\end{equation}\nNote that $\\mathbf{z}$ is on the tangent space of origin. For the hyperbolic state, it is projected back to the hyperbolic space with the exponential map,\n\\begin{equation}\n    \\mathbf{e}_i=\\exp_\\mathbf{o}(\\mathbf{z}_i), \\quad\\quad\\mathbf{e}_u=\\exp_\\mathbf{o}(\\mathbf{z}_u),\n\\end{equation}\nwhere $\\mathbf{e}_i$ and $\\mathbf{e}_u$ represents the final hyperbolic embeddings.\n\n\\textbf{Prediction layer}.\nThrough hyperbolic neighbor propagation, explicitly structural information is embedded in the user and item embeddings.\nTo infer the preference of a user for an item, the hyperbolic distance $d_\\mathcal{H}$ can be used for the prediction,\n$\n    p(u,i) = 1/{d^2_\\mathcal{H}(\\mathbf{e}_u,\\mathbf{e}_i)}.\n$\nSince we concerned with the rank of preferred items, the negative form can likewise be used for prediction, i.e, $p(u,i)=-{d^2_\\mathcal{H}(\\mathbf{e}_u, \\mathbf{e}_i)}$.\n\n% *************************************************************\n"
                },
                "subsection 4.2": {
                    "name": "Investigation",
                    "content": "\n\\label{sec:observation}\nAccording to previous research~\\cite{he2020lightgcn,sun2021hgcf}, the hyperbolic model~\\cite{sun2021hgcf,yang2022hrcf} performs more competitively than that built in the Euclidean space~\\cite{he2020lightgcn} using models with essentially the same structure.  \nHowever, it is unclear in what aspects the hyperbolic model excels above its Euclidean equivalent. Simultaneously, it is uncertain in which places hyperbolic models are worse than Euclidean models. These issues obstruct our understanding of hyperbolic recommendation models and hinder their applications in real-world scenarios.\n\nTo solve the aforementioned doubts, we undertake a quantitative analysis that aims to experimentally study the behaviors of hyperbolic and Euclidean recommendation models by disentangling their performance on the tail and head items.  In particular, we first sort the items by their degree, which is similar to popularity, and then split them into head 20\\% (denoted as {H20}, or $\\mathcal{I}_{H20}$) and tail 80\\%, (denoted T80, or $\\mathcal{I}_{T80}$).  \nNext, we investigate the effect of recommendation via the Recall@K and NDCG@K metric on H20 and T80 items, respectively, using the Euclidean graph collaborative filter model, LightGCN, and the corresponding hyperbolic model, HGCF. The results are shown in Figure~\\ref{fig:obversation_on_hgcf_lightgcn}. From the experimental results, we have the following observations:\n\\begin{itemize}\n    \\item The overall recommendation performance of the hyperbolic model is better than that of the Euclidean model;\n    \\item Tail items get greater emphasis in the hyperbolic model as the results on tail items are far beyond that of the Euclidean counterpart ;\n    \\item Head items receive moderate attention in the hyperbolic model as the performance of HGCF is sightly lower than that of LightGCN.\n\\end{itemize}\nThe above results are closely related to the geometric properties of hyperbolic space:  the exponentially increased capacity of hyperbolic space enables the hyperbolic model to pay more attention to tail items compared with the Euclidean models and thus obtain an impressive performance.\nThen, it is easy to know that hyperbolic recommendation models are beneficial for personalized recommendations and increasing market diversity.\\footnote{As we know, the head item is popular and liked by a large number of users while the tail item is either personalized reflecting the unique preference of the user, or something fresh increasing the diversity of the market.} The hyperbolic model is a strong contender, but there are still two main shortages in the current hyperbolic model. \n(1) Despite the fact that the hyperbolic model produces better overall outcomes and has a greater recommendation effect on tail items, there is still large room for improvement. The reason is that \ntail items account for more user interests in Amazon-CD (54\\% T80 vs 46\\% H20) and Amazon-Book (53\\% T80 vs 47\\%) as given in Table~\\ref{tab:datasets}, but the recommendation effect of the tail item is much lower than that of the head items, as shown in Figure~\\ref{fig:obversation_on_hgcf_lightgcn}.\n(2) Besides, compared with Euclidean space, hyperbolic space reduces the attention of the model on head items to a certain extent. Thus, there is an urgent need to improve the recommendation ability of head items. In this work, we aim to alleviate the above problems by improving both the head and tail items.\n% *************************************************************\n"
                },
                "subsection 4.3": {
                    "name": "Hyperbolic Informative Collaborative Filtering",
                    "content": "\n\n\n\nAs we know, the optimization objectives for the representation of the user-item are generally to pull the embedding position between the user $u$ and the positive item $i$, and to push the embedding between the user $u$ and a negative item $j$. \n{The exponential growth volume} of the hyperbolic space allows samples in the hyperbolic space to be substantially more concentrated while retaining the necessary separation. \n\nAs a result, hyperbolic margin ranking learning (HMRL)~\\cite{sun2021hgcf} becomes a potent optimization tool adequately separating the items and avoiding the undesirable collapse that occurs in Euclidean space~\\cite{SML2020}. HMRL, which contains two crucial components, pull and push, is used to minimize the following loss function:\n\\begin{equation}\n    \\ell(u,i,j) = \\max(\\underbrace{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_i)}_{\\text{Pull}}-\\underbrace{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_j)}_{\\text{Push}}+m, 0), \n    \\label{equ:origin_ranking_loss}\n\\end{equation}\nwhere $d_\\mathcal{H}$ is the hyperbolic distance and $m$ determines the margin between the distance difference between $(u, i)$ and $(u,j)$. \nInspired by Equation~(\\ref{equ:origin_ranking_loss}), we attempt to simultaneously improve the performance of the recommendation on head and tail items from the perspective of pulling and pushing. Specifically, hyperbolic informative collaborative filtering (HICF) is proposed to enable the pull and push processes to be geometric-aware.\n\n% *************************************************************\n",
                    "subsubsection 4.3.1": {
                        "name": "Pull: Hyperbolic-aware Margin Learning (HAML)",
                        "content": "\nHyperbolic space is negatively curved space, meaning that as the radius increases, the volume of space grows exponentially. Put it another way, the area close to the origin is flatter, whereas the region further away curves more and has a larger capacity. As shown in Figure~\\ref{fig:lorentz_model_of_hyperbolic_space}, on the right side of the axis $x_0$, there are two pair nodes $\\{(\\mathbf{e}_1, \\mathbf{e}_2), (\\mathbf{e}_3,\\mathbf{e}_4)\\}$ and their distances are equal in the Euclidean space, i.e. $d_E(\\mathbf{e}_1, \\mathbf{e}_2)=d_E(\\mathbf{e}_3, \\mathbf{e}_4)$, but different in the hyperbolic space. In particular, the distance of the node pair located near the \\underline{o}rigin of \\underline{h}yperbolic space (HO), is smaller than that far from HO, i.e., $d_\\mathcal{H}(\\mathbf{e}_3, \\mathbf{e}_4)<d_\\mathcal{H}(\\mathbf{e}_1, \\mathbf{e}_2)$. Such geometric properties make it natural for us to design a hyperbolic geometry-aware optimization scheme, instead of simply migrating the loss function of Euclidean space to hyperbolic space like Equation (\\ref{equ:origin_ranking_loss}). \n\nOur main idea is to design a geometric aware margin ranking learning which enjoys the properties of hyperbolic space. Specifically, we suggest assigning a larger margin to the case where the pair (u, i) of the user and the positive item is closer to the hyperbolic origin and a smaller margin to that far away from the HO. \nIt is motivated by the fact that the area close to HO is relatively flatter and the node pair is positioned in a narrow region, so a larger margin is required to SQUEEZE or PULL the pair (u, i) together, while the area distant from HO bends more and the node pair is placed in a spacious area, so a lesser margin is sufficient.\\footnote{Otherwise, with the head items or high-level nodes being self-optimized close to HO referred to~\\cite{nickel2017poincare,nickel2018learning,hgcn2019}, HRML, equipped with a geometric unconscious margin (e.g., a constant value), may make these head nodes difficult to be properly distinguished. This explains why the HGCF generally performs poorly on the head items.}\nInspired by the analysis (Section 2)~\\cite{sala2018representation}, we know that the ratio of $\\{{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{o})+d_\\mathcal{H}^2(\\mathbf{e}_i, \\mathbf{o})\\}/d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_i)}$ is getting smaller when they are moved away from HO. In other words, when the node pair approaches the boundary, their hyperbolic distance will approximate the sum of their hyperbolic norms. Based on these properties, we propose a hyperbolic distance-based manner to compute the margin $m_{ui}^\\mathcal{H}$ which is given by:\n\\begin{equation}\n\\begin{aligned}\n      m^\\mathcal{H}_{ui} &= \\mathrm{sigmoid}(\\delta), \\\\\n      \\delta &= \\frac{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{o})+d_\\mathcal{H}^2(\\mathbf{e}_i, \\mathbf{o})-d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_i)}{\\mathbf{e}_{u,0}\\mathbf{e}_{i,0}},\n\\end{aligned}\n\\label{equ:hyperbolic_margin}\n\\end{equation}\nwhere the denominator is for normalization and $\\mathbf{e}_{u,0}>1$ and $\\mathbf{e}_{i,0}>1$ denote the zeroth coordinate element in $\\mathbf{e}_u$ and $\\mathbf{e}_i$, respectively. \n$m_{ui}^\\mathcal{H}$ is self-adjusting and geometry-aware, which can achieve the emphasise on both head and tail items. \nThe following illustrates the intuitive understanding of Equation~(\\ref{equ:hyperbolic_margin}). Since the sigmoid function increases monotonically, and we are interested in the equation of $\\delta$. The numerator is the difference between the geodesic sum of $\\mathbf{e}_u, \\mathbf{e}_i$ to the hyperbolic origin and the hyperbolic distance of $\\mathbf{e}_u, \\mathbf{e}_i$, and the difference gradually decreases as the $u$ and $i$ locations move away from the hyperbolic origin~\\cite{sala2018representation}. The denominator is for normalization, which increases steadily as it goes away from the hyperbolic origin. Totally, $m^\\mathcal{H}_{ui}$ is getting smaller when $u$ and $i$ are moving far away from HO. Then $m^\\mathcal{H}_{ui}$ is utilized to replace the $m$ in Equation~(\\ref{equ:origin_ranking_loss}).\n\n\\begin{algorithm}[t]\n\\caption{HINS algorithm}\n\\label{alg:hins}\n\\SetKwProg{generate}{Function \\emph{generate}}{}{end}\n\\textbf{Input:} Hyper parameters $n_{neg}$; Item set $\\mathcal{I}$; the embedding matrix ${E}$; The index of the user $u$, its current positive item $i$ and its other positive item $\\mathcal{N}_u$ in the training set.\\\\\n\\textbf{Output:} The informative item index $j$. \\\\\n Random sample $n_{neg}$ items $\\mathcal{I}_u^{[n]}$ from $\\mathcal{I}$\\textbackslash $\\mathcal{N}_{u}$\\;\n \\ForAll{item index $\\bar{j}$ in $\\mathcal{I}_u^{[n]}$}{\n    Get the embeddings of the $\\bar{j}$ from $E$, i.e., $\\mathbf{e}_{\\bar{j}}$\\; \n    Let $j=-1, d_{\\min} = +\\infty$\\;\n    Compute the hyperbolic distance $d_{\\mathcal{H}}(\\mathbf{e}_{\\bar{j}}, \\mathbf{e}_i)$\\; \n   \\If{ $d_{\\mathcal{H}}({\\mathbf{e}_{\\bar{j}}},\\mathbf{e}_i)<d{_{\\min}}$}{\n      $d_{\\min} = d_{\\mathcal{H}}({\\mathbf{e}_{\\bar{j}}}, \\mathbf{e}_i)$\\;\n      $j=\\bar{j}$\\;\n  }\n }\n\\textbf{Return} $j$\\;\n\\end{algorithm}\n% *************************************************************\n"
                    },
                    "subsubsection 4.3.2": {
                        "name": "Push: Hyperbolic Informative Negative Sampling (HINS)",
                        "content": "\n\\label{sec:negative_sampling}\nThe basic idea is to create a training triplet, (a user $u$, the positive item $i$, the negative item $j$), by sampling the negative item $j$ from the similar popularity of item $i$ as shown in the left part of Figure~\\ref{fig:lorentz_model_of_hyperbolic_space}.\nThis strategy provides more information than random sampling. It is simple to understand that a negative sample of a popular item is likely to be another COMPARABLE popular item while choosing the irrelevant one, such as an unpopular item, may have little effect on the optimization. \nOn the other hand, the assumption of random sampling is a uniform distribution, which is incompatible with items distributed by the power law. \n\nIn this work, we propose a self-optimizing, data-independent way to achieve negative sampling in hyperbolic space. The algorithm is demonstrated in Algorithm~\\ref{alg:hins}. In each iteration, we randomly select $n_{neg}$ items $\\mathcal{I}_{u}^{[n]}$, compute the hyperbolic distance between each item $\\bar{j}$ in $\\mathcal{I}_{u}^{[n]}$ and the positive sample $i$ and keep the item with the smallest value, where the smallest value indicates the adjacent position in the hyperbolic space. This strategy ensures that the sampled node is always close to the positive item, no matter where it is positioned, indicating that it can yield informative negative samples for both head and tail items. \n\n\n\n\n% ============================================\n\n\n% ==============================================================================\n"
                    }
                }
            },
            "section 5": {
                "name": "Experiments",
                "content": "\n% *************************************************************\n",
                "subsection 5.1": {
                    "name": "Experimental Settings",
                    "content": "\n\\textbf{Datasets.} \nIn this work, we experiment with three publicly available datasets, namely Amazon-CD$^5$, Amazon-Book\\footnote{https://jmcauley.ucsd.edu/data/amazon/} and Yelp2020\\footnote{https://www.yelp.com/dataset}. Note that we only use user-item interactions to maintain consistency with the comparison models. The statistics of the dataset are in Table~\\ref{tab:datasets}, where H20 and T80 denote the average ratio of the head items and tail items appearing in user's preference. They are calculated by $\\frac{1}{|\\mathcal{U}|}\\sum_{u\\in \\mathcal{U}}\\#\\{\\mathcal{N}_u\\cap\\mathcal{I}_{H20}\\}$ and $\\frac{1}{|\\mathcal{U}|}\\sum_{u\\in \\mathcal{U}}\\#\\{\\mathcal{N}_u\\cap\\mathcal{I}_{B80}\\}$, respectively. \nEach dataset is split into 80\\% and 20\\% training and test sets for training and evaluation, respectively.\nIn these datasets, ratings are transformed into binary preferences using a threshold $\\geq4$ that resembles implicit feedback settings.\n\n\\textbf{Compared methods.} \nTo fully verify the effectiveness of our method, we compare the baselines of the hyperbolic models and the Euclidean models. For the hyperbolic model, we compare with HGCF~\\cite{sun2021hgcf}, HVAE, and HAE. HAE (HVAE) combines a (variational) autoencoder with hyperbolic geometry. Furthermore, we compare several recent strong Euclidean baselines, such as LightGCN~\\cite{he2020lightgcn} and NGCF~\\cite{wang2019ngcf}. In addition, we compare MF-based models, WRMF~\\cite{wrmf2008} and VAE-CF~\\cite{VAECF2018}; and metric learning-based models, TransCF~\\cite{park2018collaborative}, CML~\\cite{CML2017}, LRML~\\cite{LRML2018}, and SML~\\cite{SML2020}. For the data pre-processing and experimental settings, we closely follow previous work HGCF.\n\n\n\\textbf{Experimental setup.}\nFor experimental settings, we closely follow the baseline HGCF to reduce the experiment burden and give a fair comparison. \nTo be more specific, the number of training epochs is fixed at 500 and the embedding size is set at 50.\n% The number of negative samples in HINS is searched from 1 to 200. \nFor gradient optimization, we use the Riemannian SGD~\\cite{bonnabel2013stochastic} with weight decay in the range of $\\{1e-4, 5e-4, 1e-3, 5e-3\\}$ to learn the network parameters at learning rates $\\{0.001, 0.0015, 0.002\\}$. Note that RSGD is a stochastic gradient descent optimization technique that takes the geometry of the hyperbolic manifold into consideration. For the experimental settings of baselines, we refer to~\\cite{sun2021hgcf}. \n\n\\textbf{Evaluation metrics}.\nWe employ two standard evaluation metrics to assess the performance of the top-K recommendation and preference ranking: Recall and NDCG~\\cite{ying2018graph}. We treat each observed interaction between a user and an item as a positive case and then use the HINS to match it with one unfavorable item that the user has not previously rated.\n\n% *************************************************************\n"
                },
                "subsection 5.2": {
                    "name": "Overall Performance",
                    "content": "\nThe overall experimental results of the test set are summarized in Table~\\ref{tab:overall_comparsion}, with the best results in bold, the second-best in italics, and $\\Delta$ representing the relative improvement over the best baseline. In summary, the proposed method successfully outperforms all baselines in both Recall and NDCG metrics, with the highest improvement reaching 12.92\\%, demonstrating its impressive effectiveness. We further illustrate some in-depth observations. First, hyperbolic models, including the proposed HICF and HGCF, are more competitive in modeling large-scale user-item networks than Euclidean models. The main reason is that, as networks expand, the distribution of power laws becomes more apparent. Thereby, the hyperbolic models are more competitive.\nFurthermore, the improvement is observed to be relative to data density (\\textit{c.f.}~Table~\\ref{tab:datasets}). . Specifically, the improvements of the model in the data with higher density, e.g., Amazon-CD which are +12.16\\% for Recall@10 and +12.92\\% for NDCG@10 are generally greater than those in lower density data, e.g., yelp, which are +8.16\\% for Recall@10 and +8.21\\% for NDCG@10. \n\n% *************************************************************\n"
                },
                "subsection 5.3": {
                    "name": "Performance on Head and Tail Items",
                    "content": "\nTo further illustrate the validity of the proposal, we performed an in-depth analysis comparing the performance of the tail and head items separately. For simplicity, we focus on the two most prominent baselines, the hyperbolic HGCF model and its Euclidean counterpart LightGCN. The findings are listed in Table~\\ref{tab:H20_T80_results}, where $\\Delta_\\mathcal{H}$ represents the improvements over the hyperbolic model, especially demonstrating the role of the proposed method against the original hyperbolic model. \nThe corresponding overall performance can be computed by adding the results of H20 and T80 together, and the best overall performances among HICF, HRCF, and LightGCN are bold.\n\n\\textcolor{black}{From the experimental results and the bold notation in Table~\\ref{tab:H20_T80_results}, we know that the performance of the proposed HICF consistently outperforms the baselines. In particular, we discovered that the performance of hyperbolic models including our HICF and HGCF on tail items is eye-catching, while the performance on head items is slightly inferior. Overall, the proposed HICF successfully achieves the aforementioned goal, e.g., enabling the hyperbolic model to improve the performance on both tail items and head items.  \nIn particular, for \\textit{tail} items, we found that HICF performance is significantly improved compared to HGCF on Amazon-CD and Amazon-Book with the largest improvement up to 26.69\\% and 16.73\\%, respectively, and stays comparable on Yelp, which may be due to the fact that Yelp users show fewer interests in tail items, as seen from Table~\\ref{tab:datasets}. For \\textit{head} items, the performances of HICF comprehensively outperform that of HGCF and the improvements are up to 8.43\\% on Amazon-CD, 12.50\\% on Amazon-Book, and 11.58\\% on Yelp. In addition, HICF narrows the performance gap of the tail items with Euclidean LightGCN on Amazon-CD and Amazon-Book and impressively surpasses the performance of LightGCN on Yelp.\n}\n\n\n% *************************************************************\n"
                },
                "subsection 5.4": {
                    "name": "Generalization w.r.t. Embedding sizes",
                    "content": "\nConsidering that the embedding dimension has an effect on the embedding capacity and the pairwise embedding distance, to fully verify the generalization of our proposed method, we traverse different embedding dimensions for evaluation. The experimental results are shown in Figure~\\ref{fig:dim_study}. From the experimental results, we easily know that the proposed HICF continuously outperforms the strongest baseline HGCF. At the same time, we found that with the increase of the embedding dimension, the performance of the model is further improved. These findings validate the strong generalizability of the proposed HICF.\n\n% *************************************************************\n"
                },
                "subsection 5.5": {
                    "name": "Convergent Speed w.r.t Training Epochs",
                    "content": "\n\n\nLikewise, we analyze the convergence of the proposed approach for training the proposed HICF model and its most comparable equivalent HGCF. Figure~\\ref{fig:metric_training_epoch} shows the performance of the Recall@20 metrics for epochs from 1 to 500. Other metrics@Ks show a similar tendency. The following conclusions are drawn from the experimental findings: (1) the proposed HICF repeatedly outperforms the baseline model in all epochs; (2) the proposed technique is capable of achieving the highest performance in fewer epochs, indicating that HICF can speed up the training process.\n\n% *************************************************************\n"
                },
                "subsection 5.6": {
                    "name": "Ablation Study",
                    "content": "\n\n\nIn this part, we conduct an ablation study to evaluate the effectiveness of each component in the proposed HICF. We remove HAML and HINS separately. In Table~\\ref{tab:ablation_study}, we report the corresponding results for Recall@20. Note that other metric@Ks have similar outcomes. We know that removing both HAML and HINS will lead to degradation of the model performance, which verifies the effectiveness of the proposed method. In particular, Removing HINS on both Amazon-CD and Amazon-Book leads to a large decline, while Yelp has a smaller drop, which is mainly due to the density of the dataset. The Amazon-Book and Amazon-CD dataset are relatively dense and require more negative samples for selection, while Yelp is sparse and less dependent on informative negative samples.\n\n% *************************************************************\n"
                },
                "subsection 5.7": {
                    "name": "Parameter Analysis",
                    "content": "\n\n\n\nThe number of negative samples for the selection is a critical hyperparameter in this study. In our research, we discovered that it varies with each dataset, but a simple grid search enables us to quickly locate a suitable value. We do a parameter sensitivity study on Amazon-Book and Yelp in this section. As shown in Figure~\\ref{fig:nneg_study}, we know that Yelp requires fewer negative samples for selection and Amazon-Book requires more negative samples for selection.\nIt can be understood that when the dataset (e.g., Amazon-Book) is relatively dense, each node has more neighbors, and then more negative candidates are required to find a suitable one. The influence of parameter analysis is also reflected in the ablation study of HINS.\n\n% ==============================================================================\n"
                }
            },
            "section 6": {
                "name": "Conclusion",
                "content": "\n\nHyperbolic models have received increasing attention in the recommendation community, while their pros and cons over their Euclidean counterparts have not been explicitly studied.  In this work, we attempt to initiate the investigation by further separately comparing their performance on head-and-tail items against the Euclidean equivalents. \nOverall, the hyperbolic model shows apparent superiority. It is also observed that the hyperbolic model performs substantially better on tail items than the Euclidean equivalent, but there is still sufficient room for improvement. For the head item, the hyperbolic model gives modest attention.\nMotivated by the observations, we propose a geometry boosted hyperbolic collaborative filtering (i.e., HICF). Our technique is designed to make the pull and push components of the hyperbolic margin ranking loss geometric aware, which then provides informative optimization guidance for both head and tail items. It is worth noting that our approach is not limited to collaborative filtering-based models but is also applicable to other recommendation models. \n\nThe above observation and proposed technique shed more light on the role of hyperbolic models in the recommender system. Note that the exponentially increased capacity of hyperbolic space allows the model to pay more attention to tail items, which is beneficial for personalized recommendations and increasing market diversity. \nIn future work, we aim to analyze the advantages and disadvantages of hyperbolic representation models from more generalized settings and other applications~\\cite{zixingsurvey,FeatureNorm2020, li2019improving,li2020unsupervised,li2022text,li2022bsal,zhou2022telegraph}. \n\n\n\\begin{acks}\nThe work described in this paper was partially supported by the National Key Research and Development Program of China (No. 2018AAA0100204) and the Research Grants Council of the Hong Kong Special Administrative Region, China (CUHK 2410021, Research Impact Fund, No. R5034-18). We thank the anonymous reviewers for their constructive comments.\n\\end{acks}\n% ============================================\n\\bibliographystyle{ACM-Reference-Format}\n\\balance \n\\bibliography{reference}\n\\newpage\n\\appendix\n\\onecolumn\n"
            },
            "section 7": {
                "name": "Comparison with Other Negative Samplings",
                "content": "\nTo our knowledge, there is no technique, especially for performing negative sampling in hyperbolic recommender systems. In this section, we compare three widely used techniques to obtain negative sampling in Euclidean models: dynamic random sampling (DS), popularity-based sampling (Popularity) and mix feature sampling (Mix).\nDynamic random sampling is used to randomly select a node as the negative item in each iteration.\nThe purpose of popularity-based sampling is to select negative items based on their degrees, which could reflect their popularity. The sampling process is performed before the training process, which is a static method.\nThe mixing feature method is based on the idea of~\\cite{huang2021mixgcf}, that is, creating a negative sample based on the mix of positive and negative items. Mixing method obtains negative samples in each iteration which is a dynamic method.\n\nAs shown in Table~\\ref{tab:negative_sampling}, we found that among the three sampling methods, DS sampling can improve the performance of recommendations to some extent. The reason lies that compared to static methods, dynamic methods help the model learn more negative samples and obtain enough information. However, DS is insufficient, as most negative samples are trivial or noisy. Combined with the performance of HICF (ours), we know that the proposed HINS is much more helpful. In addition, the other two methods based on popularity and fusion methods are not compatible with hyperbolic models, which perform much worse on hyperbolic models.\n\n\n\n"
            }
        },
        "tables": {
            "tab:datasets": "\\begin{table}[!t]\n\\caption{Statistics of the experimental data.}\n\\label{tab:datasets}\n\\centering\n\\resizebox{0.48\\textwidth}{!}{%\n\\begin{tabular}{@{}ccccccc@{}}\n\\toprule\n\\multirow{2}{*}{Dataset} & \\multirow{2}{*}{\\#User} & \\multicolumn{3}{c}{\\#Item} & \\multirow{2}{*}{\\#Interactions} & \\multirow{2}{*}{Density} \\\\ \\cmidrule(lr){3-5}\n                         &                         & All    & H20(\\%) & T80(\\%) &                                 &                          \\\\ \\midrule\nAmazon-CD               & 22,947                  & 18,395 & 46    & 54    & 422,301                         & 0.10\\%                   \\\\\nAmazon-Book             & 52,406                  & 41,264 & 47    & 53    & 1,861,118                       & 0.09\\%                   \\\\\nYelp2020                 & 71,135                  & 45,063 & 62    & 37    & 1,940,014                       & 0.05\\%                   \\\\ \\bottomrule\n\\end{tabular}%\n}\n\\end{table}",
            "tab:overall_comparsion": "\\begin{table*}[h]\n\\caption{Recall (top table) and NDCG (bottom table) results for all datasets. The best performing model on each dataset and metric is highlighted in bold, and the second-best model is underlined. The presence of an asterisk indicates that the Wilcoxon signed-rank test for the difference in scores between the best and second-best models is statistically significant.}\n\\label{tab:overall_comparsion}\n\\resizebox{\\textwidth}{!}{%\n\\begin{tabular}{@{}cc|cc|cccc|cc|ccc|cr@{}}\n\\toprule\n\\multicolumn{2}{c|}{Datasets}                            & WRMF   & VAE-CF & TransCF & CML    & LRML   & SML    & NGCF   & LightGCN & HAE    & HAVE   & HGCF   & Ours   & $\\Delta$(\\%) \\\\ \\midrule\n\\multicolumn{1}{c|}{\\multirow{2}{*}{Amazon-CD}}   & R@10 & 0.0863 & 0.0786 & 0.0518  & 0.0864 & 0.0502 & 0.0475 & 0.0758 & 0.0929   & 0.0666 & 0.0781 & \\underline{0.0962} & \\textbf{0.1079}* & +12.16    \\\\\n\\multicolumn{1}{c|}{}                             & R@20 & 0.1313 & 0.1155 & 0.0791  & 0.1341 & 0.0771 & 0.0734 & 0.1150  & 0.1404   & 0.0963 & 0.1147 & \\underline{0.1455} & \\textbf{0.1586}* & +9.00     \\\\ \\midrule\n\\multicolumn{1}{c|}{\\multirow{2}{*}{Amazon-Book}} & R@10 & 0.0623 & 0.0740  & 0.0407  & 0.0665 & 0.0522 & 0.0479 & 0.0658 & 0.0799   & 0.0634 & 0.0774 & \\underline{0.0867} & \\textbf{0.0965}* & +11.30    \\\\\n\\multicolumn{1}{c|}{}                             & R@20 & 0.0919 & 0.1066 & 0.0632  & 0.1023 & 0.0834 & 0.0768 & 0.1050  & 0.1248   & 0.0912 & 0.1125 & \\underline{0.1318} & \\textbf{0.1449}* & +9.94     \\\\ \\midrule\n\\multicolumn{1}{c|}{\\multirow{2}{*}{Yelp2020}}    & R@10 & 0.0470  & 0.0429 & 0.0247  & 0.0363 & 0.0326 & 0.0319 & 0.0458 & 0.0522   & 0.0360  & 0.0421 & \\underline{0.0527} & \\textbf{0.0570}* & +8.16     \\\\\n\\multicolumn{1}{c|}{}                             & R@20 & 0.0793 & 0.0706 & 0.0424  & 0.0638 & 0.0562 & 0.0544 & 0.0764 & 0.0866   & 0.0588 & 0.0691 & \\underline{0.0884} & \\textbf{0.0948}* & +7.24     \\\\ \\bottomrule\n\\end{tabular}%\n}\n\n\\vspace{10pt}\n\\resizebox{\\textwidth}{!}{%\n\\begin{tabular}{@{}cc|cc|cccc|cc|ccc|cr@{}}\n\\toprule\n\\multicolumn{2}{c|}{Datasets}                            & WRMF   & VAE-CF & TransCF & CML    & LRML   & SML    & NGCF   & LightGCN & HAE    & HAVE   & HGCF   & Ours   & $\\Delta$(\\%) \\\\ \\midrule\n\\multicolumn{1}{c|}{\\multirow{2}{*}{Amazon-CD}}   & N@10 & 0.0651 & 0.0615 & 0.0396  & 0.0639 & 0.0405 & 0.0361 & 0.0591 & 0.0726   & 0.0565 & 0.0629 & \\underline{0.0751} & \\textbf{0.0848}*  & +12.92    \\\\\n\\multicolumn{1}{c|}{}                             & N@20 & 0.0817 & 0.0752 & 0.0488  & 0.0813 & 0.0492 & 0.0456 & 0.0718 & 0.0881   & 0.0657 & 0.0749 & \\underline{0.0909} & \\textbf{0.1010}* & +11.11    \\\\ \\midrule\n\\multicolumn{1}{c|}{\\multirow{2}{*}{Amazon-Book}} & N@10 & 0.0563 & 0.0716 & 0.0392  & 0.0624 & 0.0515 & 0.0422 & 0.0655 & 0.0780    & 0.0709 & 0.0778 & \\underline{0.0869} & \\textbf{0.0978}* & +12.54    \\\\\n\\multicolumn{1}{c|}{}                             & N@20 & 0.0730  & 0.0878 & 0.0474  & 0.0808 & 0.0626 & 0.0550  & 0.0791 & 0.0938   & 0.0789 & 0.0901 & \\underline{0.1022} & \\textbf{0.1142}* & +11.74    \\\\ \\midrule\n\\multicolumn{1}{c|}{\\multirow{2}{*}{Yelp2020}}    & N@10 & 0.0372 & 0.0353 & 0.0214  & 0.0310  & 0.0287 & 0.0255 & 0.0405 & 0.0461   & 0.0331 & 0.0371 & \\underline{0.0458} & \\textbf{0.0502}* & +9.13    \\\\\n\\multicolumn{1}{c|}{}                             & N@20 & 0.0506 & 0.0469 & 0.0277  & 0.0428 & 0.0369 & 0.0347 & 0.0513 & 0.0582   & 0.0409 & 0.0465 & \\underline{0.0585} & \\textbf{0.0633}* & +8.21     \\\\ \\bottomrule\n\\end{tabular}\n}\n\\end{table*}",
            "tab:H20_T80_results": "\\begin{table*}[h]\n\\caption{Performance in the H20 and T80 items for all datasets. $\\Delta_\\mathcal{H}$ represents the relative improvements compared with the strong hyperbolic baseline HGCF. The bold denotes the best overall improvements among LightGCN, HGCF, and ours.}\n\\label{tab:H20_T80_results}\n\\resizebox{0.98\\textwidth}{!}{%\n\\begin{tabular}{c|l|cc|cc|cc|cc|cc|cc}\n\\hline\n\\multicolumn{1}{c|}{\\multirow{2}{*}{\\textbf{Datasets}}} & \\multicolumn{1}{l|}{\\multirow{2}{*}{Models}} & \\multicolumn{2}{c|}{R@20}        & \\multicolumn{2}{c|}{R@10}        & \\multicolumn{2}{c|}{R@5}          & \\multicolumn{2}{c|}{N@20}         & \\multicolumn{2}{c|}{N@10}         & \\multicolumn{2}{c}{N@5}           \\\\  \n\\multicolumn{1}{r|}{}                                   & \\multicolumn{1}{r|}{}                        & H20            & T80             & H20            & T80             & H20             & T80             & H20             & T80             & H20             & T80             & H20             & T80             \\\\ \\midrule\n\\multirow{4}{*}{Amazon-CD}   & LightGCN      & 0.1062      & 0.0342     & 0.0741      & 0.0188     & 0.0493     & 0.0104     & 0.0712      & 0.0169     & 0.0608      & 0.0118     & 0.0529     & 0.0084     \\\\\n                             & HGCF          & 0.0998      & 0.0457     & 0.0667      & 0.0295     & 0.0439     & 0.0179     & 0.0658      & 0.0251     & 0.0550      & 0.0201     & 0.0486     & 0.0157     \\\\\n                             & \\textbf{HICF(Ours)} & \\textbf{0.1027}      & \\textbf{0.0559}     & \\textbf{0.0717}      & \\textbf{0.0362}     & \\textbf{0.0476}     & \\textbf{0.0222}     & \\textbf{0.0692}      & \\textbf{0.0318}     & \\textbf{0.0596}      & \\textbf{0.0252}     & \\textbf{0.0527}     & \\textbf{0.0197}     \\\\\n                             & $\\Delta_\\mathcal{H}(\\%)$      & +2.91       & +22.32     & +7.50       & +22.71     & +8.43      & +24.02     & +5.17       & +26.69     & +8.36       & +25.37     & +8.44      & +25.48     \\\\ \\midrule\n\\multirow{4}{*}{Amazon-Book} & LightGCN      & 0.0915      & 0.0333     & 0.0624      & 0.0175     & 0.0390     & 0.0104     & 0.0740      & 0.0198     & 0.0635      & 0.0145     & 0.0589     & 0.0104     \\\\\n                             & HGCF          & 0.0829      & 0.0489     & 0.0550      & 0.0317     & 0.0344     & 0.0197     & 0.0670      & 0.0352     & 0.0578      & 0.0291     & 0.0539     & 0.0251     \\\\\n                             & \\textbf{HICF(Ours)} & \\textbf{0.0898}      & \\textbf{0.0551}     & \\textbf{0.0603}      & \\textbf{0.0362}     & \\textbf{0.0387}     & \\textbf{0.0227}     & \\textbf{0.0738}      & \\textbf{0.0404}     & \\textbf{0.0642}      & \\textbf{0.0336}     & \\textbf{0.0605}     & \\textbf{0.0293}     \\\\\n                             & $\\Delta_\\mathcal{H}(\\%)$      & +8.32       & +12.68     & +9.64       & +14.20     & +12.50     & +15.23     & +10.15      & +14.77     & +11.07      & +15.46     & +12.24     & +16.73     \\\\ \\midrule\n\\multirow{3}{*}{Yelp2020}        & LightGCN      & 0.0836      & 0.0030     & 0.0512      & 0.0010     & 0.0298     & 0.0003     & 0.0567      & 0.0015     & 0.0448      & 0.0006     & 0.0380     & 0.0004     \\\\\n                             & HGCF          & 0.0788      & \\textbf{0.0096}     & 0.0473      & \\textbf{0.0054}     & 0.0270     & 0.0030     & 0.0526      & \\textbf{0.0059}     & 0.0417      & 0.0043     & 0.0354     & \\textbf{0.0033}     \\\\\n                             & \\textbf{HICF(Ours)} & \\textbf{0.0854}      & 0.0094     & \\textbf{0.0518}      & 0.0052     & \\textbf{0.0299}     & 0.0029     & \\textbf{0.0576}      & 0.0057     & \\textbf{0.0461}      & 0.0041     & \\textbf{0.0395}     & 0.0032     \\\\\n                             & $\\Delta_\\mathcal{H}(\\%)$      & +8.38       & -2.08      & +9.51       & -3.70      & +10.74     & -3.33      & +9.51       & -3.39      & +10.55      & -4.65      & +11.58     & -3.03      \\\\ \\bottomrule\n\\end{tabular}%\n}\n\\end{table*}",
            "tab:ablation_study": "\\begin{table}[]\n\\caption{Ablation study (AS) for HICF. w/o M denotes without HAML and w/o S denotes without HINS in HICF.}\n\\centering\n\\label{tab:ablation_study}\n\\resizebox{0.48\\textwidth}{!}{%\n\\begin{tabular}{@{}c|ccc|ccc|ccc@{}}\n\\toprule\n\\multirow{2}{*}{AS} & \\multicolumn{3}{c|}{Amazon-CD} & \\multicolumn{3}{c|}{Amazon-Book} & \\multicolumn{3}{c}{Yelp2020} \\\\ \\cmidrule(l){2-10} \n                  & R@20     & H20      & T80      & R@20      & H20       & T80      & R@20   & H20    & T80    \\\\ \\midrule\nHICF              & \\textbf{0.1586}   & \\textbf{0.1027}   & \\textbf{0.0559}   & \\textbf{0.1449}    & \\textbf{0.0898}    & \\textbf{0.0551}   & \\textbf{0.0947} & \\textbf{0.0854} & {0.0094} \\\\\nw/o M             & 0.1534   & 0.0968   & 0.0566   & 0.1363    & 0.0844    & 0.0519   & 0.0901 & 0.0803 & \\textbf{0.0098} \\\\\nw/o S             & 0.1492   & 0.1021   & 0.0472   & 0.1312    & 0.0813    & 0.0499   & 0.0921 & 0.0826 & 0.0096 \\\\ \\bottomrule\n\\end{tabular}%\n}\n\\end{table}",
            "tab:negative_sampling": "\\begin{table*}[!t]\n\\centering\n\\caption{Comparisons with different negative sampling techniques.}\n\\label{tab:negative_sampling}\n\\resizebox{0.94\\textwidth}{!}{%\n\\begin{tabular}{@{}l|cccc|cccc|cccc@{}}\n\\toprule\nDataset   & \\multicolumn{4}{c|}{Amazon-CD}      & \\multicolumn{4}{c|}{Amazon-Book}    & \\multicolumn{4}{c}{Yelp2020}           \\\\ \nMetrics   & DS     & Popularity & Mix    & Ours   & DS     & Popularity & Mix    & Ours   & DS     & Popularity & Mix    & Ours   \\\\ \\midrule\nRecall@10 & 0.1013 & 0.0912  & 0.0884 & \\textbf{0.1079} & 0.0858 & 0.0860  & 0.0757 & \\textbf{0.0965} & 0.0542 & 0.0528  & 0.0454 & \\textbf{0.0570}  \\\\\nNDCG@10   & 0.0793 & 0.0708  & 0.0684 & \\textbf{0.0848} & 0.0842 & 0.0860  & 0.0749 & \\textbf{0.0978} & 0.0470 & 0.0460  & 0.0396 & \\textbf{0.0502} \\\\\nRecall@20 & 0.1504 & 0.1338  & 0.1362 & \\textbf{0.0965} & 0.1310 & 0.1317  & 0.1175 & \\textbf{0.1449} & 0.0898 & 0.0890  & 0.0776 & \\textbf{0.0948} \\\\\nNDCG@20   & 0.0953 & 0.0846  & 0.0839 & \\textbf{0.1010} & 0.1000 & 0.1018  & 0.0894 & \\textbf{0.1142} & 0.0595 & 0.0587  & 0.0508 & \\textbf{0.0633} \\\\ \\bottomrule\n\\end{tabular}%\n}\n\\end{table*}"
        },
        "figures": {
            "fig:user_item_graph": "\\begin{figure}[!t]\n\\centering\n\\includegraphics[width=0.40\\textwidth]{file/figures/user_item.pdf}\n\\caption{Illustration of a user-item graph, in which the popular items, e.g., flower and fruit (the yellow icons) are liked by everyone while the preference of the other items is personalized and individualized, e.g., the paintbrush is only enjoyed by the painter and the guitar is merely appreciated by the musician. \nIt is worth mentioning that the popular items are in the minority, whereas the individualized or unpopular items are in the majority.\n}\n\\label{fig:user_item_graph}\n\\end{figure}",
            "fig:obversation_on_hgcf_lightgcn": "\\begin{figure*}[!t]\n\\centering\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-CD_Recall_20.pdf}\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-CD_NDCG_20.pdf}\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-Book_Recall_20.pdf}\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-Book_NDCG_20.pdf}\n\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-CD_Recall_20.pdf}\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-CD_NDCG_20.pdf}\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-Book_Recall_20.pdf}\n\\includegraphics[width=4.1001cm]{file/figures/top_bottom/Amazon-Book_NDCG_20.pdf}\n\n\\caption{Comparisons of Euclidean and hyperbolic models in Amazon-CD and Amazon-Book datasets. \\texttt{Euc} represents the Euclidean model, LightGCN, and \\texttt{Hyp} denotes the hyperbolic model, HGCF.}\n\\label{fig:obversation_on_hgcf_lightgcn}\n\\end{figure*}",
            "fig:lorentz_model_of_hyperbolic_space": "\\begin{figure}[!t]\n\\centering\n\\includegraphics[width=0.45\\textwidth]{file/figures/hyperbolic_margin.pdf}\n\\caption{Lorentz model of hyperbolic space $\\mathbb{H}^2$ with curvature -1. On the right side of the axis $x_0$, there are two pair nodes $\\{(\\mathbf{e}_1, \\mathbf{e}_2), (\\mathbf{e}_3,\\mathbf{e}_4)\\}$ and their distances are equal in the Euclidean space, i.e., $d_E(\\mathbf{e}_1, \\mathbf{e}_2)=d_E(\\mathbf{e}_3, \\mathbf{e}_4)$, but are different in the hyperbolic space. In particular, the distance of the nodes $(\\mathbf{e}_3, \\mathbf{e}_4)$ located near the origin of hyperbolic space (HO), is smaller than the distance of $(\\mathbf{e}_1, \\mathbf{e}_2)$  far from HO, that is, $d_\\mathcal{H}(\\mathbf{e}_3, \\mathbf{e}_4)<d_\\mathcal{H}(\\mathbf{e}_1, \\mathbf{e}_2)$. On the left side of $x_0$, $\\mathbf{e}_i$ and $\\mathbf{e}_j$ is the positive item and the negative item, respectively, which indicates that sampling a negative item $\\mathbf{e}_j$ is informative for the nodes in positions close to or far from the origin when sampling is close to the positive item $\\mathbf{e}_i$.}\n% \\vspace{-16pt}\n\\label{fig:lorentz_model_of_hyperbolic_space}\n\\end{figure}",
            "fig:dim_study": "\\begin{figure}[!t]\n\\centering\n\\includegraphics[width=4.10cm]{file/figures/dim/dim-Amazon-Book_Recall_20.pdf}\n\\includegraphics[width=4.10cm]{file/figures/dim/dim-Yelp_Recall_20.pdf}\n\\caption{Comparisons among four dimensions $\\{20, 30, 50, 100\\}$ in the Amazon-CD and Amazon-Book datasets. The evaluation metric is Recall@20, and other metrics@K show similar results. }\n\\label{fig:dim_study}\n\\end{figure}",
            "fig:metric_training_epoch": "\\begin{figure}[!t]\n\\centering\n\\includegraphics[width=4.10cm]{file/figures/training_epochs/training_epoch_Amazon-Book_Recall_20.pdf}\n\\includegraphics[width=4.10cm]{file/figures/training_epochs/training_epoch_Yelp_Recall_20.pdf}\n\\caption{Recall@20 changes with training epochs on Amazon-Book and Yelp. Other metric@Ks show a similar tendency.}\n\\label{fig:metric_training_epoch}\n\\end{figure}",
            "fig:nneg_study": "\\begin{figure}[!t]\n\\centering\n\\includegraphics[width=4.10cm]{file/figures/nneg/num_neg_Amazon-Book.pdf}\n\\includegraphics[width=4.10cm]{file/figures/nneg/num_neg_Yelp.pdf}\n\\caption{The number of negative samples for selection. }\n\\label{fig:nneg_study}\n\\vspace{-10pt}\n\\end{figure}"
        },
        "equations": {
            "eq:1": "\\begin{equation}\n    \\langle\\mathbf{x},\\mathbf{y}\\rangle_\\mathcal{L}:=-x_0y_0 + \\sum_{i=1}^n x_iy_i.\n\\label{equ:inner_product}\n\\end{equation}",
            "eq:2": "\\begin{equation}\n\\begin{aligned}\n    \\mathbf{e}_i^0 &= \\exp_\\mathbf{o}(\\mathbf{z}_i^0), \\quad \\quad \\mathbf{e}_u^0 = \\exp_\\mathbf{o}(\\mathbf{z}_u^0) \\\\\n    \\mathbf{z}_i^0 &= (0, \\mathbf{x}_i), \\quad\\quad \\mathbf{z}_u^0 = (0, \\mathbf{x}_u)\n\\end{aligned}\n    \\label{equ: initialization}\n\\end{equation}",
            "eq:3": "\\begin{equation}\n    \\mathbf{z}_i^{k} = \\mathbf{z}_i^{k-1} + \\sum_{u\\in \\mathcal{N}_i}\\frac{1}{|\\mathcal{N}_i|}\\mathbf{z}_u^{k-1}, \\quad\\quad \\mathbf{z}_u^{k} = \\mathbf{z}_u^{k-1} + \\sum_{i\\in \\mathcal{N}_u}\\frac{1}{|\\mathcal{N}_u|}\\mathbf{z}_i^{k-1}. \n\\end{equation}",
            "eq:4": "\\begin{equation}\n    \\mathbf{z}_i = \\sum_{k} \\mathbf{z}_i^k, \\quad\\quad \\mathbf{z}_u = \\sum_{k} \\mathbf{z}_u^k.\n    \\label{equ:multiple aggregation}\n\\end{equation}",
            "eq:5": "\\begin{equation}\n    \\mathbf{e}_i=\\exp_\\mathbf{o}(\\mathbf{z}_i), \\quad\\quad\\mathbf{e}_u=\\exp_\\mathbf{o}(\\mathbf{z}_u),\n\\end{equation}",
            "eq:6": "\\begin{equation}\n    \\ell(u,i,j) = \\max(\\underbrace{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_i)}_{\\text{Pull}}-\\underbrace{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_j)}_{\\text{Push}}+m, 0), \n    \\label{equ:origin_ranking_loss}\n\\end{equation}",
            "eq:7": "\\begin{equation}\n\\begin{aligned}\n      m^\\mathcal{H}_{ui} &= \\mathrm{sigmoid}(\\delta), \\\\\n      \\delta &= \\frac{d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{o})+d_\\mathcal{H}^2(\\mathbf{e}_i, \\mathbf{o})-d_\\mathcal{H}^2(\\mathbf{e}_u, \\mathbf{e}_i)}{\\mathbf{e}_{u,0}\\mathbf{e}_{i,0}},\n\\end{aligned}\n\\label{equ:hyperbolic_margin}\n\\end{equation}"
        }
    }
}